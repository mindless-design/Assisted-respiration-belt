
c:/Users/edmun/Documents/Photon/basic_ADC_test_and_transmit/target/3.2.0/photon/basic_ADC_test_and_transmit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000040a0  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a40c0  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00001074  20000000  080a40c4  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00001480  20001078  20001078  00041078  2**3
                  ALLOC
  6 .module_info_suffix 00000028  080a5138  080a5138  00035138  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a5160  080a5160  00035160  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000cdde1  00000000  00000000  00035164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 0000fcee  00000000  00000000  00102f45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    0001dfc4  00000000  00000000  00112c33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001e80  00000000  00000000  00130bf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00004f40  00000000  00000000  00132a77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00024414  00000000  00000000  001379b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00029687  00000000  00000000  0015bdcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000b8c62  00000000  00000000  00185452  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  0000524c  00000000  00000000  0023e0b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f003 fd23 	bl	80a3a7c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f003 fd45 	bl	80a3acc <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080a40c4 	.word	0x080a40c4
 80a0050:	20001074 	.word	0x20001074
 80a0054:	20001078 	.word	0x20001078
 80a0058:	200024f5 	.word	0x200024f5
 80a005c:	200024f5 	.word	0x200024f5

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f001 f91b 	bl	80a129c <module_user_init_hook>

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0066:	2500      	movs	r5, #0
 80a0068:	4e05      	ldr	r6, [pc, #20]	; (80a0080 <module_user_init+0x20>)
 80a006a:	4c06      	ldr	r4, [pc, #24]	; (80a0084 <module_user_init+0x24>)
 80a006c:	1ba4      	subs	r4, r4, r6
 80a006e:	08a4      	lsrs	r4, r4, #2
 80a0070:	42ac      	cmp	r4, r5
 80a0072:	d100      	bne.n	80a0076 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0074:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0076:	f856 3b04 	ldr.w	r3, [r6], #4
 80a007a:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f7      	b.n	80a0070 <module_user_init+0x10>
 80a0080:	080a409c 	.word	0x080a409c
 80a0084:	080a40c0 	.word	0x080a40c0

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 bbd8 	b.w	80a083c <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 faa7 	bl	80a05e0 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0096:	f001 b8b9 	b.w	80a120c <_post_loop>

080a009a <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80a009a:	f000 bfc1 	b.w	80a1020 <malloc>

080a009e <_Znaj>:
 80a009e:	f000 bfbf 	b.w	80a1020 <malloc>

080a00a2 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 80a00a2:	f000 bfc5 	b.w	80a1030 <free>

080a00a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a6:	7800      	ldrb	r0, [r0, #0]
 80a00a8:	fab0 f080 	clz	r0, r0
 80a00ac:	0940      	lsrs	r0, r0, #5
 80a00ae:	4770      	bx	lr

080a00b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00b0:	2301      	movs	r3, #1
 80a00b2:	7003      	strb	r3, [r0, #0]
 80a00b4:	4770      	bx	lr
	...

080a00b8 <NVIC_Init>:
 80a00b8:	78c3      	ldrb	r3, [r0, #3]
 80a00ba:	b31b      	cbz	r3, 80a0104 <NVIC_Init+0x4c>
 80a00bc:	4b17      	ldr	r3, [pc, #92]	; (80a011c <NVIC_Init+0x64>)
 80a00be:	68da      	ldr	r2, [r3, #12]
 80a00c0:	7843      	ldrb	r3, [r0, #1]
 80a00c2:	43d2      	mvns	r2, r2
 80a00c4:	f3c2 2202 	ubfx	r2, r2, #8, #3
 80a00c8:	f1c2 0104 	rsb	r1, r2, #4
 80a00cc:	b2c9      	uxtb	r1, r1
 80a00ce:	408b      	lsls	r3, r1
 80a00d0:	b2d9      	uxtb	r1, r3
 80a00d2:	230f      	movs	r3, #15
 80a00d4:	4113      	asrs	r3, r2
 80a00d6:	7882      	ldrb	r2, [r0, #2]
 80a00d8:	4013      	ands	r3, r2
 80a00da:	7802      	ldrb	r2, [r0, #0]
 80a00dc:	430b      	orrs	r3, r1
 80a00de:	011b      	lsls	r3, r3, #4
 80a00e0:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
 80a00e4:	b2db      	uxtb	r3, r3
 80a00e6:	f502 4261 	add.w	r2, r2, #57600	; 0xe100
 80a00ea:	f882 3300 	strb.w	r3, [r2, #768]	; 0x300
 80a00ee:	7803      	ldrb	r3, [r0, #0]
 80a00f0:	2201      	movs	r2, #1
 80a00f2:	0959      	lsrs	r1, r3, #5
 80a00f4:	f003 031f 	and.w	r3, r3, #31
 80a00f8:	fa02 f303 	lsl.w	r3, r2, r3
 80a00fc:	4a08      	ldr	r2, [pc, #32]	; (80a0120 <NVIC_Init+0x68>)
 80a00fe:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80a0102:	4770      	bx	lr
 80a0104:	7803      	ldrb	r3, [r0, #0]
 80a0106:	2101      	movs	r1, #1
 80a0108:	095a      	lsrs	r2, r3, #5
 80a010a:	f003 031f 	and.w	r3, r3, #31
 80a010e:	4099      	lsls	r1, r3
 80a0110:	f102 0320 	add.w	r3, r2, #32
 80a0114:	4a02      	ldr	r2, [pc, #8]	; (80a0120 <NVIC_Init+0x68>)
 80a0116:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80a011a:	4770      	bx	lr
 80a011c:	e000ed00 	.word	0xe000ed00
 80a0120:	e000e100 	.word	0xe000e100

080a0124 <ADC_Init>:
 80a0124:	6843      	ldr	r3, [r0, #4]
 80a0126:	b510      	push	{r4, lr}
 80a0128:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80a012c:	680b      	ldr	r3, [r1, #0]
 80a012e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80a0132:	4313      	orrs	r3, r2
 80a0134:	790a      	ldrb	r2, [r1, #4]
 80a0136:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a013a:	6043      	str	r3, [r0, #4]
 80a013c:	68ca      	ldr	r2, [r1, #12]
 80a013e:	690b      	ldr	r3, [r1, #16]
 80a0140:	6884      	ldr	r4, [r0, #8]
 80a0142:	431a      	orrs	r2, r3
 80a0144:	688b      	ldr	r3, [r1, #8]
 80a0146:	431a      	orrs	r2, r3
 80a0148:	4b08      	ldr	r3, [pc, #32]	; (80a016c <ADC_Init+0x48>)
 80a014a:	4023      	ands	r3, r4
 80a014c:	4313      	orrs	r3, r2
 80a014e:	794a      	ldrb	r2, [r1, #5]
 80a0150:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 80a0154:	6083      	str	r3, [r0, #8]
 80a0156:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80a0158:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80a015c:	7d0b      	ldrb	r3, [r1, #20]
 80a015e:	3b01      	subs	r3, #1
 80a0160:	b2db      	uxtb	r3, r3
 80a0162:	ea42 5303 	orr.w	r3, r2, r3, lsl #20
 80a0166:	62c3      	str	r3, [r0, #44]	; 0x2c
 80a0168:	bd10      	pop	{r4, pc}
 80a016a:	bf00      	nop
 80a016c:	c0fff7fd 	.word	0xc0fff7fd

080a0170 <ADC_CommonInit>:
 80a0170:	b510      	push	{r4, lr}
 80a0172:	4c07      	ldr	r4, [pc, #28]	; (80a0190 <ADC_CommonInit+0x20>)
 80a0174:	4b07      	ldr	r3, [pc, #28]	; (80a0194 <ADC_CommonInit+0x24>)
 80a0176:	6862      	ldr	r2, [r4, #4]
 80a0178:	4013      	ands	r3, r2
 80a017a:	e890 0006 	ldmia.w	r0, {r1, r2}
 80a017e:	4311      	orrs	r1, r2
 80a0180:	6882      	ldr	r2, [r0, #8]
 80a0182:	4311      	orrs	r1, r2
 80a0184:	68c2      	ldr	r2, [r0, #12]
 80a0186:	430a      	orrs	r2, r1
 80a0188:	4313      	orrs	r3, r2
 80a018a:	6063      	str	r3, [r4, #4]
 80a018c:	bd10      	pop	{r4, pc}
 80a018e:	bf00      	nop
 80a0190:	40012300 	.word	0x40012300
 80a0194:	fffc30e0 	.word	0xfffc30e0

080a0198 <ADC_Cmd>:
 80a0198:	6883      	ldr	r3, [r0, #8]
 80a019a:	b111      	cbz	r1, 80a01a2 <ADC_Cmd+0xa>
 80a019c:	f043 0301 	orr.w	r3, r3, #1
 80a01a0:	e001      	b.n	80a01a6 <ADC_Cmd+0xe>
 80a01a2:	f023 0301 	bic.w	r3, r3, #1
 80a01a6:	6083      	str	r3, [r0, #8]
 80a01a8:	4770      	bx	lr

080a01aa <ADC_RegularChannelConfig>:
 80a01aa:	2909      	cmp	r1, #9
 80a01ac:	b570      	push	{r4, r5, r6, lr}
 80a01ae:	d90c      	bls.n	80a01ca <ADC_RegularChannelConfig+0x20>
 80a01b0:	f1a1 040a 	sub.w	r4, r1, #10
 80a01b4:	68c6      	ldr	r6, [r0, #12]
 80a01b6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80a01ba:	2507      	movs	r5, #7
 80a01bc:	40a5      	lsls	r5, r4
 80a01be:	ea26 0505 	bic.w	r5, r6, r5
 80a01c2:	40a3      	lsls	r3, r4
 80a01c4:	432b      	orrs	r3, r5
 80a01c6:	60c3      	str	r3, [r0, #12]
 80a01c8:	e009      	b.n	80a01de <ADC_RegularChannelConfig+0x34>
 80a01ca:	6905      	ldr	r5, [r0, #16]
 80a01cc:	eb01 0641 	add.w	r6, r1, r1, lsl #1
 80a01d0:	2407      	movs	r4, #7
 80a01d2:	40b4      	lsls	r4, r6
 80a01d4:	ea25 0404 	bic.w	r4, r5, r4
 80a01d8:	40b3      	lsls	r3, r6
 80a01da:	4323      	orrs	r3, r4
 80a01dc:	6103      	str	r3, [r0, #16]
 80a01de:	2a06      	cmp	r2, #6
 80a01e0:	d80b      	bhi.n	80a01fa <ADC_RegularChannelConfig+0x50>
 80a01e2:	3a01      	subs	r2, #1
 80a01e4:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80a01e6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80a01ea:	231f      	movs	r3, #31
 80a01ec:	4093      	lsls	r3, r2
 80a01ee:	ea24 0303 	bic.w	r3, r4, r3
 80a01f2:	4091      	lsls	r1, r2
 80a01f4:	4319      	orrs	r1, r3
 80a01f6:	6341      	str	r1, [r0, #52]	; 0x34
 80a01f8:	bd70      	pop	{r4, r5, r6, pc}
 80a01fa:	2a0c      	cmp	r2, #12
 80a01fc:	d80b      	bhi.n	80a0216 <ADC_RegularChannelConfig+0x6c>
 80a01fe:	3a07      	subs	r2, #7
 80a0200:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80a0202:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80a0206:	231f      	movs	r3, #31
 80a0208:	4093      	lsls	r3, r2
 80a020a:	ea24 0303 	bic.w	r3, r4, r3
 80a020e:	4091      	lsls	r1, r2
 80a0210:	4319      	orrs	r1, r3
 80a0212:	6301      	str	r1, [r0, #48]	; 0x30
 80a0214:	bd70      	pop	{r4, r5, r6, pc}
 80a0216:	3a0d      	subs	r2, #13
 80a0218:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80a021a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80a021e:	231f      	movs	r3, #31
 80a0220:	4093      	lsls	r3, r2
 80a0222:	ea24 0303 	bic.w	r3, r4, r3
 80a0226:	4091      	lsls	r1, r2
 80a0228:	4319      	orrs	r1, r3
 80a022a:	62c1      	str	r1, [r0, #44]	; 0x2c
 80a022c:	bd70      	pop	{r4, r5, r6, pc}

080a022e <ADC_SoftwareStartConv>:
 80a022e:	6883      	ldr	r3, [r0, #8]
 80a0230:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80a0234:	6083      	str	r3, [r0, #8]
 80a0236:	4770      	bx	lr

080a0238 <ADC_MultiModeDMARequestAfterLastTransferCmd>:
 80a0238:	4b04      	ldr	r3, [pc, #16]	; (80a024c <ADC_MultiModeDMARequestAfterLastTransferCmd+0x14>)
 80a023a:	685a      	ldr	r2, [r3, #4]
 80a023c:	b110      	cbz	r0, 80a0244 <ADC_MultiModeDMARequestAfterLastTransferCmd+0xc>
 80a023e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80a0242:	e001      	b.n	80a0248 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x10>
 80a0244:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80a0248:	605a      	str	r2, [r3, #4]
 80a024a:	4770      	bx	lr
 80a024c:	40012300 	.word	0x40012300

080a0250 <DMA_Init>:
 80a0250:	6802      	ldr	r2, [r0, #0]
 80a0252:	4b13      	ldr	r3, [pc, #76]	; (80a02a0 <DMA_Init+0x50>)
 80a0254:	b510      	push	{r4, lr}
 80a0256:	4013      	ands	r3, r2
 80a0258:	68cc      	ldr	r4, [r1, #12]
 80a025a:	680a      	ldr	r2, [r1, #0]
 80a025c:	4314      	orrs	r4, r2
 80a025e:	694a      	ldr	r2, [r1, #20]
 80a0260:	4314      	orrs	r4, r2
 80a0262:	698a      	ldr	r2, [r1, #24]
 80a0264:	4314      	orrs	r4, r2
 80a0266:	69ca      	ldr	r2, [r1, #28]
 80a0268:	4314      	orrs	r4, r2
 80a026a:	6a0a      	ldr	r2, [r1, #32]
 80a026c:	4314      	orrs	r4, r2
 80a026e:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 80a0270:	4314      	orrs	r4, r2
 80a0272:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80a0274:	4314      	orrs	r4, r2
 80a0276:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 80a0278:	4314      	orrs	r4, r2
 80a027a:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 80a027c:	4322      	orrs	r2, r4
 80a027e:	4313      	orrs	r3, r2
 80a0280:	6003      	str	r3, [r0, #0]
 80a0282:	6943      	ldr	r3, [r0, #20]
 80a0284:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 80a0286:	f023 0207 	bic.w	r2, r3, #7
 80a028a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80a028c:	4323      	orrs	r3, r4
 80a028e:	4313      	orrs	r3, r2
 80a0290:	6143      	str	r3, [r0, #20]
 80a0292:	690b      	ldr	r3, [r1, #16]
 80a0294:	6043      	str	r3, [r0, #4]
 80a0296:	684b      	ldr	r3, [r1, #4]
 80a0298:	6083      	str	r3, [r0, #8]
 80a029a:	688b      	ldr	r3, [r1, #8]
 80a029c:	60c3      	str	r3, [r0, #12]
 80a029e:	bd10      	pop	{r4, pc}
 80a02a0:	f01c803f 	.word	0xf01c803f

080a02a4 <DMA_Cmd>:
 80a02a4:	6803      	ldr	r3, [r0, #0]
 80a02a6:	b111      	cbz	r1, 80a02ae <DMA_Cmd+0xa>
 80a02a8:	f043 0301 	orr.w	r3, r3, #1
 80a02ac:	e001      	b.n	80a02b2 <DMA_Cmd+0xe>
 80a02ae:	f023 0301 	bic.w	r3, r3, #1
 80a02b2:	6003      	str	r3, [r0, #0]
 80a02b4:	4770      	bx	lr
	...

080a02b8 <DMA_GetFlagStatus>:
 80a02b8:	4b0a      	ldr	r3, [pc, #40]	; (80a02e4 <DMA_GetFlagStatus+0x2c>)
 80a02ba:	b510      	push	{r4, lr}
 80a02bc:	4a0a      	ldr	r2, [pc, #40]	; (80a02e8 <DMA_GetFlagStatus+0x30>)
 80a02be:	4c0b      	ldr	r4, [pc, #44]	; (80a02ec <DMA_GetFlagStatus+0x34>)
 80a02c0:	42a0      	cmp	r0, r4
 80a02c2:	bf94      	ite	ls
 80a02c4:	4618      	movls	r0, r3
 80a02c6:	4610      	movhi	r0, r2
 80a02c8:	008b      	lsls	r3, r1, #2
 80a02ca:	bf4c      	ite	mi
 80a02cc:	6843      	ldrmi	r3, [r0, #4]
 80a02ce:	6803      	ldrpl	r3, [r0, #0]
 80a02d0:	f021 21f0 	bic.w	r1, r1, #4026593280	; 0xf000f000
 80a02d4:	f021 1182 	bic.w	r1, r1, #8519810	; 0x820082
 80a02d8:	4219      	tst	r1, r3
 80a02da:	bf14      	ite	ne
 80a02dc:	2001      	movne	r0, #1
 80a02de:	2000      	moveq	r0, #0
 80a02e0:	bd10      	pop	{r4, pc}
 80a02e2:	bf00      	nop
 80a02e4:	40026000 	.word	0x40026000
 80a02e8:	40026400 	.word	0x40026400
 80a02ec:	4002640f 	.word	0x4002640f

080a02f0 <DMA_ClearFlag>:
 80a02f0:	b510      	push	{r4, lr}
 80a02f2:	4a08      	ldr	r2, [pc, #32]	; (80a0314 <DMA_ClearFlag+0x24>)
 80a02f4:	4b08      	ldr	r3, [pc, #32]	; (80a0318 <DMA_ClearFlag+0x28>)
 80a02f6:	4c09      	ldr	r4, [pc, #36]	; (80a031c <DMA_ClearFlag+0x2c>)
 80a02f8:	42a0      	cmp	r0, r4
 80a02fa:	bf94      	ite	ls
 80a02fc:	4618      	movls	r0, r3
 80a02fe:	4610      	movhi	r0, r2
 80a0300:	f011 5f00 	tst.w	r1, #536870912	; 0x20000000
 80a0304:	f021 21f0 	bic.w	r1, r1, #4026593280	; 0xf000f000
 80a0308:	f021 1182 	bic.w	r1, r1, #8519810	; 0x820082
 80a030c:	bf14      	ite	ne
 80a030e:	60c1      	strne	r1, [r0, #12]
 80a0310:	6081      	streq	r1, [r0, #8]
 80a0312:	bd10      	pop	{r4, pc}
 80a0314:	40026400 	.word	0x40026400
 80a0318:	40026000 	.word	0x40026000
 80a031c:	4002640f 	.word	0x4002640f

080a0320 <RCC_AHB1PeriphClockCmd>:
 80a0320:	4b04      	ldr	r3, [pc, #16]	; (80a0334 <RCC_AHB1PeriphClockCmd+0x14>)
 80a0322:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80a0324:	b109      	cbz	r1, 80a032a <RCC_AHB1PeriphClockCmd+0xa>
 80a0326:	4310      	orrs	r0, r2
 80a0328:	e001      	b.n	80a032e <RCC_AHB1PeriphClockCmd+0xe>
 80a032a:	ea22 0000 	bic.w	r0, r2, r0
 80a032e:	6318      	str	r0, [r3, #48]	; 0x30
 80a0330:	4770      	bx	lr
 80a0332:	bf00      	nop
 80a0334:	40023800 	.word	0x40023800

080a0338 <RCC_APB1PeriphClockCmd>:
 80a0338:	4b04      	ldr	r3, [pc, #16]	; (80a034c <RCC_APB1PeriphClockCmd+0x14>)
 80a033a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80a033c:	b109      	cbz	r1, 80a0342 <RCC_APB1PeriphClockCmd+0xa>
 80a033e:	4310      	orrs	r0, r2
 80a0340:	e001      	b.n	80a0346 <RCC_APB1PeriphClockCmd+0xe>
 80a0342:	ea22 0000 	bic.w	r0, r2, r0
 80a0346:	6418      	str	r0, [r3, #64]	; 0x40
 80a0348:	4770      	bx	lr
 80a034a:	bf00      	nop
 80a034c:	40023800 	.word	0x40023800

080a0350 <RCC_APB2PeriphClockCmd>:
 80a0350:	4b04      	ldr	r3, [pc, #16]	; (80a0364 <RCC_APB2PeriphClockCmd+0x14>)
 80a0352:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80a0354:	b109      	cbz	r1, 80a035a <RCC_APB2PeriphClockCmd+0xa>
 80a0356:	4310      	orrs	r0, r2
 80a0358:	e001      	b.n	80a035e <RCC_APB2PeriphClockCmd+0xe>
 80a035a:	ea22 0000 	bic.w	r0, r2, r0
 80a035e:	6458      	str	r0, [r3, #68]	; 0x44
 80a0360:	4770      	bx	lr
 80a0362:	bf00      	nop
 80a0364:	40023800 	.word	0x40023800

080a0368 <TIM_TimeBaseInit>:
 80a0368:	4a1c      	ldr	r2, [pc, #112]	; (80a03dc <TIM_TimeBaseInit+0x74>)
 80a036a:	8803      	ldrh	r3, [r0, #0]
 80a036c:	4290      	cmp	r0, r2
 80a036e:	b29b      	uxth	r3, r3
 80a0370:	d012      	beq.n	80a0398 <TIM_TimeBaseInit+0x30>
 80a0372:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80a0376:	4290      	cmp	r0, r2
 80a0378:	d00e      	beq.n	80a0398 <TIM_TimeBaseInit+0x30>
 80a037a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80a037e:	d00b      	beq.n	80a0398 <TIM_TimeBaseInit+0x30>
 80a0380:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 80a0384:	4290      	cmp	r0, r2
 80a0386:	d007      	beq.n	80a0398 <TIM_TimeBaseInit+0x30>
 80a0388:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80a038c:	4290      	cmp	r0, r2
 80a038e:	d003      	beq.n	80a0398 <TIM_TimeBaseInit+0x30>
 80a0390:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80a0394:	4290      	cmp	r0, r2
 80a0396:	d103      	bne.n	80a03a0 <TIM_TimeBaseInit+0x38>
 80a0398:	884a      	ldrh	r2, [r1, #2]
 80a039a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80a039e:	4313      	orrs	r3, r2
 80a03a0:	4a0f      	ldr	r2, [pc, #60]	; (80a03e0 <TIM_TimeBaseInit+0x78>)
 80a03a2:	4290      	cmp	r0, r2
 80a03a4:	d008      	beq.n	80a03b8 <TIM_TimeBaseInit+0x50>
 80a03a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80a03aa:	4290      	cmp	r0, r2
 80a03ac:	bf1f      	itttt	ne
 80a03ae:	f423 7340 	bicne.w	r3, r3, #768	; 0x300
 80a03b2:	890a      	ldrhne	r2, [r1, #8]
 80a03b4:	b29b      	uxthne	r3, r3
 80a03b6:	4313      	orrne	r3, r2
 80a03b8:	8003      	strh	r3, [r0, #0]
 80a03ba:	684b      	ldr	r3, [r1, #4]
 80a03bc:	62c3      	str	r3, [r0, #44]	; 0x2c
 80a03be:	880b      	ldrh	r3, [r1, #0]
 80a03c0:	8503      	strh	r3, [r0, #40]	; 0x28
 80a03c2:	4b06      	ldr	r3, [pc, #24]	; (80a03dc <TIM_TimeBaseInit+0x74>)
 80a03c4:	4298      	cmp	r0, r3
 80a03c6:	d003      	beq.n	80a03d0 <TIM_TimeBaseInit+0x68>
 80a03c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80a03cc:	4298      	cmp	r0, r3
 80a03ce:	d101      	bne.n	80a03d4 <TIM_TimeBaseInit+0x6c>
 80a03d0:	7a8b      	ldrb	r3, [r1, #10]
 80a03d2:	8603      	strh	r3, [r0, #48]	; 0x30
 80a03d4:	2301      	movs	r3, #1
 80a03d6:	8283      	strh	r3, [r0, #20]
 80a03d8:	4770      	bx	lr
 80a03da:	bf00      	nop
 80a03dc:	40010000 	.word	0x40010000
 80a03e0:	40001000 	.word	0x40001000

080a03e4 <TIM_TimeBaseStructInit>:
 80a03e4:	f04f 33ff 	mov.w	r3, #4294967295
 80a03e8:	6043      	str	r3, [r0, #4]
 80a03ea:	2300      	movs	r3, #0
 80a03ec:	8003      	strh	r3, [r0, #0]
 80a03ee:	8103      	strh	r3, [r0, #8]
 80a03f0:	8043      	strh	r3, [r0, #2]
 80a03f2:	7283      	strb	r3, [r0, #10]
 80a03f4:	4770      	bx	lr

080a03f6 <TIM_Cmd>:
 80a03f6:	8803      	ldrh	r3, [r0, #0]
 80a03f8:	b119      	cbz	r1, 80a0402 <TIM_Cmd+0xc>
 80a03fa:	b29b      	uxth	r3, r3
 80a03fc:	f043 0301 	orr.w	r3, r3, #1
 80a0400:	e003      	b.n	80a040a <TIM_Cmd+0x14>
 80a0402:	f023 0301 	bic.w	r3, r3, #1
 80a0406:	041b      	lsls	r3, r3, #16
 80a0408:	0c1b      	lsrs	r3, r3, #16
 80a040a:	8003      	strh	r3, [r0, #0]
 80a040c:	4770      	bx	lr

080a040e <TIM_SelectOutputTrigger>:
 80a040e:	8883      	ldrh	r3, [r0, #4]
 80a0410:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80a0414:	041b      	lsls	r3, r3, #16
 80a0416:	0c1b      	lsrs	r3, r3, #16
 80a0418:	8083      	strh	r3, [r0, #4]
 80a041a:	8883      	ldrh	r3, [r0, #4]
 80a041c:	b29b      	uxth	r3, r3
 80a041e:	4319      	orrs	r1, r3
 80a0420:	8081      	strh	r1, [r0, #4]
 80a0422:	4770      	bx	lr

080a0424 <_Z9decimatoriPtPd>:
double largest_peak = 0;
double respiration_frequency = 0;

double respiration_rate_per_minute = -1;

double decimator(int filter_length, uint16_t samples_to_be_decimated[], double filter_coeffs[]) {
 80a0424:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0428:	460d      	mov	r5, r1
 80a042a:	4692      	mov	sl, r2
  double filtered_sample = 0;

  // Since the ADCs are sampling simulaneously, the samples from each need to be averaged. Then
  // the FIR filter is applied and only 1 of every "DECIMATION_FACTOR" samples is saved.
  for (size_t ii = 0; ii < SAMPLE_BUF_SIZE/2; ii += 2) {
 80a042c:	2400      	movs	r4, #0
  double filtered_sample = 0;
 80a042e:	2600      	movs	r6, #0
 80a0430:	2700      	movs	r7, #0
    filtered_sample += (samples_to_be_decimated[ii]+samples_to_be_decimated[ii+1])*filter_coeffs[ii]/2; 
 80a0432:	f04f 0800 	mov.w	r8, #0
 80a0436:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80a047c <_Z9decimatoriPtPd+0x58>
 80a043a:	f101 0b02 	add.w	fp, r1, #2
 80a043e:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
 80a0442:	f83b 0014 	ldrh.w	r0, [fp, r4, lsl #1]
 80a0446:	4418      	add	r0, r3
 80a0448:	f002 ffe6 	bl	80a3418 <__aeabi_i2d>
 80a044c:	eb0a 03c4 	add.w	r3, sl, r4, lsl #3
 80a0450:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0454:	f003 f84a 	bl	80a34ec <__aeabi_dmul>
 80a0458:	4642      	mov	r2, r8
 80a045a:	464b      	mov	r3, r9
 80a045c:	f003 f846 	bl	80a34ec <__aeabi_dmul>
 80a0460:	4602      	mov	r2, r0
 80a0462:	460b      	mov	r3, r1
 80a0464:	4630      	mov	r0, r6
 80a0466:	4639      	mov	r1, r7
 80a0468:	f002 fe8a 	bl	80a3180 <__adddf3>
  for (size_t ii = 0; ii < SAMPLE_BUF_SIZE/2; ii += 2) {
 80a046c:	3402      	adds	r4, #2
 80a046e:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
    filtered_sample += (samples_to_be_decimated[ii]+samples_to_be_decimated[ii+1])*filter_coeffs[ii]/2; 
 80a0472:	4606      	mov	r6, r0
 80a0474:	460f      	mov	r7, r1
  for (size_t ii = 0; ii < SAMPLE_BUF_SIZE/2; ii += 2) {
 80a0476:	d1e2      	bne.n	80a043e <_Z9decimatoriPtPd+0x1a>
  }
  
  return filtered_sample;
}
 80a0478:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a047c:	3fe00000 	.word	0x3fe00000

080a0480 <_ZNSt12_Vector_baseIdSaIdEED1Ev>:
      _Vector_base(const allocator_type& __a, _Vector_base&& __x)
      : _M_impl(_Tp_alloc_type(__a), std::move(__x._M_impl))
      { }
#endif

      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80a0480:	b510      	push	{r4, lr}
 80a0482:	4604      	mov	r4, r0
      {
	_M_deallocate(_M_impl._M_start,
 80a0484:	6800      	ldr	r0, [r0, #0]

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
 80a0486:	b118      	cbz	r0, 80a0490 <_ZNSt12_Vector_baseIdSaIdEED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80a0488:	68a1      	ldr	r1, [r4, #8]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 80a048a:	1a09      	subs	r1, r1, r0
 80a048c:	f7ff fe09 	bl	80a00a2 <_ZdlPvj>
      }
 80a0490:	4620      	mov	r0, r4
 80a0492:	bd10      	pop	{r4, pc}

080a0494 <_ZNSt6vectorIdSaIdEE17_M_realloc_insertIJdEEEvN9__gnu_cxx17__normal_iteratorIPdS1_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 80a0494:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
 80a0498:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80a049c:	e9d0 8900 	ldrd	r8, r9, [r0]
 80a04a0:	4693      	mov	fp, r2
 80a04a2:	eba9 0208 	sub.w	r2, r9, r8
	if (max_size() - size() < __n)
 80a04a6:	ebb3 0fe2 	cmp.w	r3, r2, asr #3
 80a04aa:	4607      	mov	r7, r0
 80a04ac:	468a      	mov	sl, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80a04ae:	ea4f 04e2 	mov.w	r4, r2, asr #3
	if (max_size() - size() < __n)
 80a04b2:	d102      	bne.n	80a04ba <_ZNSt6vectorIdSaIdEE17_M_realloc_insertIJdEEEvN9__gnu_cxx17__normal_iteratorIPdS1_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 80a04b4:	4820      	ldr	r0, [pc, #128]	; (80a0538 <_ZNSt6vectorIdSaIdEE17_M_realloc_insertIJdEEEvN9__gnu_cxx17__normal_iteratorIPdS1_EEDpOT_+0xa4>)
 80a04b6:	f001 fc6c 	bl	80a1d92 <_ZSt20__throw_length_errorPKc>
 80a04ba:	2c01      	cmp	r4, #1
 80a04bc:	4622      	mov	r2, r4
 80a04be:	bf38      	it	cc
 80a04c0:	2201      	movcc	r2, #1
 80a04c2:	18a4      	adds	r4, r4, r2
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 80a04c4:	eba1 0508 	sub.w	r5, r1, r8

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80a04c8:	d231      	bcs.n	80a052e <_ZNSt6vectorIdSaIdEE17_M_realloc_insertIJdEEEvN9__gnu_cxx17__normal_iteratorIPdS1_EEDpOT_+0x9a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80a04ca:	b394      	cbz	r4, 80a0532 <_ZNSt6vectorIdSaIdEE17_M_realloc_insertIJdEEEvN9__gnu_cxx17__normal_iteratorIPdS1_EEDpOT_+0x9e>
 80a04cc:	429c      	cmp	r4, r3
 80a04ce:	bf28      	it	cs
 80a04d0:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a04d2:	00e0      	lsls	r0, r4, #3
 80a04d4:	f7ff fde1 	bl	80a009a <_Znwj>
 80a04d8:	4606      	mov	r6, r0
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80a04da:	1971      	adds	r1, r6, r5
 80a04dc:	d003      	beq.n	80a04e6 <_ZNSt6vectorIdSaIdEE17_M_realloc_insertIJdEEEvN9__gnu_cxx17__normal_iteratorIPdS1_EEDpOT_+0x52>
 80a04de:	e9db 2300 	ldrd	r2, r3, [fp]
 80a04e2:	e9c1 2300 	strd	r2, r3, [r1]
    inline __enable_if_t<std::__is_bitwise_relocatable<_Tp>::value, _Tp*>
    __relocate_a_1(_Tp* __first, _Tp* __last,
		   _Tp* __result, allocator<_Up>&) noexcept
    {
      ptrdiff_t __count = __last - __first;
      if (__count > 0)
 80a04e6:	2d00      	cmp	r5, #0
 80a04e8:	dd04      	ble.n	80a04f4 <_ZNSt6vectorIdSaIdEE17_M_realloc_insertIJdEEEvN9__gnu_cxx17__normal_iteratorIPdS1_EEDpOT_+0x60>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80a04ea:	462a      	mov	r2, r5
 80a04ec:	4641      	mov	r1, r8
 80a04ee:	4630      	mov	r0, r6
 80a04f0:	f003 fad2 	bl	80a3a98 <memmove>
      ptrdiff_t __count = __last - __first;
 80a04f4:	eba9 090a 	sub.w	r9, r9, sl
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
					 __new_start, _M_get_Tp_allocator());

	      ++__new_finish;
 80a04f8:	3508      	adds	r5, #8
      if (__count > 0)
 80a04fa:	f1b9 0f00 	cmp.w	r9, #0
 80a04fe:	4435      	add	r5, r6
 80a0500:	dd04      	ble.n	80a050c <_ZNSt6vectorIdSaIdEE17_M_realloc_insertIJdEEEvN9__gnu_cxx17__normal_iteratorIPdS1_EEDpOT_+0x78>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80a0502:	464a      	mov	r2, r9
 80a0504:	4651      	mov	r1, sl
 80a0506:	4628      	mov	r0, r5
 80a0508:	f003 fab8 	bl	80a3a7c <memcpy>
      return __result + __count;
 80a050c:	444d      	add	r5, r9
	if (__p)
 80a050e:	f1b8 0f00 	cmp.w	r8, #0
 80a0512:	d005      	beq.n	80a0520 <_ZNSt6vectorIdSaIdEE17_M_realloc_insertIJdEEEvN9__gnu_cxx17__normal_iteratorIPdS1_EEDpOT_+0x8c>
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
 80a0514:	68b9      	ldr	r1, [r7, #8]
	::operator delete(__p
 80a0516:	4640      	mov	r0, r8
 80a0518:	eba1 0108 	sub.w	r1, r1, r8
 80a051c:	f7ff fdc1 	bl	80a00a2 <_ZdlPvj>
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80a0520:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
      this->_M_impl._M_finish = __new_finish;
 80a0524:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80a0528:	60bc      	str	r4, [r7, #8]
    }
 80a052a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80a052e:	461c      	mov	r4, r3
 80a0530:	e7cf      	b.n	80a04d2 <_ZNSt6vectorIdSaIdEE17_M_realloc_insertIJdEEEvN9__gnu_cxx17__normal_iteratorIPdS1_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80a0532:	4626      	mov	r6, r4
 80a0534:	e7d1      	b.n	80a04da <_ZNSt6vectorIdSaIdEE17_M_realloc_insertIJdEEEvN9__gnu_cxx17__normal_iteratorIPdS1_EEDpOT_+0x46>
 80a0536:	bf00      	nop
 80a0538:	080a3c64 	.word	0x080a3c64

080a053c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIdEEPT_PKS3_S6_S4_>:
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
 80a053c:	4281      	cmp	r1, r0
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80a053e:	b510      	push	{r4, lr}
 80a0540:	4613      	mov	r3, r2
	  const ptrdiff_t _Num = __last - __first;
 80a0542:	eba1 0400 	sub.w	r4, r1, r0
	  if (_Num)
 80a0546:	d005      	beq.n	80a0554 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIdEEPT_PKS3_S6_S4_+0x18>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80a0548:	4601      	mov	r1, r0
 80a054a:	4622      	mov	r2, r4
 80a054c:	4618      	mov	r0, r3
 80a054e:	f003 faa3 	bl	80a3a98 <memmove>
 80a0552:	4603      	mov	r3, r0
	  return __result + _Num;
	}
 80a0554:	1918      	adds	r0, r3, r4
 80a0556:	bd10      	pop	{r4, pc}

080a0558 <_ZNSt6vectorIdSaIdEEaSERKS1_.isra.0>:
      if (&__x != this)
 80a0558:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
 80a055a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a055e:	4604      	mov	r4, r0
 80a0560:	460e      	mov	r6, r1
      if (&__x != this)
 80a0562:	d023      	beq.n	80a05ac <_ZNSt6vectorIdSaIdEEaSERKS1_.isra.0+0x54>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80a0564:	e9d1 7800 	ldrd	r7, r8, [r1]
			 - this->_M_impl._M_start); }
 80a0568:	6802      	ldr	r2, [r0, #0]
 80a056a:	6883      	ldr	r3, [r0, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80a056c:	eba8 0507 	sub.w	r5, r8, r7
			 - this->_M_impl._M_start); }
 80a0570:	1a9b      	subs	r3, r3, r2
	  if (__xlen > capacity())
 80a0572:	429d      	cmp	r5, r3
 80a0574:	d91e      	bls.n	80a05b4 <_ZNSt6vectorIdSaIdEEaSERKS1_.isra.0+0x5c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80a0576:	b1dd      	cbz	r5, 80a05b0 <_ZNSt6vectorIdSaIdEEaSERKS1_.isra.0+0x58>
	if (__n > this->_M_max_size())
 80a0578:	4b18      	ldr	r3, [pc, #96]	; (80a05dc <_ZNSt6vectorIdSaIdEEaSERKS1_.isra.0+0x84>)
 80a057a:	429d      	cmp	r5, r3
 80a057c:	d901      	bls.n	80a0582 <_ZNSt6vectorIdSaIdEEaSERKS1_.isra.0+0x2a>
	  std::__throw_bad_alloc();
 80a057e:	f001 fc05 	bl	80a1d8c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a0582:	4628      	mov	r0, r5
 80a0584:	f7ff fd89 	bl	80a009a <_Znwj>
 80a0588:	4606      	mov	r6, r0
      if (std::is_constant_evaluated())
	return std::__copy_move<_IsMove, false, _Category>::
	  __copy_m(__first, __last, __result);
#endif
      return std::__copy_move<_IsMove, __memcpyable<_OI, _II>::__value,
			      _Category>::__copy_m(__first, __last, __result);
 80a058a:	4632      	mov	r2, r6
 80a058c:	4641      	mov	r1, r8
 80a058e:	4638      	mov	r0, r7
 80a0590:	f7ff ffd4 	bl	80a053c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIdEEPT_PKS3_S6_S4_>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80a0594:	6820      	ldr	r0, [r4, #0]
	if (__p)
 80a0596:	b118      	cbz	r0, 80a05a0 <_ZNSt6vectorIdSaIdEEaSERKS1_.isra.0+0x48>
			    - this->_M_impl._M_start);
 80a0598:	68a1      	ldr	r1, [r4, #8]
	::operator delete(__p
 80a059a:	1a09      	subs	r1, r1, r0
 80a059c:	f7ff fd81 	bl	80a00a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
 80a05a0:	6026      	str	r6, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 80a05a2:	442e      	add	r6, r5
 80a05a4:	60a6      	str	r6, [r4, #8]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 80a05a6:	6823      	ldr	r3, [r4, #0]
 80a05a8:	442b      	add	r3, r5
 80a05aa:	6063      	str	r3, [r4, #4]
    }
 80a05ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80a05b0:	462e      	mov	r6, r5
 80a05b2:	e7ea      	b.n	80a058a <_ZNSt6vectorIdSaIdEEaSERKS1_.isra.0+0x32>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80a05b4:	6843      	ldr	r3, [r0, #4]
 80a05b6:	1a9b      	subs	r3, r3, r2
	  else if (size() >= __xlen)
 80a05b8:	429d      	cmp	r5, r3
 80a05ba:	d804      	bhi.n	80a05c6 <_ZNSt6vectorIdSaIdEEaSERKS1_.isra.0+0x6e>
 80a05bc:	4641      	mov	r1, r8
 80a05be:	4638      	mov	r0, r7
 80a05c0:	f7ff ffbc 	bl	80a053c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIdEEPT_PKS3_S6_S4_>
    { return std::uninitialized_copy(__first, __last, __result); }
 80a05c4:	e7ef      	b.n	80a05a6 <_ZNSt6vectorIdSaIdEEaSERKS1_.isra.0+0x4e>
 80a05c6:	18f9      	adds	r1, r7, r3
 80a05c8:	4638      	mov	r0, r7
 80a05ca:	f7ff ffb7 	bl	80a053c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIdEEPT_PKS3_S6_S4_>
 80a05ce:	e9d4 0200 	ldrd	r0, r2, [r4]
 80a05d2:	e9d6 3100 	ldrd	r3, r1, [r6]
 80a05d6:	1a10      	subs	r0, r2, r0
 80a05d8:	4418      	add	r0, r3
 80a05da:	e7f1      	b.n	80a05c0 <_ZNSt6vectorIdSaIdEEaSERKS1_.isra.0+0x68>
 80a05dc:	7ffffff8 	.word	0x7ffffff8

080a05e0 <loop>:
	// Setup for push to cloud
	Particle.variable("respiration", respiration_rate_per_minute);
}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
 80a05e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  
  // Set the pointer to the correct element in the circular buffer that DMA is writing to by 
  // checking the half and full flags configured in ADCDMA_config.

	uint16_t *samples_buffer = NULL;
	if (DMA_GetFlagStatus(DMA2_Stream0, DMA_FLAG_HTIF0)) {
 80a05e4:	497c      	ldr	r1, [pc, #496]	; (80a07d8 <loop+0x1f8>)
 80a05e6:	487d      	ldr	r0, [pc, #500]	; (80a07dc <loop+0x1fc>)
void loop() {
 80a05e8:	b087      	sub	sp, #28
	if (DMA_GetFlagStatus(DMA2_Stream0, DMA_FLAG_HTIF0)) {
 80a05ea:	f7ff fe65 	bl	80a02b8 <DMA_GetFlagStatus>
 80a05ee:	4604      	mov	r4, r0
 80a05f0:	b120      	cbz	r0, 80a05fc <loop+0x1c>
	  DMA_ClearFlag(DMA2_Stream0, DMA_FLAG_HTIF0);
 80a05f2:	4979      	ldr	r1, [pc, #484]	; (80a07d8 <loop+0x1f8>)
 80a05f4:	4879      	ldr	r0, [pc, #484]	; (80a07dc <loop+0x1fc>)
 80a05f6:	f7ff fe7b 	bl	80a02f0 <DMA_ClearFlag>
	  samples_buffer = samples;
 80a05fa:	4c79      	ldr	r4, [pc, #484]	; (80a07e0 <loop+0x200>)
	}
	if (DMA_GetFlagStatus(DMA2_Stream0, DMA_FLAG_TCIF0)) {
 80a05fc:	4979      	ldr	r1, [pc, #484]	; (80a07e4 <loop+0x204>)
 80a05fe:	4877      	ldr	r0, [pc, #476]	; (80a07dc <loop+0x1fc>)
 80a0600:	f7ff fe5a 	bl	80a02b8 <DMA_GetFlagStatus>
 80a0604:	2800      	cmp	r0, #0
 80a0606:	f000 80a7 	beq.w	80a0758 <loop+0x178>
	  DMA_ClearFlag(DMA2_Stream0, DMA_FLAG_TCIF0);
 80a060a:	4976      	ldr	r1, [pc, #472]	; (80a07e4 <loop+0x204>)
 80a060c:	4873      	ldr	r0, [pc, #460]	; (80a07dc <loop+0x1fc>)
 80a060e:	f7ff fe6f 	bl	80a02f0 <DMA_ClearFlag>
	  samples_buffer = &samples[SAMPLE_BUF_SIZE/2];
 80a0612:	4c75      	ldr	r4, [pc, #468]	; (80a07e8 <loop+0x208>)
	}


  if (samples_buffer != NULL) {
    fft_window_data_real.push_back(decimator(FILTER_LENGTH, samples_buffer, FILTER_COEFFS));
 80a0614:	4a75      	ldr	r2, [pc, #468]	; (80a07ec <loop+0x20c>)
 80a0616:	4621      	mov	r1, r4
 80a0618:	f44f 7000 	mov.w	r0, #512	; 0x200
 80a061c:	f7ff ff02 	bl	80a0424 <_Z9decimatoriPtPd>
 80a0620:	4602      	mov	r2, r0
 80a0622:	460b      	mov	r3, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80a0624:	4d72      	ldr	r5, [pc, #456]	; (80a07f0 <loop+0x210>)
 80a0626:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80a062a:	e9d5 1001 	ldrd	r1, r0, [r5, #4]
 80a062e:	4281      	cmp	r1, r0
 80a0630:	f000 8098 	beq.w	80a0764 <loop+0x184>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80a0634:	b109      	cbz	r1, 80a063a <loop+0x5a>
 80a0636:	e9c1 2300 	strd	r2, r3, [r1]
	    ++this->_M_impl._M_finish;
 80a063a:	686b      	ldr	r3, [r5, #4]
 80a063c:	3308      	adds	r3, #8
 80a063e:	606b      	str	r3, [r5, #4]
 80a0640:	e9d5 2600 	ldrd	r2, r6, [r5]
 80a0644:	1ab6      	subs	r6, r6, r2

    if (fft_window_data_real.size() == fft_window_data_size) {
 80a0646:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80a064a:	f040 8088 	bne.w	80a075e <loop+0x17e>
			 - this->_M_impl._M_start); }
 80a064e:	4c69      	ldr	r4, [pc, #420]	; (80a07f4 <loop+0x214>)
 80a0650:	6820      	ldr	r0, [r4, #0]
 80a0652:	68a3      	ldr	r3, [r4, #8]
 80a0654:	1a1b      	subs	r3, r3, r0
      if (__n > capacity())
 80a0656:	f5b3 7f7e 	cmp.w	r3, #1016	; 0x3f8
 80a065a:	f200 8088 	bhi.w	80a076e <loop+0x18e>
	: _M_start(), _M_finish(), _M_end_of_storage()
 80a065e:	f04f 0800 	mov.w	r8, #0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a0662:	4630      	mov	r0, r6
 80a0664:	e9cd 8802 	strd	r8, r8, [sp, #8]
 80a0668:	f8cd 8010 	str.w	r8, [sp, #16]
 80a066c:	f7ff fd15 	bl	80a009a <_Znwj>
 80a0670:	4607      	mov	r7, r0
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
	      const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
	*__first = __tmp;
 80a0672:	4632      	mov	r2, r6
 80a0674:	4641      	mov	r1, r8
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80a0676:	f500 6980 	add.w	r9, r0, #1024	; 0x400
 80a067a:	f003 fa27 	bl	80a3acc <memset>
	  _M_start = __x._M_start;
 80a067e:	6823      	ldr	r3, [r4, #0]
      }
 80a0680:	a802      	add	r0, sp, #8
	  _M_start = __x._M_start;
 80a0682:	9302      	str	r3, [sp, #8]
	  _M_finish = __x._M_finish;
 80a0684:	6863      	ldr	r3, [r4, #4]
 80a0686:	e9c4 7900 	strd	r7, r9, [r4]
 80a068a:	9303      	str	r3, [sp, #12]
	  _M_end_of_storage = __x._M_end_of_storage;
 80a068c:	68a3      	ldr	r3, [r4, #8]
 80a068e:	f8c4 9008 	str.w	r9, [r4, #8]
 80a0692:	9304      	str	r3, [sp, #16]
      }
 80a0694:	f7ff fef4 	bl	80a0480 <_ZNSt12_Vector_baseIdSaIdEED1Ev>
       // create fft instance.
      Fft fft;

      fft_window_data_imag.assign(fft_window_data_size, 0);
      fft_window_data_copy = fft_window_data_real;
 80a0698:	4955      	ldr	r1, [pc, #340]	; (80a07f0 <loop+0x210>)
 80a069a:	4857      	ldr	r0, [pc, #348]	; (80a07f8 <loop+0x218>)
 80a069c:	f7ff ff5c 	bl	80a0558 <_ZNSt6vectorIdSaIdEEaSERKS1_.isra.0>

      fft.transformRadix2(fft_window_data_real, fft_window_data_imag);
 80a06a0:	4a54      	ldr	r2, [pc, #336]	; (80a07f4 <loop+0x214>)
 80a06a2:	4953      	ldr	r1, [pc, #332]	; (80a07f0 <loop+0x210>)
 80a06a4:	a802      	add	r0, sp, #8
 80a06a6:	f000 f937 	bl	80a0918 <_ZN3Fft15transformRadix2ERSt6vectorIdSaIdEES3_>
      // in absolute magnitudes, we would take the square root then multiply by two - to account for the symmetry - 
      // and multiply by 1/sqrt(fft_window_data_size) - to account for the number of samples in the spectrum.

      // We then find the index of the maximum peak in the spectrum and mutiply it with the BIN_SIZE.

      for (size_t i = BINS_TO_BE_CUT_OFF; i < fft_window_data_size/2; i++) {
 80a06aa:	f8d4 8000 	ldr.w	r8, [r4]
 80a06ae:	2401      	movs	r4, #1
 80a06b0:	f8d5 9000 	ldr.w	r9, [r5]
        current_value_of_single_sided_spectrum = fft_window_data_real[i]*fft_window_data_real[i]+fft_window_data_imag[i]*fft_window_data_imag[i];
 80a06b4:	f8df b144 	ldr.w	fp, [pc, #324]	; 80a07fc <loop+0x21c>
 80a06b8:	4d51      	ldr	r5, [pc, #324]	; (80a0800 <loop+0x220>)
          largest_peak = current_value_of_single_sided_spectrum;
          respiration_frequency = BIN_SIZE*i;
        } else {
          if (current_value_of_single_sided_spectrum > largest_peak) {
            largest_peak = current_value_of_single_sided_spectrum;
            respiration_frequency = BIN_SIZE*i;
 80a06ba:	f8df a148 	ldr.w	sl, [pc, #328]	; 80a0804 <loop+0x224>
        current_value_of_single_sided_spectrum = fft_window_data_real[i]*fft_window_data_real[i]+fft_window_data_imag[i]*fft_window_data_imag[i];
 80a06be:	e9f9 2302 	ldrd	r2, r3, [r9, #8]!
 80a06c2:	4610      	mov	r0, r2
 80a06c4:	e9f8 6702 	ldrd	r6, r7, [r8, #8]!
 80a06c8:	4619      	mov	r1, r3
 80a06ca:	f002 ff0f 	bl	80a34ec <__aeabi_dmul>
 80a06ce:	4632      	mov	r2, r6
 80a06d0:	463b      	mov	r3, r7
 80a06d2:	e9cd 0100 	strd	r0, r1, [sp]
 80a06d6:	4630      	mov	r0, r6
 80a06d8:	4639      	mov	r1, r7
 80a06da:	f002 ff07 	bl	80a34ec <__aeabi_dmul>
 80a06de:	4602      	mov	r2, r0
 80a06e0:	460b      	mov	r3, r1
 80a06e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a06e6:	f002 fd4b 	bl	80a3180 <__adddf3>
 80a06ea:	4606      	mov	r6, r0
 80a06ec:	460f      	mov	r7, r1
        if (i == BINS_TO_BE_CUT_OFF) {
 80a06ee:	2c01      	cmp	r4, #1
        current_value_of_single_sided_spectrum = fft_window_data_real[i]*fft_window_data_real[i]+fft_window_data_imag[i]*fft_window_data_imag[i];
 80a06f0:	e9cb 6700 	strd	r6, r7, [fp]
        if (i == BINS_TO_BE_CUT_OFF) {
 80a06f4:	d15e      	bne.n	80a07b4 <loop+0x1d4>
          respiration_frequency = BIN_SIZE*i;
 80a06f6:	2200      	movs	r2, #0
 80a06f8:	2300      	movs	r3, #0
          largest_peak = current_value_of_single_sided_spectrum;
 80a06fa:	e9c5 6700 	strd	r6, r7, [r5]
          respiration_frequency = BIN_SIZE*i;
 80a06fe:	e9ca 2300 	strd	r2, r3, [sl]
      for (size_t i = BINS_TO_BE_CUT_OFF; i < fft_window_data_size/2; i++) {
 80a0702:	3401      	adds	r4, #1
 80a0704:	2c40      	cmp	r4, #64	; 0x40
 80a0706:	d1da      	bne.n	80a06be <loop+0xde>
          }
        }
      }

      respiration_rate_per_minute = respiration_frequency*60;
 80a0708:	493e      	ldr	r1, [pc, #248]	; (80a0804 <loop+0x224>)
 80a070a:	2200      	movs	r2, #0
 80a070c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a0710:	4b3d      	ldr	r3, [pc, #244]	; (80a0808 <loop+0x228>)
 80a0712:	f002 feeb 	bl	80a34ec <__aeabi_dmul>
 80a0716:	4c3d      	ldr	r4, [pc, #244]	; (80a080c <loop+0x22c>)
      : _M_current(__i) { }
 80a0718:	4d37      	ldr	r5, [pc, #220]	; (80a07f8 <loop+0x218>)
 80a071a:	e9c4 0100 	strd	r0, r1, [r4]
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
 80a071e:	2300      	movs	r3, #0
 80a0720:	2209      	movs	r2, #9
 80a0722:	4621      	mov	r1, r4
 80a0724:	483a      	ldr	r0, [pc, #232]	; (80a0810 <loop+0x230>)
 80a0726:	f000 fc5b 	bl	80a0fe0 <spark_variable>
 80a072a:	682b      	ldr	r3, [r5, #0]
 80a072c:	686a      	ldr	r2, [r5, #4]
      { return __normal_iterator(_M_current + __n); }
 80a072e:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
	  if (__last != end())
 80a0732:	4294      	cmp	r4, r2
 80a0734:	d005      	beq.n	80a0742 <loop+0x162>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80a0736:	4618      	mov	r0, r3
 80a0738:	4621      	mov	r1, r4
 80a073a:	1b12      	subs	r2, r2, r4
 80a073c:	f003 f9ac 	bl	80a3a98 <memmove>
 80a0740:	4603      	mov	r3, r0
      : _M_current(__i) { }
 80a0742:	686a      	ldr	r2, [r5, #4]

      Particle.variable("respiration", respiration_rate_per_minute);

      // Re-assign the time-domain data after the FFT and remove the earliest data for the overlap.
      fft_window_data_copy.erase(fft_window_data_copy.begin(), fft_window_data_copy.begin() + fft_overlap_window_data_size);
      fft_window_data_real = fft_window_data_copy;
 80a0744:	492c      	ldr	r1, [pc, #176]	; (80a07f8 <loop+0x218>)
    { return __lhs.base() - __rhs.base(); }
 80a0746:	1b14      	subs	r4, r2, r4
	  _M_erase_at_end(__first.base() + (end() - __last));
 80a0748:	4423      	add	r3, r4
      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 80a074a:	429a      	cmp	r2, r3
 80a074c:	4828      	ldr	r0, [pc, #160]	; (80a07f0 <loop+0x210>)
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    this->_M_impl._M_finish = __pos;
 80a074e:	bf18      	it	ne
 80a0750:	606b      	strne	r3, [r5, #4]
 80a0752:	f7ff ff01 	bl	80a0558 <_ZNSt6vectorIdSaIdEEaSERKS1_.isra.0>
    }
  }
 80a0756:	e002      	b.n	80a075e <loop+0x17e>
  if (samples_buffer != NULL) {
 80a0758:	2c00      	cmp	r4, #0
 80a075a:	f47f af5b 	bne.w	80a0614 <loop+0x34>
 80a075e:	b007      	add	sp, #28
 80a0760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 80a0764:	4628      	mov	r0, r5
 80a0766:	aa02      	add	r2, sp, #8
 80a0768:	f7ff fe94 	bl	80a0494 <_ZNSt6vectorIdSaIdEE17_M_realloc_insertIJdEEEvN9__gnu_cxx17__normal_iteratorIPdS1_EEDpOT_>
 80a076c:	e768      	b.n	80a0640 <loop+0x60>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80a076e:	6862      	ldr	r2, [r4, #4]
 80a0770:	1a12      	subs	r2, r2, r0
      else if (__n > size())
 80a0772:	f5b2 7f7e 	cmp.w	r2, #1016	; 0x3f8
 80a0776:	d812      	bhi.n	80a079e <loop+0x1be>
	*__first = __tmp;
 80a0778:	2100      	movs	r1, #0
 80a077a:	f003 f9a7 	bl	80a3acc <memset>
 80a077e:	e9d4 2000 	ldrd	r2, r0, [r4]
 80a0782:	1a82      	subs	r2, r0, r2
 80a0784:	10d2      	asrs	r2, r2, #3
	       std::random_access_iterator_tag)
    {
#if __cplusplus >= 201103L
      static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
#endif
      if (__n <= 0)
 80a0786:	f1d2 0280 	rsbs	r2, r2, #128	; 0x80
 80a078a:	d006      	beq.n	80a079a <loop+0x1ba>
	return __first;

      __glibcxx_requires_can_increment(__first, __n);

      std::__fill_a(__first, __first + __n, __value);
 80a078c:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
	*__first = __tmp;
 80a0790:	2100      	movs	r1, #0
 80a0792:	00d2      	lsls	r2, r2, #3
 80a0794:	f003 f99a 	bl	80a3acc <memset>
 80a0798:	4630      	mov	r0, r6
	  this->_M_impl._M_finish =
 80a079a:	6060      	str	r0, [r4, #4]
 80a079c:	e77c      	b.n	80a0698 <loop+0xb8>
 80a079e:	4632      	mov	r2, r6
 80a07a0:	2100      	movs	r1, #0
      std::__fill_a(__first, __first + __n, __value);
 80a07a2:	f500 6780 	add.w	r7, r0, #1024	; 0x400
	*__first = __tmp;
 80a07a6:	f003 f991 	bl	80a3acc <memset>
	if (size_type __n = this->_M_impl._M_finish - __pos)
 80a07aa:	6863      	ldr	r3, [r4, #4]
 80a07ac:	42bb      	cmp	r3, r7
	    this->_M_impl._M_finish = __pos;
 80a07ae:	bf18      	it	ne
 80a07b0:	6067      	strne	r7, [r4, #4]
 80a07b2:	e771      	b.n	80a0698 <loop+0xb8>
          if (current_value_of_single_sided_spectrum > largest_peak) {
 80a07b4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80a07b8:	f003 f928 	bl	80a3a0c <__aeabi_dcmpgt>
 80a07bc:	2800      	cmp	r0, #0
 80a07be:	d0a0      	beq.n	80a0702 <loop+0x122>
            respiration_frequency = BIN_SIZE*i;
 80a07c0:	4620      	mov	r0, r4
            largest_peak = current_value_of_single_sided_spectrum;
 80a07c2:	e9c5 6700 	strd	r6, r7, [r5]
            respiration_frequency = BIN_SIZE*i;
 80a07c6:	f002 fe17 	bl	80a33f8 <__aeabi_ui2d>
 80a07ca:	2200      	movs	r2, #0
 80a07cc:	2300      	movs	r3, #0
 80a07ce:	f002 fe8d 	bl	80a34ec <__aeabi_dmul>
 80a07d2:	e9ca 0100 	strd	r0, r1, [sl]
 80a07d6:	e794      	b.n	80a0702 <loop+0x122>
 80a07d8:	10000010 	.word	0x10000010
 80a07dc:	40026410 	.word	0x40026410
 80a07e0:	200010b8 	.word	0x200010b8
 80a07e4:	10000020 	.word	0x10000020
 80a07e8:	200018b8 	.word	0x200018b8
 80a07ec:	20000000 	.word	0x20000000
 80a07f0:	20001098 	.word	0x20001098
 80a07f4:	2000108c 	.word	0x2000108c
 80a07f8:	20001080 	.word	0x20001080
 80a07fc:	20001078 	.word	0x20001078
 80a0800:	200010a8 	.word	0x200010a8
 80a0804:	200010b0 	.word	0x200010b0
 80a0808:	404e0000 	.word	0x404e0000
 80a080c:	20001000 	.word	0x20001000
 80a0810:	080a3c7e 	.word	0x080a3c7e

080a0814 <_GLOBAL__sub_I_FILTER_COEFFS>:
	: _M_start(), _M_finish(), _M_end_of_storage()
 80a0814:	2300      	movs	r3, #0
 80a0816:	4a06      	ldr	r2, [pc, #24]	; (80a0830 <_GLOBAL__sub_I_FILTER_COEFFS+0x1c>)
 80a0818:	e9c2 3300 	strd	r3, r3, [r2]
 80a081c:	6093      	str	r3, [r2, #8]
 80a081e:	4a05      	ldr	r2, [pc, #20]	; (80a0834 <_GLOBAL__sub_I_FILTER_COEFFS+0x20>)
 80a0820:	e9c2 3300 	strd	r3, r3, [r2]
 80a0824:	6093      	str	r3, [r2, #8]
 80a0826:	4a04      	ldr	r2, [pc, #16]	; (80a0838 <_GLOBAL__sub_I_FILTER_COEFFS+0x24>)
 80a0828:	e9c2 3300 	strd	r3, r3, [r2]
 80a082c:	6093      	str	r3, [r2, #8]
 80a082e:	4770      	bx	lr
 80a0830:	20001098 	.word	0x20001098
 80a0834:	2000108c 	.word	0x2000108c
 80a0838:	20001080 	.word	0x20001080

080a083c <setup>:
void setup() {
 80a083c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  Serial.begin(9600);
 80a083e:	f001 f8cb 	bl	80a19d8 <_Z16_fetch_usbserialv>
 80a0842:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a0846:	f001 f8ad 	bl	80a19a4 <_ZN9USBSerial5beginEl>
  ADCDMA_config adcDMA(SAMPLE_PIN, samples, SAMPLE_BUF_SIZE);
 80a084a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80a084e:	4a0b      	ldr	r2, [pc, #44]	; (80a087c <setup+0x40>)
 80a0850:	210a      	movs	r1, #10
 80a0852:	4668      	mov	r0, sp
 80a0854:	f000 f9d6 	bl	80a0c04 <_ZN13ADCDMA_configC1EiPtj>
	adcDMA.start(SAMPLE_RATE);
 80a0858:	4668      	mov	r0, sp
 80a085a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80a085e:	f000 f9db 	bl	80a0c18 <_ZN13ADCDMA_config5startEj>
 80a0862:	2300      	movs	r3, #0
 80a0864:	2209      	movs	r2, #9
 80a0866:	4906      	ldr	r1, [pc, #24]	; (80a0880 <setup+0x44>)
 80a0868:	4806      	ldr	r0, [pc, #24]	; (80a0884 <setup+0x48>)
 80a086a:	f000 fbb9 	bl	80a0fe0 <spark_variable>
  ADCDMA_config adcDMA(SAMPLE_PIN, samples, SAMPLE_BUF_SIZE);
 80a086e:	4668      	mov	r0, sp
 80a0870:	f000 f9c0 	bl	80a0bf4 <_ZN13ADCDMA_configD1Ev>
}
 80a0874:	b005      	add	sp, #20
 80a0876:	f85d fb04 	ldr.w	pc, [sp], #4
 80a087a:	bf00      	nop
 80a087c:	200010b8 	.word	0x200010b8
 80a0880:	20001000 	.word	0x20001000
 80a0884:	080a3c7e 	.word	0x080a3c7e

080a0888 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a0888:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a088a:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 80a088c:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 80a088e:	b17c      	cbz	r4, 80a08b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 80a0890:	6863      	ldr	r3, [r4, #4]
 80a0892:	3b01      	subs	r3, #1
 80a0894:	6063      	str	r3, [r4, #4]
 80a0896:	b95b      	cbnz	r3, 80a08b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 80a0898:	6823      	ldr	r3, [r4, #0]
 80a089a:	4620      	mov	r0, r4
 80a089c:	689b      	ldr	r3, [r3, #8]
 80a089e:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a08a0:	68a3      	ldr	r3, [r4, #8]
 80a08a2:	3b01      	subs	r3, #1
 80a08a4:	60a3      	str	r3, [r4, #8]
 80a08a6:	b91b      	cbnz	r3, 80a08b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a08a8:	6823      	ldr	r3, [r4, #0]
 80a08aa:	4620      	mov	r0, r4
 80a08ac:	68db      	ldr	r3, [r3, #12]
 80a08ae:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 80a08b0:	4628      	mov	r0, r5
 80a08b2:	bd38      	pop	{r3, r4, r5, pc}

080a08b4 <_ZNSt12_Vector_baseIdSaIdEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 80a08b4:	b538      	push	{r3, r4, r5, lr}
 80a08b6:	4604      	mov	r4, r0
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80a08b8:	1e08      	subs	r0, r1, #0
 80a08ba:	ea4f 05c0 	mov.w	r5, r0, lsl #3
 80a08be:	d007      	beq.n	80a08d0 <_ZNSt12_Vector_baseIdSaIdEE17_M_create_storageEj+0x1c>
	if (__n > this->_M_max_size())
 80a08c0:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 80a08c4:	d301      	bcc.n	80a08ca <_ZNSt12_Vector_baseIdSaIdEE17_M_create_storageEj+0x16>
	  std::__throw_bad_alloc();
 80a08c6:	f001 fa61 	bl	80a1d8c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a08ca:	4628      	mov	r0, r5
 80a08cc:	f7ff fbe5 	bl	80a009a <_Znwj>
	this->_M_impl._M_finish = this->_M_impl._M_start;
 80a08d0:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80a08d4:	4428      	add	r0, r5
 80a08d6:	60a0      	str	r0, [r4, #8]
      }
 80a08d8:	bd38      	pop	{r3, r4, r5, pc}
	...

080a08dc <_ZNSt6vectorIdSaIdEEC1EjRKS0_>:
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 80a08dc:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
      vector(size_type __n, const allocator_type& __a = allocator_type())
 80a08e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a08e2:	4604      	mov	r4, r0
 80a08e4:	460d      	mov	r5, r1
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 80a08e6:	d302      	bcc.n	80a08ee <_ZNSt6vectorIdSaIdEEC1EjRKS0_+0x12>
	  __throw_length_error(
 80a08e8:	480a      	ldr	r0, [pc, #40]	; (80a0914 <_ZNSt6vectorIdSaIdEEC1EjRKS0_+0x38>)
 80a08ea:	f001 fa52 	bl	80a1d92 <_ZSt20__throw_length_errorPKc>
	: _M_start(), _M_finish(), _M_end_of_storage()
 80a08ee:	2600      	movs	r6, #0
 80a08f0:	e9c0 6600 	strd	r6, r6, [r0]
 80a08f4:	6086      	str	r6, [r0, #8]
      { _M_create_storage(__n); }
 80a08f6:	f7ff ffdd 	bl	80a08b4 <_ZNSt12_Vector_baseIdSaIdEE17_M_create_storageEj>
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
 80a08fa:	6820      	ldr	r0, [r4, #0]
      if (__n <= 0)
 80a08fc:	b135      	cbz	r5, 80a090c <_ZNSt6vectorIdSaIdEEC1EjRKS0_+0x30>
      std::__fill_a(__first, __first + __n, __value);
 80a08fe:	eb00 07c5 	add.w	r7, r0, r5, lsl #3
	*__first = __tmp;
 80a0902:	4631      	mov	r1, r6
 80a0904:	00ea      	lsls	r2, r5, #3
 80a0906:	f003 f8e1 	bl	80a3acc <memset>
 80a090a:	4638      	mov	r0, r7
	this->_M_impl._M_finish =
 80a090c:	6060      	str	r0, [r4, #4]
      { _M_default_initialize(__n); }
 80a090e:	4620      	mov	r0, r4
 80a0910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a0912:	bf00      	nop
 80a0914:	080a3c8a 	.word	0x080a3c8a

080a0918 <_ZN3Fft15transformRadix2ERSt6vectorIdSaIdEES3_>:
void Fft::inverseTransform(vector<double> &real, vector<double> &imag) {
	transform(imag, real);
}


void Fft::transformRadix2(vector<double> &real, vector<double> &imag) {
 80a0918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a091c:	4615      	mov	r5, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80a091e:	e9d1 2300 	ldrd	r2, r3, [r1]
 80a0922:	468b      	mov	fp, r1
 80a0924:	1a9a      	subs	r2, r3, r2
 80a0926:	e9d5 1300 	ldrd	r1, r3, [r5]
 80a092a:	1a5b      	subs	r3, r3, r1
	// Compute levels = floor(log2(n))
	if (real.size() != imag.size())
 80a092c:	429a      	cmp	r2, r3
void Fft::transformRadix2(vector<double> &real, vector<double> &imag) {
 80a092e:	b09d      	sub	sp, #116	; 0x74
	if (real.size() != imag.size())
 80a0930:	d00c      	beq.n	80a094c <_ZN3Fft15transformRadix2ERSt6vectorIdSaIdEES3_+0x34>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 80a0932:	4ba9      	ldr	r3, [pc, #676]	; (80a0bd8 <_ZN3Fft15transformRadix2ERSt6vectorIdSaIdEES3_+0x2c0>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a0934:	a819      	add	r0, sp, #100	; 0x64
 80a0936:	781b      	ldrb	r3, [r3, #0]
 80a0938:	4aa8      	ldr	r2, [pc, #672]	; (80a0bdc <_ZN3Fft15transformRadix2ERSt6vectorIdSaIdEES3_+0x2c4>)
 80a093a:	f88d 3000 	strb.w	r3, [sp]
 80a093e:	49a8      	ldr	r1, [pc, #672]	; (80a0be0 <_ZN3Fft15transformRadix2ERSt6vectorIdSaIdEES3_+0x2c8>)
 80a0940:	233c      	movs	r3, #60	; 0x3c
 80a0942:	f000 fe09 	bl	80a1558 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0946:	a81a      	add	r0, sp, #104	; 0x68
 80a0948:	f7ff ff9e 	bl	80a0888 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a094c:	e9db 2300 	ldrd	r2, r3, [fp]
 80a0950:	1a9b      	subs	r3, r3, r2
 80a0952:	ea4f 0ae3 	mov.w	sl, r3, asr #3
		Spark.publish("err","Mismatched lengths",60,PRIVATE);
	size_t n = real.size();
	unsigned int levels;
	{
		size_t temp = n;
		levels = 0;
 80a0956:	2200      	movs	r2, #0
 80a0958:	4653      	mov	r3, sl
 80a095a:	9203      	str	r2, [sp, #12]
		while (temp > 1) {
 80a095c:	2b01      	cmp	r3, #1
 80a095e:	d904      	bls.n	80a096a <_ZN3Fft15transformRadix2ERSt6vectorIdSaIdEES3_+0x52>
			levels++;
 80a0960:	9a03      	ldr	r2, [sp, #12]
			temp >>= 1;
 80a0962:	085b      	lsrs	r3, r3, #1
			levels++;
 80a0964:	3201      	adds	r2, #1
 80a0966:	9203      	str	r2, [sp, #12]
		while (temp > 1) {
 80a0968:	e7f8      	b.n	80a095c <_ZN3Fft15transformRadix2ERSt6vectorIdSaIdEES3_+0x44>
		}
		if (1u << levels != n)
 80a096a:	2301      	movs	r3, #1
 80a096c:	9a03      	ldr	r2, [sp, #12]
 80a096e:	4093      	lsls	r3, r2
 80a0970:	4553      	cmp	r3, sl
 80a0972:	d00c      	beq.n	80a098e <_ZN3Fft15transformRadix2ERSt6vectorIdSaIdEES3_+0x76>
 80a0974:	4b98      	ldr	r3, [pc, #608]	; (80a0bd8 <_ZN3Fft15transformRadix2ERSt6vectorIdSaIdEES3_+0x2c0>)
 80a0976:	a819      	add	r0, sp, #100	; 0x64
 80a0978:	781b      	ldrb	r3, [r3, #0]
 80a097a:	4a9a      	ldr	r2, [pc, #616]	; (80a0be4 <_ZN3Fft15transformRadix2ERSt6vectorIdSaIdEES3_+0x2cc>)
 80a097c:	f88d 3000 	strb.w	r3, [sp]
 80a0980:	4997      	ldr	r1, [pc, #604]	; (80a0be0 <_ZN3Fft15transformRadix2ERSt6vectorIdSaIdEES3_+0x2c8>)
 80a0982:	233c      	movs	r3, #60	; 0x3c
 80a0984:	f000 fde8 	bl	80a1558 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a0988:	a81a      	add	r0, sp, #104	; 0x68
 80a098a:	f7ff ff7d 	bl	80a0888 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
			Spark.publish("err","Length is not a power of 2",60,PRIVATE);
	}
	
	// Trignometric tables
	vector<double> cosTable(n / 2);
 80a098e:	ea4f 065a 	mov.w	r6, sl, lsr #1
 80a0992:	4631      	mov	r1, r6
 80a0994:	aa19      	add	r2, sp, #100	; 0x64
 80a0996:	a816      	add	r0, sp, #88	; 0x58
 80a0998:	f7ff ffa0 	bl	80a08dc <_ZNSt6vectorIdSaIdEEC1EjRKS0_>
	vector<double> sinTable(n / 2);
 80a099c:	4631      	mov	r1, r6
 80a099e:	aa15      	add	r2, sp, #84	; 0x54
 80a09a0:	a819      	add	r0, sp, #100	; 0x64
 80a09a2:	f7ff ff9b 	bl	80a08dc <_ZNSt6vectorIdSaIdEEC1EjRKS0_>
	for (size_t i = 0; i < n / 2; i++) {
 80a09a6:	2400      	movs	r4, #0
 80a09a8:	42a6      	cmp	r6, r4
 80a09aa:	d025      	beq.n	80a09f8 <_ZN3Fft15transformRadix2ERSt6vectorIdSaIdEES3_+0xe0>
		cosTable[i] = cos(2 * M_PI * i / n);
 80a09ac:	4620      	mov	r0, r4
 80a09ae:	f002 fd23 	bl	80a33f8 <__aeabi_ui2d>
 80a09b2:	a387      	add	r3, pc, #540	; (adr r3, 80a0bd0 <_ZN3Fft15transformRadix2ERSt6vectorIdSaIdEES3_+0x2b8>)
 80a09b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a09b8:	f002 fd98 	bl	80a34ec <__aeabi_dmul>
 80a09bc:	4680      	mov	r8, r0
 80a09be:	4650      	mov	r0, sl
 80a09c0:	4689      	mov	r9, r1
 80a09c2:	f002 fd19 	bl	80a33f8 <__aeabi_ui2d>
 80a09c6:	4602      	mov	r2, r0
 80a09c8:	460b      	mov	r3, r1
 80a09ca:	4640      	mov	r0, r8
 80a09cc:	4649      	mov	r1, r9
 80a09ce:	f002 feb7 	bl	80a3740 <__aeabi_ddiv>
 80a09d2:	4680      	mov	r8, r0
 80a09d4:	4689      	mov	r9, r1
 80a09d6:	f001 f9e3 	bl	80a1da0 <cos>
 80a09da:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80a09dc:	00e7      	lsls	r7, r4, #3
 80a09de:	443b      	add	r3, r7
 80a09e0:	e9c3 0100 	strd	r0, r1, [r3]
		sinTable[i] = sin(2 * M_PI * i / n);
 80a09e4:	4640      	mov	r0, r8
 80a09e6:	4649      	mov	r1, r9
 80a09e8:	f001 fa2c 	bl	80a1e44 <sin>
 80a09ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
	for (size_t i = 0; i < n / 2; i++) {
 80a09ee:	3401      	adds	r4, #1
		sinTable[i] = sin(2 * M_PI * i / n);
 80a09f0:	443b      	add	r3, r7
 80a09f2:	e9c3 0100 	strd	r0, r1, [r3]
	for (size_t i = 0; i < n / 2; i++) {
 80a09f6:	e7d7      	b.n	80a09a8 <_ZN3Fft15transformRadix2ERSt6vectorIdSaIdEES3_+0x90>
	}
	
	// Bit-reversed addressing permutation
	for (size_t i = 0; i < n; i++) {
 80a09f8:	2400      	movs	r4, #0
 80a09fa:	4554      	cmp	r4, sl
 80a09fc:	d032      	beq.n	80a0a64 <_ZN3Fft15transformRadix2ERSt6vectorIdSaIdEES3_+0x14c>


static size_t reverseBits(size_t x, unsigned int n) {
	size_t result = 0;
	unsigned int i;
	for (i = 0; i < n; i++, x >>= 1)
 80a09fe:	2300      	movs	r3, #0
 80a0a00:	4622      	mov	r2, r4
	size_t result = 0;
 80a0a02:	461e      	mov	r6, r3
	for (i = 0; i < n; i++, x >>= 1)
 80a0a04:	9903      	ldr	r1, [sp, #12]
 80a0a06:	4299      	cmp	r1, r3
 80a0a08:	d006      	beq.n	80a0a18 <_ZN3Fft15transformRadix2ERSt6vectorIdSaIdEES3_+0x100>
		result = (result << 1) | (x & 1);
 80a0a0a:	f002 0101 	and.w	r1, r2, #1
 80a0a0e:	ea41 0646 	orr.w	r6, r1, r6, lsl #1
	for (i = 0; i < n; i++, x >>= 1)
 80a0a12:	3301      	adds	r3, #1
 80a0a14:	0852      	lsrs	r2, r2, #1
 80a0a16:	e7f5      	b.n	80a0a04 <_ZN3Fft15transformRadix2ERSt6vectorIdSaIdEES3_+0xec>
		if (j > i) {
 80a0a18:	42b4      	cmp	r4, r6
 80a0a1a:	d221      	bcs.n	80a0a60 <_ZN3Fft15transformRadix2ERSt6vectorIdSaIdEES3_+0x148>
	return *(this->_M_impl._M_start + __n);
 80a0a1c:	f8db 3000 	ldr.w	r3, [fp]
 80a0a20:	eb03 07c4 	add.w	r7, r3, r4, lsl #3
			real[i] = real[j];
 80a0a24:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
			double temp = real[i];
 80a0a28:	e9d7 0100 	ldrd	r0, r1, [r7]
			real[i] = real[j];
 80a0a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0a30:	e9c7 2300 	strd	r2, r3, [r7]
			real[j] = temp;
 80a0a34:	f8db 3000 	ldr.w	r3, [fp]
 80a0a38:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80a0a3c:	e9c3 0100 	strd	r0, r1, [r3]
 80a0a40:	6829      	ldr	r1, [r5, #0]
 80a0a42:	eb01 07c4 	add.w	r7, r1, r4, lsl #3
			imag[i] = imag[j];
 80a0a46:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80a0a4a:	e9d1 0100 	ldrd	r0, r1, [r1]
			temp = imag[i];
 80a0a4e:	e9d7 2300 	ldrd	r2, r3, [r7]
			imag[i] = imag[j];
 80a0a52:	e9c7 0100 	strd	r0, r1, [r7]
			imag[j] = temp;
 80a0a56:	6829      	ldr	r1, [r5, #0]
 80a0a58:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80a0a5c:	e9c1 2300 	strd	r2, r3, [r1]
	for (size_t i = 0; i < n; i++) {
 80a0a60:	3401      	adds	r4, #1
 80a0a62:	e7ca      	b.n	80a09fa <_ZN3Fft15transformRadix2ERSt6vectorIdSaIdEES3_+0xe2>
	for (size_t size = 2; size <= n; size *= 2) {
 80a0a64:	2602      	movs	r6, #2
 80a0a66:	4556      	cmp	r6, sl
 80a0a68:	f200 80a7 	bhi.w	80a0bba <_ZN3Fft15transformRadix2ERSt6vectorIdSaIdEES3_+0x2a2>
		size_t halfsize = size / 2;
 80a0a6c:	0873      	lsrs	r3, r6, #1
 80a0a6e:	9310      	str	r3, [sp, #64]	; 0x40
		size_t tablestep = n / size;
 80a0a70:	fbba f3f6 	udiv	r3, sl, r6
 80a0a74:	00db      	lsls	r3, r3, #3
 80a0a76:	9312      	str	r3, [sp, #72]	; 0x48
 80a0a78:	00b3      	lsls	r3, r6, #2
 80a0a7a:	9311      	str	r3, [sp, #68]	; 0x44
		for (size_t i = 0; i < n; i += size) {
 80a0a7c:	2300      	movs	r3, #0
 80a0a7e:	9303      	str	r3, [sp, #12]
 80a0a80:	9b03      	ldr	r3, [sp, #12]
 80a0a82:	4553      	cmp	r3, sl
 80a0a84:	f080 8095 	bcs.w	80a0bb2 <_ZN3Fft15transformRadix2ERSt6vectorIdSaIdEES3_+0x29a>
 80a0a88:	9304      	str	r3, [sp, #16]
 80a0a8a:	2300      	movs	r3, #0
			for (size_t j = i, k = 0; j < i + halfsize; j++, k += tablestep) {
 80a0a8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80a0a8e:	9305      	str	r3, [sp, #20]
 80a0a90:	9b03      	ldr	r3, [sp, #12]
 80a0a92:	4413      	add	r3, r2
 80a0a94:	9313      	str	r3, [sp, #76]	; 0x4c
 80a0a96:	9b04      	ldr	r3, [sp, #16]
 80a0a98:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80a0a9a:	4293      	cmp	r3, r2
 80a0a9c:	f080 8086 	bcs.w	80a0bac <_ZN3Fft15transformRadix2ERSt6vectorIdSaIdEES3_+0x294>
 80a0aa0:	f8db 3000 	ldr.w	r3, [fp]
 80a0aa4:	9a04      	ldr	r2, [sp, #16]
 80a0aa6:	930c      	str	r3, [sp, #48]	; 0x30
 80a0aa8:	9b04      	ldr	r3, [sp, #16]
 80a0aaa:	00dc      	lsls	r4, r3, #3
 80a0aac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80a0aae:	eb03 09c2 	add.w	r9, r3, r2, lsl #3
 80a0ab2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
				double tpre =  real[j+halfsize] * cosTable[k] + imag[j+halfsize] * sinTable[k];
 80a0ab4:	9a05      	ldr	r2, [sp, #20]
 80a0ab6:	444b      	add	r3, r9
 80a0ab8:	930d      	str	r3, [sp, #52]	; 0x34
 80a0aba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a0abc:	f853 8009 	ldr.w	r8, [r3, r9]
 80a0ac0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80a0ac2:	4640      	mov	r0, r8
 80a0ac4:	685f      	ldr	r7, [r3, #4]
 80a0ac6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80a0ac8:	4639      	mov	r1, r7
 80a0aca:	4413      	add	r3, r2
 80a0acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0ad0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80a0ad4:	682b      	ldr	r3, [r5, #0]
 80a0ad6:	444b      	add	r3, r9
 80a0ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0adc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a0ae0:	9a05      	ldr	r2, [sp, #20]
 80a0ae2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80a0ae4:	4413      	add	r3, r2
 80a0ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0aea:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80a0aee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a0af2:	f002 fcfb 	bl	80a34ec <__aeabi_dmul>
 80a0af6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80a0afa:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80a0afe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80a0b02:	f002 fcf3 	bl	80a34ec <__aeabi_dmul>
 80a0b06:	4602      	mov	r2, r0
 80a0b08:	460b      	mov	r3, r1
 80a0b0a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80a0b0e:	f002 fb37 	bl	80a3180 <__adddf3>
				double tpim = -real[j+halfsize] * sinTable[k] + imag[j+halfsize] * cosTable[k];
 80a0b12:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
				double tpre =  real[j+halfsize] * cosTable[k] + imag[j+halfsize] * sinTable[k];
 80a0b16:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
				double tpim = -real[j+halfsize] * sinTable[k] + imag[j+halfsize] * cosTable[k];
 80a0b1a:	4640      	mov	r0, r8
 80a0b1c:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 80a0b20:	f002 fce4 	bl	80a34ec <__aeabi_dmul>
 80a0b24:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a0b28:	4607      	mov	r7, r0
 80a0b2a:	4688      	mov	r8, r1
 80a0b2c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a0b30:	f002 fcdc 	bl	80a34ec <__aeabi_dmul>
 80a0b34:	4602      	mov	r2, r0
 80a0b36:	460b      	mov	r3, r1
 80a0b38:	4638      	mov	r0, r7
 80a0b3a:	4641      	mov	r1, r8
 80a0b3c:	f002 fb20 	bl	80a3180 <__adddf3>
				real[j + halfsize] = real[j] - tpre;
 80a0b40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
				double tpim = -real[j+halfsize] * sinTable[k] + imag[j+halfsize] * cosTable[k];
 80a0b42:	4688      	mov	r8, r1
				real[j + halfsize] = real[j] - tpre;
 80a0b44:	1919      	adds	r1, r3, r4
				double tpim = -real[j+halfsize] * sinTable[k] + imag[j+halfsize] * cosTable[k];
 80a0b46:	4607      	mov	r7, r0
				real[j + halfsize] = real[j] - tpre;
 80a0b48:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80a0b4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a0b50:	f002 fb14 	bl	80a317c <__aeabi_dsub>
 80a0b54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
				imag[j + halfsize] = imag[j] - tpim;
 80a0b56:	463a      	mov	r2, r7
				real[j + halfsize] = real[j] - tpre;
 80a0b58:	e9c3 0100 	strd	r0, r1, [r3]
 80a0b5c:	6829      	ldr	r1, [r5, #0]
				imag[j + halfsize] = imag[j] - tpim;
 80a0b5e:	4643      	mov	r3, r8
 80a0b60:	4489      	add	r9, r1
 80a0b62:	4421      	add	r1, r4
 80a0b64:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a0b68:	f002 fb08 	bl	80a317c <__aeabi_dsub>
 80a0b6c:	e9c9 0100 	strd	r0, r1, [r9]
 80a0b70:	f8db 3000 	ldr.w	r3, [fp]
 80a0b74:	eb03 0904 	add.w	r9, r3, r4
				real[j] += tpre;
 80a0b78:	e9d9 0100 	ldrd	r0, r1, [r9]
 80a0b7c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80a0b80:	f002 fafe 	bl	80a3180 <__adddf3>
 80a0b84:	e9c9 0100 	strd	r0, r1, [r9]
 80a0b88:	682b      	ldr	r3, [r5, #0]
				imag[j] += tpim;
 80a0b8a:	463a      	mov	r2, r7
 80a0b8c:	441c      	add	r4, r3
 80a0b8e:	e9d4 0100 	ldrd	r0, r1, [r4]
 80a0b92:	4643      	mov	r3, r8
 80a0b94:	f002 faf4 	bl	80a3180 <__adddf3>
			for (size_t j = i, k = 0; j < i + halfsize; j++, k += tablestep) {
 80a0b98:	9b04      	ldr	r3, [sp, #16]
 80a0b9a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80a0b9c:	3301      	adds	r3, #1
 80a0b9e:	9304      	str	r3, [sp, #16]
 80a0ba0:	9b05      	ldr	r3, [sp, #20]
				imag[j] += tpim;
 80a0ba2:	e9c4 0100 	strd	r0, r1, [r4]
			for (size_t j = i, k = 0; j < i + halfsize; j++, k += tablestep) {
 80a0ba6:	4413      	add	r3, r2
 80a0ba8:	9305      	str	r3, [sp, #20]
 80a0baa:	e774      	b.n	80a0a96 <_ZN3Fft15transformRadix2ERSt6vectorIdSaIdEES3_+0x17e>
		for (size_t i = 0; i < n; i += size) {
 80a0bac:	9b03      	ldr	r3, [sp, #12]
 80a0bae:	4433      	add	r3, r6
 80a0bb0:	e765      	b.n	80a0a7e <_ZN3Fft15transformRadix2ERSt6vectorIdSaIdEES3_+0x166>
		if (size == n)  // Prevent overflow in 'size *= 2'
 80a0bb2:	4556      	cmp	r6, sl
 80a0bb4:	d001      	beq.n	80a0bba <_ZN3Fft15transformRadix2ERSt6vectorIdSaIdEES3_+0x2a2>
	for (size_t size = 2; size <= n; size *= 2) {
 80a0bb6:	0076      	lsls	r6, r6, #1
 80a0bb8:	e755      	b.n	80a0a66 <_ZN3Fft15transformRadix2ERSt6vectorIdSaIdEES3_+0x14e>
      }
 80a0bba:	a819      	add	r0, sp, #100	; 0x64
 80a0bbc:	f7ff fc60 	bl	80a0480 <_ZNSt12_Vector_baseIdSaIdEED1Ev>
 80a0bc0:	a816      	add	r0, sp, #88	; 0x58
 80a0bc2:	f7ff fc5d 	bl	80a0480 <_ZNSt12_Vector_baseIdSaIdEED1Ev>
}
 80a0bc6:	b01d      	add	sp, #116	; 0x74
 80a0bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0bcc:	f3af 8000 	nop.w
 80a0bd0:	54442d18 	.word	0x54442d18
 80a0bd4:	401921fb 	.word	0x401921fb
 80a0bd8:	200020b8 	.word	0x200020b8
 80a0bdc:	080a3cbb 	.word	0x080a3cbb
 80a0be0:	080a3cce 	.word	0x080a3cce
 80a0be4:	080a3cd2 	.word	0x080a3cd2

080a0be8 <_GLOBAL__sub_I__ZN3Fft9transformERSt6vectorIdSaIdEES3_>:
        val_(val) {
 80a0be8:	2201      	movs	r2, #1
 80a0bea:	4b01      	ldr	r3, [pc, #4]	; (80a0bf0 <_GLOBAL__sub_I__ZN3Fft9transformERSt6vectorIdSaIdEES3_+0x8>)
 80a0bec:	701a      	strb	r2, [r3, #0]
	return result;
}
 80a0bee:	4770      	bx	lr
 80a0bf0:	200020b8 	.word	0x200020b8

080a0bf4 <_ZN13ADCDMA_configD1Ev>:
ADCDMA_config::ADCDMA_config(int pin, uint16_t *buf, size_t bufSize) : pin(pin), buf(buf), bufSize(bufSize) {
}

//Class deconstrctor. Not used in this case.
ADCDMA_config::~ADCDMA_config() {
}
 80a0bf4:	4770      	bx	lr

080a0bf6 <_ZN13ADCDMA_configD0Ev>:
ADCDMA_config::~ADCDMA_config() {
 80a0bf6:	b510      	push	{r4, lr}
 80a0bf8:	4604      	mov	r4, r0
}
 80a0bfa:	2110      	movs	r1, #16
 80a0bfc:	f7ff fa51 	bl	80a00a2 <_ZdlPvj>
 80a0c00:	4620      	mov	r0, r4
 80a0c02:	bd10      	pop	{r4, pc}

080a0c04 <_ZN13ADCDMA_configC1EiPtj>:
ADCDMA_config::ADCDMA_config(int pin, uint16_t *buf, size_t bufSize) : pin(pin), buf(buf), bufSize(bufSize) {
 80a0c04:	b530      	push	{r4, r5, lr}
 80a0c06:	4d03      	ldr	r5, [pc, #12]	; (80a0c14 <_ZN13ADCDMA_configC1EiPtj+0x10>)
 80a0c08:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80a0c0c:	e9c0 5100 	strd	r5, r1, [r0]
}
 80a0c10:	bd30      	pop	{r4, r5, pc}
 80a0c12:	bf00      	nop
 80a0c14:	080a3cf8 	.word	0x080a3cf8

080a0c18 <_ZN13ADCDMA_config5startEj>:

void ADCDMA_config::start(size_t freqHZ) {
 80a0c18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a0c1c:	4606      	mov	r6, r0
 80a0c1e:	b09f      	sub	sp, #124	; 0x7c
 80a0c20:	460f      	mov	r7, r1
    // Using Dual ADC Regular Simultaneous DMA Mode 1

    // Using Timer3. To change timers, make sure you edit all of:
    // RCC_APB1Periph_TIM3, TIM3, ADC_ExternalTrigConv_T3_TRGO

    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);
 80a0c22:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80a0c26:	2101      	movs	r1, #1
 80a0c28:	f7ff fb7a 	bl	80a0320 <RCC_AHB1PeriphClockCmd>
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
 80a0c2c:	2101      	movs	r1, #1
 80a0c2e:	f44f 7080 	mov.w	r0, #256	; 0x100
 80a0c32:	f7ff fb8d 	bl	80a0350 <RCC_APB2PeriphClockCmd>
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC2, ENABLE);
 80a0c36:	2101      	movs	r1, #1
 80a0c38:	f44f 7000 	mov.w	r0, #512	; 0x200
 80a0c3c:	f7ff fb88 	bl	80a0350 <RCC_APB2PeriphClockCmd>
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 80a0c40:	2101      	movs	r1, #1
 80a0c42:	2002      	movs	r0, #2
 80a0c44:	f7ff fb78 	bl	80a0338 <RCC_APB1PeriphClockCmd>

    // Set the pin as analog input
    // GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
    // GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    HAL_Pin_Mode(pin, AN_INPUT);
 80a0c48:	2106      	movs	r1, #6
 80a0c4a:	88b0      	ldrh	r0, [r6, #4]

    // Enable the DMA Stream IRQ Channel
    NVIC_InitTypeDef NVIC_InitStructure;
    NVIC_InitStructure.NVIC_IRQChannel = DMA2_Stream0_IRQn;
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80a0c4c:	2400      	movs	r4, #0
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80a0c4e:	2501      	movs	r5, #1
    HAL_Pin_Mode(pin, AN_INPUT);
 80a0c50:	f000 f8aa 	bl	80a0da8 <HAL_Pin_Mode>
    NVIC_InitStructure.NVIC_IRQChannel = DMA2_Stream0_IRQn;
 80a0c54:	2338      	movs	r3, #56	; 0x38
    NVIC_Init(&NVIC_InitStructure);
 80a0c56:	a801      	add	r0, sp, #4
    NVIC_InitStructure.NVIC_IRQChannel = DMA2_Stream0_IRQn;
 80a0c58:	f88d 3004 	strb.w	r3, [sp, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80a0c5c:	f88d 4005 	strb.w	r4, [sp, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 80a0c60:	f88d 4006 	strb.w	r4, [sp, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80a0c64:	f88d 5007 	strb.w	r5, [sp, #7]
    NVIC_Init(&NVIC_InitStructure);
 80a0c68:	f7ff fa26 	bl	80a00b8 <NVIC_Init>

    // 60000000UL = 60 MHz Timer Clock = HCLK / 2
    // Even low audio rates like 8000 Hz will fit in a 16-bit counter with no prescaler (period = 7500)
    TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
    TIM_TimeBaseStructInit(&TIM_TimeBaseStructure);
 80a0c6c:	a802      	add	r0, sp, #8
 80a0c6e:	f7ff fbb9 	bl	80a03e4 <TIM_TimeBaseStructInit>
    TIM_TimeBaseStructure.TIM_Period = (60000000UL / freqHZ) - 1;
 80a0c72:	4945      	ldr	r1, [pc, #276]	; (80a0d88 <_ZN13ADCDMA_config5startEj+0x170>)
    TIM_TimeBaseStructure.TIM_Prescaler = 0;
    TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 80a0c74:	f8ad 4010 	strh.w	r4, [sp, #16]
    TIM_TimeBaseStructure.TIM_Period = (60000000UL / freqHZ) - 1;
 80a0c78:	fbb1 f1f7 	udiv	r1, r1, r7
    TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
    TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
 80a0c7c:	4f43      	ldr	r7, [pc, #268]	; (80a0d8c <_ZN13ADCDMA_config5startEj+0x174>)
    TIM_TimeBaseStructure.TIM_Period = (60000000UL / freqHZ) - 1;
 80a0c7e:	3901      	subs	r1, #1
    TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
 80a0c80:	4638      	mov	r0, r7
    TIM_TimeBaseStructure.TIM_Period = (60000000UL / freqHZ) - 1;
 80a0c82:	9103      	str	r1, [sp, #12]
    TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
 80a0c84:	a902      	add	r1, sp, #8
    TIM_TimeBaseStructure.TIM_Prescaler = 0;
 80a0c86:	9402      	str	r4, [sp, #8]
    TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
 80a0c88:	f7ff fb6e 	bl	80a0368 <TIM_TimeBaseInit>
    TIM_SelectOutputTrigger(TIM3, TIM_TRGOSource_Update); // ADC_ExternalTrigConv_T3_TRGO
 80a0c8c:	4638      	mov	r0, r7
 80a0c8e:	2120      	movs	r1, #32
 80a0c90:	f7ff fbbd 	bl	80a040e <TIM_SelectOutputTrigger>
    TIM_Cmd(TIM3, ENABLE);
 80a0c94:	4629      	mov	r1, r5
 80a0c96:	4638      	mov	r0, r7
 80a0c98:	f7ff fbad 	bl	80a03f6 <TIM_Cmd>
    ADC_InitTypeDef ADC_InitStructure;
    DMA_InitTypeDef DMA_InitStructure;

    // DMA2 Stream0 channel0 configuration
    DMA_InitStructure.DMA_Channel = DMA_Channel_0;
    DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)buf;
 80a0c9c:	68b3      	ldr	r3, [r6, #8]
    DMA_InitStructure.DMA_PeripheralBaseAddr =  0x40012308; // CDR_ADDRESS; Packed ADC1, ADC2;
    DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
    DMA_InitStructure.DMA_BufferSize = bufSize;
    DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
    DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
    DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 80a0c9e:	f44f 6700 	mov.w	r7, #2048	; 0x800
    DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)buf;
 80a0ca2:	9311      	str	r3, [sp, #68]	; 0x44
    DMA_InitStructure.DMA_PeripheralBaseAddr =  0x40012308; // CDR_ADDRESS; Packed ADC1, ADC2;
 80a0ca4:	4b3a      	ldr	r3, [pc, #232]	; (80a0d90 <_ZN13ADCDMA_config5startEj+0x178>)
    DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
    DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 80a0ca6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    DMA_InitStructure.DMA_PeripheralBaseAddr =  0x40012308; // CDR_ADDRESS; Packed ADC1, ADC2;
 80a0caa:	9310      	str	r3, [sp, #64]	; 0x40
    DMA_InitStructure.DMA_BufferSize = bufSize;
 80a0cac:	68f3      	ldr	r3, [r6, #12]
    DMA_InitStructure.DMA_Priority = DMA_Priority_High;
    DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
 80a0cae:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 80a0cb2:	e9cd 3413 	strd	r3, r4, [sp, #76]	; 0x4c
    DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 80a0cb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80a0cba:	e9cd 3715 	strd	r3, r7, [sp, #84]	; 0x54
    DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 80a0cbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 80a0cc2:	e9cd 2317 	strd	r2, r3, [sp, #92]	; 0x5c
    DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
 80a0cc6:	2304      	movs	r3, #4
    DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull;
    DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
    DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
    DMA_Init(DMA2_Stream0, &DMA_InitStructure);
 80a0cc8:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 80a0d94 <_ZN13ADCDMA_config5startEj+0x17c>
    DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
 80a0ccc:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    DMA_Init(DMA2_Stream0, &DMA_InitStructure);
 80a0cd0:	4640      	mov	r0, r8
 80a0cd2:	a90f      	add	r1, sp, #60	; 0x3c
    DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 80a0cd4:	e9cd 541b 	strd	r5, r4, [sp, #108]	; 0x6c
    DMA_InitStructure.DMA_Channel = DMA_Channel_0;
 80a0cd8:	940f      	str	r4, [sp, #60]	; 0x3c
    DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
 80a0cda:	9412      	str	r4, [sp, #72]	; 0x48
    DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 80a0cdc:	941d      	str	r4, [sp, #116]	; 0x74
    DMA_Init(DMA2_Stream0, &DMA_InitStructure);
 80a0cde:	f7ff fab7 	bl	80a0250 <DMA_Init>
    // Since we want to write out of loop anyway, there's no real advantage to using the interrupt, and as
    // far as I can tell, you can't set the interrupt handler for DMA2_Stream0 without modifying
    // system firmware because there's no built-in handler for it.
    // DMA_ITConfig(DMA2_Stream0, DMA_IT_TC | DMA_IT_HT, ENABLE);

    DMA_Cmd(DMA2_Stream0, ENABLE);
 80a0ce2:	4629      	mov	r1, r5
 80a0ce4:	4640      	mov	r0, r8
 80a0ce6:	f7ff fadd 	bl	80a02a4 <DMA_Cmd>

    // ADC Common Init
    ADC_CommonInitStructure.ADC_Mode = ADC_DualMode_RegSimult;
 80a0cea:	2306      	movs	r3, #6
    ADC_CommonInitStructure.ADC_Prescaler = ADC_Prescaler_Div2;
 80a0cec:	e9cd 3405 	strd	r3, r4, [sp, #20]
    ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_1;
 80a0cf0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    ADC_CommonInitStructure.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
    ADC_CommonInit(&ADC_CommonInitStructure);
 80a0cf4:	a805      	add	r0, sp, #20
    ADC_CommonInitStructure.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 80a0cf6:	e9cd 3407 	strd	r3, r4, [sp, #28]
    ADC_CommonInit(&ADC_CommonInitStructure);
 80a0cfa:	f7ff fa39 	bl	80a0170 <ADC_CommonInit>
    // ADC1 configuration
    ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
    ADC_InitStructure.ADC_ScanConvMode = DISABLE;
    ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
    ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_Rising;
    ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T3_TRGO;
 80a0cfe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a0d02:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Left;
 80a0d06:	970d      	str	r7, [sp, #52]	; 0x34
    ADC_InitStructure.ADC_NbrOfConversion = 1;
    ADC_Init(ADC1, &ADC_InitStructure);
 80a0d08:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80a0d0c:	f507 378c 	add.w	r7, r7, #71680	; 0x11800

    // ADC2 configuration - same
    ADC_Init(ADC2, &ADC_InitStructure);
 80a0d10:	f5a8 38a1 	sub.w	r8, r8, #82432	; 0x14200
    ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T3_TRGO;
 80a0d14:	e9cd 030b 	strd	r0, r3, [sp, #44]	; 0x2c
    ADC_Init(ADC2, &ADC_InitStructure);
 80a0d18:	f5a8 7888 	sub.w	r8, r8, #272	; 0x110
    ADC_Init(ADC1, &ADC_InitStructure);
 80a0d1c:	4638      	mov	r0, r7
 80a0d1e:	a909      	add	r1, sp, #36	; 0x24
    ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 80a0d20:	9409      	str	r4, [sp, #36]	; 0x24
    ADC_InitStructure.ADC_ScanConvMode = DISABLE;
 80a0d22:	f8ad 4028 	strh.w	r4, [sp, #40]	; 0x28
    ADC_InitStructure.ADC_NbrOfConversion = 1;
 80a0d26:	f88d 5038 	strb.w	r5, [sp, #56]	; 0x38
    ADC_Init(ADC1, &ADC_InitStructure);
 80a0d2a:	f7ff f9fb 	bl	80a0124 <ADC_Init>
    ADC_Init(ADC2, &ADC_InitStructure);
 80a0d2e:	a909      	add	r1, sp, #36	; 0x24
 80a0d30:	4640      	mov	r0, r8
 80a0d32:	f7ff f9f7 	bl	80a0124 <ADC_Init>

    //
    Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0d36:	f000 f82f 	bl	80a0d98 <HAL_Pin_Map>
    ADC_RegularChannelConfig(ADC1, PIN_MAP[pin].adc_channel, 1, ADC_SampleTime_15Cycles);
 80a0d3a:	f04f 091c 	mov.w	r9, #28
    Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0d3e:	4604      	mov	r4, r0
    ADC_RegularChannelConfig(ADC1, PIN_MAP[pin].adc_channel, 1, ADC_SampleTime_15Cycles);
 80a0d40:	6873      	ldr	r3, [r6, #4]
 80a0d42:	462a      	mov	r2, r5
 80a0d44:	fb09 0103 	mla	r1, r9, r3, r0
 80a0d48:	462b      	mov	r3, r5
 80a0d4a:	4638      	mov	r0, r7
 80a0d4c:	79c9      	ldrb	r1, [r1, #7]
 80a0d4e:	f7ff fa2c 	bl	80a01aa <ADC_RegularChannelConfig>
    ADC_RegularChannelConfig(ADC2, PIN_MAP[pin].adc_channel, 1, ADC_SampleTime_15Cycles);
 80a0d52:	6870      	ldr	r0, [r6, #4]
 80a0d54:	462b      	mov	r3, r5
 80a0d56:	fb09 4400 	mla	r4, r9, r0, r4
 80a0d5a:	462a      	mov	r2, r5
 80a0d5c:	79e1      	ldrb	r1, [r4, #7]
 80a0d5e:	4640      	mov	r0, r8
 80a0d60:	f7ff fa23 	bl	80a01aa <ADC_RegularChannelConfig>
    // Serial.printlnf("using pin %d ADC channel %u", pin, PIN_MAP[pin].adc_channel);

    // Enable DMA request after last transfer (Multi-ADC mode)
    ADC_MultiModeDMARequestAfterLastTransferCmd(ENABLE);
 80a0d64:	4628      	mov	r0, r5
 80a0d66:	f7ff fa67 	bl	80a0238 <ADC_MultiModeDMARequestAfterLastTransferCmd>

    // Enable ADCs
    ADC_Cmd(ADC1, ENABLE);
 80a0d6a:	4629      	mov	r1, r5
 80a0d6c:	4638      	mov	r0, r7
 80a0d6e:	f7ff fa13 	bl	80a0198 <ADC_Cmd>
    ADC_Cmd(ADC2, ENABLE);
 80a0d72:	4629      	mov	r1, r5
 80a0d74:	4640      	mov	r0, r8
 80a0d76:	f7ff fa0f 	bl	80a0198 <ADC_Cmd>

    ADC_SoftwareStartConv(ADC1);
 80a0d7a:	4638      	mov	r0, r7
 80a0d7c:	f7ff fa57 	bl	80a022e <ADC_SoftwareStartConv>
}
 80a0d80:	b01f      	add	sp, #124	; 0x7c
 80a0d82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a0d86:	bf00      	nop
 80a0d88:	03938700 	.word	0x03938700
 80a0d8c:	40000400 	.word	0x40000400
 80a0d90:	40012308 	.word	0x40012308
 80a0d94:	40026410 	.word	0x40026410

080a0d98 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a0d98:	b508      	push	{r3, lr}
 80a0d9a:	4b02      	ldr	r3, [pc, #8]	; (80a0da4 <HAL_Pin_Map+0xc>)
 80a0d9c:	681b      	ldr	r3, [r3, #0]
 80a0d9e:	681b      	ldr	r3, [r3, #0]
 80a0da0:	9301      	str	r3, [sp, #4]
 80a0da2:	bd08      	pop	{r3, pc}
 80a0da4:	080601b0 	.word	0x080601b0

080a0da8 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a0da8:	b508      	push	{r3, lr}
 80a0daa:	4b02      	ldr	r3, [pc, #8]	; (80a0db4 <HAL_Pin_Mode+0xc>)
 80a0dac:	681b      	ldr	r3, [r3, #0]
 80a0dae:	689b      	ldr	r3, [r3, #8]
 80a0db0:	9301      	str	r3, [sp, #4]
 80a0db2:	bd08      	pop	{r3, pc}
 80a0db4:	080601b0 	.word	0x080601b0

080a0db8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0db8:	b508      	push	{r3, lr}
 80a0dba:	4b02      	ldr	r3, [pc, #8]	; (80a0dc4 <HAL_RNG_GetRandomNumber+0xc>)
 80a0dbc:	681b      	ldr	r3, [r3, #0]
 80a0dbe:	685b      	ldr	r3, [r3, #4]
 80a0dc0:	9301      	str	r3, [sp, #4]
 80a0dc2:	bd08      	pop	{r3, pc}
 80a0dc4:	0806019c 	.word	0x0806019c

080a0dc8 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0dc8:	b508      	push	{r3, lr}
 80a0dca:	4b02      	ldr	r3, [pc, #8]	; (80a0dd4 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0dcc:	681b      	ldr	r3, [r3, #0]
 80a0dce:	695b      	ldr	r3, [r3, #20]
 80a0dd0:	9301      	str	r3, [sp, #4]
 80a0dd2:	bd08      	pop	{r3, pc}
 80a0dd4:	0806019c 	.word	0x0806019c

080a0dd8 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a0dd8:	b508      	push	{r3, lr}
 80a0dda:	4b02      	ldr	r3, [pc, #8]	; (80a0de4 <hal_usart_write+0xc>)
 80a0ddc:	681b      	ldr	r3, [r3, #0]
 80a0dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0de0:	9301      	str	r3, [sp, #4]
 80a0de2:	bd08      	pop	{r3, pc}
 80a0de4:	080601c4 	.word	0x080601c4

080a0de8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a0de8:	b508      	push	{r3, lr}
 80a0dea:	4b02      	ldr	r3, [pc, #8]	; (80a0df4 <hal_usart_available+0xc>)
 80a0dec:	681b      	ldr	r3, [r3, #0]
 80a0dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0df0:	9301      	str	r3, [sp, #4]
 80a0df2:	bd08      	pop	{r3, pc}
 80a0df4:	080601c4 	.word	0x080601c4

080a0df8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a0df8:	b508      	push	{r3, lr}
 80a0dfa:	4b02      	ldr	r3, [pc, #8]	; (80a0e04 <hal_usart_read+0xc>)
 80a0dfc:	681b      	ldr	r3, [r3, #0]
 80a0dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0e00:	9301      	str	r3, [sp, #4]
 80a0e02:	bd08      	pop	{r3, pc}
 80a0e04:	080601c4 	.word	0x080601c4

080a0e08 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a0e08:	b508      	push	{r3, lr}
 80a0e0a:	4b02      	ldr	r3, [pc, #8]	; (80a0e14 <hal_usart_peek+0xc>)
 80a0e0c:	681b      	ldr	r3, [r3, #0]
 80a0e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0e10:	9301      	str	r3, [sp, #4]
 80a0e12:	bd08      	pop	{r3, pc}
 80a0e14:	080601c4 	.word	0x080601c4

080a0e18 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a0e18:	b508      	push	{r3, lr}
 80a0e1a:	4b02      	ldr	r3, [pc, #8]	; (80a0e24 <hal_usart_flush+0xc>)
 80a0e1c:	681b      	ldr	r3, [r3, #0]
 80a0e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0e20:	9301      	str	r3, [sp, #4]
 80a0e22:	bd08      	pop	{r3, pc}
 80a0e24:	080601c4 	.word	0x080601c4

080a0e28 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a0e28:	b508      	push	{r3, lr}
 80a0e2a:	4b02      	ldr	r3, [pc, #8]	; (80a0e34 <hal_usart_available_data_for_write+0xc>)
 80a0e2c:	681b      	ldr	r3, [r3, #0]
 80a0e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0e30:	9301      	str	r3, [sp, #4]
 80a0e32:	bd08      	pop	{r3, pc}
 80a0e34:	080601c4 	.word	0x080601c4

080a0e38 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 80a0e38:	b508      	push	{r3, lr}
 80a0e3a:	4b02      	ldr	r3, [pc, #8]	; (80a0e44 <hal_usart_init_ex+0xc>)
 80a0e3c:	681b      	ldr	r3, [r3, #0]
 80a0e3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0e40:	9301      	str	r3, [sp, #4]
 80a0e42:	bd08      	pop	{r3, pc}
 80a0e44:	080601c4 	.word	0x080601c4

080a0e48 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0e48:	b508      	push	{r3, lr}
 80a0e4a:	4b02      	ldr	r3, [pc, #8]	; (80a0e54 <HAL_USB_USART_Init+0xc>)
 80a0e4c:	681b      	ldr	r3, [r3, #0]
 80a0e4e:	681b      	ldr	r3, [r3, #0]
 80a0e50:	9301      	str	r3, [sp, #4]
 80a0e52:	bd08      	pop	{r3, pc}
 80a0e54:	080601d8 	.word	0x080601d8

080a0e58 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a0e58:	b508      	push	{r3, lr}
 80a0e5a:	4b02      	ldr	r3, [pc, #8]	; (80a0e64 <HAL_USB_USART_Begin+0xc>)
 80a0e5c:	681b      	ldr	r3, [r3, #0]
 80a0e5e:	685b      	ldr	r3, [r3, #4]
 80a0e60:	9301      	str	r3, [sp, #4]
 80a0e62:	bd08      	pop	{r3, pc}
 80a0e64:	080601d8 	.word	0x080601d8

080a0e68 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0e68:	b508      	push	{r3, lr}
 80a0e6a:	4b02      	ldr	r3, [pc, #8]	; (80a0e74 <HAL_USB_USART_Available_Data+0xc>)
 80a0e6c:	681b      	ldr	r3, [r3, #0]
 80a0e6e:	691b      	ldr	r3, [r3, #16]
 80a0e70:	9301      	str	r3, [sp, #4]
 80a0e72:	bd08      	pop	{r3, pc}
 80a0e74:	080601d8 	.word	0x080601d8

080a0e78 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0e78:	b508      	push	{r3, lr}
 80a0e7a:	4b02      	ldr	r3, [pc, #8]	; (80a0e84 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0e7c:	681b      	ldr	r3, [r3, #0]
 80a0e7e:	695b      	ldr	r3, [r3, #20]
 80a0e80:	9301      	str	r3, [sp, #4]
 80a0e82:	bd08      	pop	{r3, pc}
 80a0e84:	080601d8 	.word	0x080601d8

080a0e88 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0e88:	b508      	push	{r3, lr}
 80a0e8a:	4b02      	ldr	r3, [pc, #8]	; (80a0e94 <HAL_USB_USART_Receive_Data+0xc>)
 80a0e8c:	681b      	ldr	r3, [r3, #0]
 80a0e8e:	699b      	ldr	r3, [r3, #24]
 80a0e90:	9301      	str	r3, [sp, #4]
 80a0e92:	bd08      	pop	{r3, pc}
 80a0e94:	080601d8 	.word	0x080601d8

080a0e98 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0e98:	b508      	push	{r3, lr}
 80a0e9a:	4b02      	ldr	r3, [pc, #8]	; (80a0ea4 <HAL_USB_USART_Send_Data+0xc>)
 80a0e9c:	681b      	ldr	r3, [r3, #0]
 80a0e9e:	69db      	ldr	r3, [r3, #28]
 80a0ea0:	9301      	str	r3, [sp, #4]
 80a0ea2:	bd08      	pop	{r3, pc}
 80a0ea4:	080601d8 	.word	0x080601d8

080a0ea8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0ea8:	b508      	push	{r3, lr}
 80a0eaa:	4b02      	ldr	r3, [pc, #8]	; (80a0eb4 <HAL_USB_USART_Flush_Data+0xc>)
 80a0eac:	681b      	ldr	r3, [r3, #0]
 80a0eae:	6a1b      	ldr	r3, [r3, #32]
 80a0eb0:	9301      	str	r3, [sp, #4]
 80a0eb2:	bd08      	pop	{r3, pc}
 80a0eb4:	080601d8 	.word	0x080601d8

080a0eb8 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0eb8:	b508      	push	{r3, lr}
 80a0eba:	4b02      	ldr	r3, [pc, #8]	; (80a0ec4 <inet_gethostbyname+0xc>)
 80a0ebc:	681b      	ldr	r3, [r3, #0]
 80a0ebe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0ec0:	9301      	str	r3, [sp, #4]
 80a0ec2:	bd08      	pop	{r3, pc}
 80a0ec4:	080601c0 	.word	0x080601c0

080a0ec8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0ec8:	b508      	push	{r3, lr}
 80a0eca:	4b02      	ldr	r3, [pc, #8]	; (80a0ed4 <set_system_mode+0xc>)
 80a0ecc:	681b      	ldr	r3, [r3, #0]
 80a0ece:	685b      	ldr	r3, [r3, #4]
 80a0ed0:	9301      	str	r3, [sp, #4]
 80a0ed2:	bd08      	pop	{r3, pc}
 80a0ed4:	080601a4 	.word	0x080601a4

080a0ed8 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a0ed8:	b508      	push	{r3, lr}
 80a0eda:	4b02      	ldr	r3, [pc, #8]	; (80a0ee4 <application_thread_current+0xc>)
 80a0edc:	681b      	ldr	r3, [r3, #0]
 80a0ede:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0ee0:	9301      	str	r3, [sp, #4]
 80a0ee2:	bd08      	pop	{r3, pc}
 80a0ee4:	080601a4 	.word	0x080601a4

080a0ee8 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a0ee8:	b508      	push	{r3, lr}
 80a0eea:	4b02      	ldr	r3, [pc, #8]	; (80a0ef4 <application_thread_invoke+0xc>)
 80a0eec:	681b      	ldr	r3, [r3, #0]
 80a0eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a0ef0:	9301      	str	r3, [sp, #4]
 80a0ef2:	bd08      	pop	{r3, pc}
 80a0ef4:	080601a4 	.word	0x080601a4

080a0ef8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0ef8:	b508      	push	{r3, lr}
 80a0efa:	4b03      	ldr	r3, [pc, #12]	; (80a0f08 <system_ctrl_set_app_request_handler+0x10>)
 80a0efc:	681b      	ldr	r3, [r3, #0]
 80a0efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0f02:	9301      	str	r3, [sp, #4]
 80a0f04:	bd08      	pop	{r3, pc}
 80a0f06:	0000      	.short	0x0000
 80a0f08:	080601a4 	.word	0x080601a4

080a0f0c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0f0c:	b508      	push	{r3, lr}
 80a0f0e:	4b03      	ldr	r3, [pc, #12]	; (80a0f1c <system_ctrl_set_result+0x10>)
 80a0f10:	681b      	ldr	r3, [r3, #0]
 80a0f12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a0f16:	9301      	str	r3, [sp, #4]
 80a0f18:	bd08      	pop	{r3, pc}
 80a0f1a:	0000      	.short	0x0000
 80a0f1c:	080601a4 	.word	0x080601a4

080a0f20 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0f20:	b508      	push	{r3, lr}
 80a0f22:	4b02      	ldr	r3, [pc, #8]	; (80a0f2c <network_connect+0xc>)
 80a0f24:	681b      	ldr	r3, [r3, #0]
 80a0f26:	685b      	ldr	r3, [r3, #4]
 80a0f28:	9301      	str	r3, [sp, #4]
 80a0f2a:	bd08      	pop	{r3, pc}
 80a0f2c:	080601c8 	.word	0x080601c8

080a0f30 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0f30:	b508      	push	{r3, lr}
 80a0f32:	4b02      	ldr	r3, [pc, #8]	; (80a0f3c <network_connecting+0xc>)
 80a0f34:	681b      	ldr	r3, [r3, #0]
 80a0f36:	689b      	ldr	r3, [r3, #8]
 80a0f38:	9301      	str	r3, [sp, #4]
 80a0f3a:	bd08      	pop	{r3, pc}
 80a0f3c:	080601c8 	.word	0x080601c8

080a0f40 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0f40:	b508      	push	{r3, lr}
 80a0f42:	4b02      	ldr	r3, [pc, #8]	; (80a0f4c <network_disconnect+0xc>)
 80a0f44:	681b      	ldr	r3, [r3, #0]
 80a0f46:	68db      	ldr	r3, [r3, #12]
 80a0f48:	9301      	str	r3, [sp, #4]
 80a0f4a:	bd08      	pop	{r3, pc}
 80a0f4c:	080601c8 	.word	0x080601c8

080a0f50 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0f50:	b508      	push	{r3, lr}
 80a0f52:	4b02      	ldr	r3, [pc, #8]	; (80a0f5c <network_ready+0xc>)
 80a0f54:	681b      	ldr	r3, [r3, #0]
 80a0f56:	691b      	ldr	r3, [r3, #16]
 80a0f58:	9301      	str	r3, [sp, #4]
 80a0f5a:	bd08      	pop	{r3, pc}
 80a0f5c:	080601c8 	.word	0x080601c8

080a0f60 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0f60:	b508      	push	{r3, lr}
 80a0f62:	4b02      	ldr	r3, [pc, #8]	; (80a0f6c <network_on+0xc>)
 80a0f64:	681b      	ldr	r3, [r3, #0]
 80a0f66:	695b      	ldr	r3, [r3, #20]
 80a0f68:	9301      	str	r3, [sp, #4]
 80a0f6a:	bd08      	pop	{r3, pc}
 80a0f6c:	080601c8 	.word	0x080601c8

080a0f70 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0f70:	b508      	push	{r3, lr}
 80a0f72:	4b02      	ldr	r3, [pc, #8]	; (80a0f7c <network_off+0xc>)
 80a0f74:	681b      	ldr	r3, [r3, #0]
 80a0f76:	699b      	ldr	r3, [r3, #24]
 80a0f78:	9301      	str	r3, [sp, #4]
 80a0f7a:	bd08      	pop	{r3, pc}
 80a0f7c:	080601c8 	.word	0x080601c8

080a0f80 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a0f80:	b508      	push	{r3, lr}
 80a0f82:	4b02      	ldr	r3, [pc, #8]	; (80a0f8c <network_listen+0xc>)
 80a0f84:	681b      	ldr	r3, [r3, #0]
 80a0f86:	69db      	ldr	r3, [r3, #28]
 80a0f88:	9301      	str	r3, [sp, #4]
 80a0f8a:	bd08      	pop	{r3, pc}
 80a0f8c:	080601c8 	.word	0x080601c8

080a0f90 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a0f90:	b508      	push	{r3, lr}
 80a0f92:	4b02      	ldr	r3, [pc, #8]	; (80a0f9c <network_listening+0xc>)
 80a0f94:	681b      	ldr	r3, [r3, #0]
 80a0f96:	6a1b      	ldr	r3, [r3, #32]
 80a0f98:	9301      	str	r3, [sp, #4]
 80a0f9a:	bd08      	pop	{r3, pc}
 80a0f9c:	080601c8 	.word	0x080601c8

080a0fa0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a0fa0:	b508      	push	{r3, lr}
 80a0fa2:	4b02      	ldr	r3, [pc, #8]	; (80a0fac <network_set_listen_timeout+0xc>)
 80a0fa4:	681b      	ldr	r3, [r3, #0]
 80a0fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0fa8:	9301      	str	r3, [sp, #4]
 80a0faa:	bd08      	pop	{r3, pc}
 80a0fac:	080601c8 	.word	0x080601c8

080a0fb0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a0fb0:	b508      	push	{r3, lr}
 80a0fb2:	4b02      	ldr	r3, [pc, #8]	; (80a0fbc <network_get_listen_timeout+0xc>)
 80a0fb4:	681b      	ldr	r3, [r3, #0]
 80a0fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0fb8:	9301      	str	r3, [sp, #4]
 80a0fba:	bd08      	pop	{r3, pc}
 80a0fbc:	080601c8 	.word	0x080601c8

080a0fc0 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a0fc0:	b508      	push	{r3, lr}
 80a0fc2:	4b02      	ldr	r3, [pc, #8]	; (80a0fcc <network_is_on+0xc>)
 80a0fc4:	681b      	ldr	r3, [r3, #0]
 80a0fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0fc8:	9301      	str	r3, [sp, #4]
 80a0fca:	bd08      	pop	{r3, pc}
 80a0fcc:	080601c8 	.word	0x080601c8

080a0fd0 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a0fd0:	b508      	push	{r3, lr}
 80a0fd2:	4b02      	ldr	r3, [pc, #8]	; (80a0fdc <network_is_off+0xc>)
 80a0fd4:	681b      	ldr	r3, [r3, #0]
 80a0fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0fd8:	9301      	str	r3, [sp, #4]
 80a0fda:	bd08      	pop	{r3, pc}
 80a0fdc:	080601c8 	.word	0x080601c8

080a0fe0 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 80a0fe0:	b508      	push	{r3, lr}
 80a0fe2:	4b02      	ldr	r3, [pc, #8]	; (80a0fec <spark_variable+0xc>)
 80a0fe4:	681b      	ldr	r3, [r3, #0]
 80a0fe6:	681b      	ldr	r3, [r3, #0]
 80a0fe8:	9301      	str	r3, [sp, #4]
 80a0fea:	bd08      	pop	{r3, pc}
 80a0fec:	080601cc 	.word	0x080601cc

080a0ff0 <spark_cloud_flag_connected>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a0ff0:	b508      	push	{r3, lr}
 80a0ff2:	4b02      	ldr	r3, [pc, #8]	; (80a0ffc <spark_cloud_flag_connected+0xc>)
 80a0ff4:	681b      	ldr	r3, [r3, #0]
 80a0ff6:	695b      	ldr	r3, [r3, #20]
 80a0ff8:	9301      	str	r3, [sp, #4]
 80a0ffa:	bd08      	pop	{r3, pc}
 80a0ffc:	080601cc 	.word	0x080601cc

080a1000 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a1000:	b508      	push	{r3, lr}
 80a1002:	4b02      	ldr	r3, [pc, #8]	; (80a100c <spark_send_event+0xc>)
 80a1004:	681b      	ldr	r3, [r3, #0]
 80a1006:	6a1b      	ldr	r3, [r3, #32]
 80a1008:	9301      	str	r3, [sp, #4]
 80a100a:	bd08      	pop	{r3, pc}
 80a100c:	080601cc 	.word	0x080601cc

080a1010 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a1010:	b508      	push	{r3, lr}
 80a1012:	4b02      	ldr	r3, [pc, #8]	; (80a101c <spark_set_random_seed_from_cloud_handler+0xc>)
 80a1014:	681b      	ldr	r3, [r3, #0]
 80a1016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1018:	9301      	str	r3, [sp, #4]
 80a101a:	bd08      	pop	{r3, pc}
 80a101c:	080601cc 	.word	0x080601cc

080a1020 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a1020:	b508      	push	{r3, lr}
 80a1022:	4b02      	ldr	r3, [pc, #8]	; (80a102c <malloc+0xc>)
 80a1024:	681b      	ldr	r3, [r3, #0]
 80a1026:	681b      	ldr	r3, [r3, #0]
 80a1028:	9301      	str	r3, [sp, #4]
 80a102a:	bd08      	pop	{r3, pc}
 80a102c:	080601a0 	.word	0x080601a0

080a1030 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a1030:	b508      	push	{r3, lr}
 80a1032:	4b02      	ldr	r3, [pc, #8]	; (80a103c <free+0xc>)
 80a1034:	681b      	ldr	r3, [r3, #0]
 80a1036:	685b      	ldr	r3, [r3, #4]
 80a1038:	9301      	str	r3, [sp, #4]
 80a103a:	bd08      	pop	{r3, pc}
 80a103c:	080601a0 	.word	0x080601a0

080a1040 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a1040:	b508      	push	{r3, lr}
 80a1042:	4b02      	ldr	r3, [pc, #8]	; (80a104c <abort+0xc>)
 80a1044:	681b      	ldr	r3, [r3, #0]
 80a1046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1048:	9301      	str	r3, [sp, #4]
 80a104a:	bd08      	pop	{r3, pc}
 80a104c:	080601a0 	.word	0x080601a0

080a1050 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a1050:	b508      	push	{r3, lr}
 80a1052:	4b02      	ldr	r3, [pc, #8]	; (80a105c <_malloc_r+0xc>)
 80a1054:	681b      	ldr	r3, [r3, #0]
 80a1056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1058:	9301      	str	r3, [sp, #4]
 80a105a:	bd08      	pop	{r3, pc}
 80a105c:	080601a0 	.word	0x080601a0

080a1060 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 80a1060:	b508      	push	{r3, lr}
 80a1062:	4b02      	ldr	r3, [pc, #8]	; (80a106c <__assert_func+0xc>)
 80a1064:	681b      	ldr	r3, [r3, #0]
 80a1066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1068:	9301      	str	r3, [sp, #4]
 80a106a:	bd08      	pop	{r3, pc}
 80a106c:	080601a0 	.word	0x080601a0

080a1070 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a1070:	b508      	push	{r3, lr}
 80a1072:	4b02      	ldr	r3, [pc, #8]	; (80a107c <newlib_impure_ptr_callback+0xc>)
 80a1074:	681b      	ldr	r3, [r3, #0]
 80a1076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1078:	9301      	str	r3, [sp, #4]
 80a107a:	bd08      	pop	{r3, pc}
 80a107c:	080601a0 	.word	0x080601a0

080a1080 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a1080:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a1082:	2000      	movs	r0, #0
 80a1084:	4b04      	ldr	r3, [pc, #16]	; (80a1098 <_GLOBAL__sub_I_System+0x18>)
 80a1086:	601a      	str	r2, [r3, #0]
 80a1088:	4b04      	ldr	r3, [pc, #16]	; (80a109c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 80a108a:	4a05      	ldr	r2, [pc, #20]	; (80a10a0 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 80a108c:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 80a1090:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a1092:	f7ff bf19 	b.w	80a0ec8 <set_system_mode>
 80a1096:	bf00      	nop
 80a1098:	200020c8 	.word	0x200020c8
 80a109c:	200020bc 	.word	0x200020bc
 80a10a0:	ffff0000 	.word	0xffff0000

080a10a4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a10a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a10a6:	4606      	mov	r6, r0
 80a10a8:	460d      	mov	r5, r1
  size_t n = 0;
 80a10aa:	2400      	movs	r4, #0
 80a10ac:	188f      	adds	r7, r1, r2
  while (size--) {
 80a10ae:	42bd      	cmp	r5, r7
 80a10b0:	d00c      	beq.n	80a10cc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a10b2:	6833      	ldr	r3, [r6, #0]
 80a10b4:	4630      	mov	r0, r6
 80a10b6:	689b      	ldr	r3, [r3, #8]
 80a10b8:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a10bc:	4798      	blx	r3
     if (chunk>=0)
 80a10be:	1e03      	subs	r3, r0, #0
 80a10c0:	db01      	blt.n	80a10c6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a10c2:	441c      	add	r4, r3
  while (size--) {
 80a10c4:	e7f3      	b.n	80a10ae <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a10c6:	2c00      	cmp	r4, #0
 80a10c8:	bf08      	it	eq
 80a10ca:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a10cc:	4620      	mov	r0, r4
 80a10ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a10d0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a10d0:	b570      	push	{r4, r5, r6, lr}
 80a10d2:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a10d4:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a10d6:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a10d8:	b149      	cbz	r1, 80a10ee <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a10da:	f002 fd48 	bl	80a3b6e <strlen>
 80a10de:	682b      	ldr	r3, [r5, #0]
 80a10e0:	4602      	mov	r2, r0
 80a10e2:	4621      	mov	r1, r4
 80a10e4:	4628      	mov	r0, r5
    }
 80a10e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a10ea:	68db      	ldr	r3, [r3, #12]
 80a10ec:	4718      	bx	r3
    }
 80a10ee:	bd70      	pop	{r4, r5, r6, pc}

080a10f0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a10f0:	6803      	ldr	r3, [r0, #0]
 80a10f2:	689b      	ldr	r3, [r3, #8]
 80a10f4:	4718      	bx	r3

080a10f6 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a10f6:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a10f8:	2a01      	cmp	r2, #1
 80a10fa:	bf98      	it	ls
 80a10fc:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a10fe:	b530      	push	{r4, r5, lr}
 80a1100:	b08b      	sub	sp, #44	; 0x2c
 80a1102:	460c      	mov	r4, r1
  *str = '\0';
 80a1104:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a1108:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a110a:	4625      	mov	r5, r4
 80a110c:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a1110:	fb04 5312 	mls	r3, r4, r2, r5
 80a1114:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1116:	2b09      	cmp	r3, #9
 80a1118:	bf94      	ite	ls
 80a111a:	3330      	addls	r3, #48	; 0x30
 80a111c:	3337      	addhi	r3, #55	; 0x37
 80a111e:	b2db      	uxtb	r3, r3
  } while(n);
 80a1120:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1122:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a1126:	d9f0      	bls.n	80a110a <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a1128:	f7ff ffd2 	bl	80a10d0 <_ZN5Print5writeEPKc>
}
 80a112c:	b00b      	add	sp, #44	; 0x2c
 80a112e:	bd30      	pop	{r4, r5, pc}

080a1130 <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a1130:	2300      	movs	r3, #0
 80a1132:	6840      	ldr	r0, [r0, #4]
 80a1134:	461a      	mov	r2, r3
 80a1136:	4619      	mov	r1, r3
 80a1138:	f7ff bf12 	b.w	80a0f60 <network_on>

080a113c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a113c:	4b01      	ldr	r3, [pc, #4]	; (80a1144 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a113e:	4a02      	ldr	r2, [pc, #8]	; (80a1148 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a1140:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a1142:	4770      	bx	lr
 80a1144:	200020cc 	.word	0x200020cc
 80a1148:	080a3d00 	.word	0x080a3d00

080a114c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a114c:	4b02      	ldr	r3, [pc, #8]	; (80a1158 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a114e:	681a      	ldr	r2, [r3, #0]
 80a1150:	4b02      	ldr	r3, [pc, #8]	; (80a115c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a1152:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a1154:	4770      	bx	lr
 80a1156:	bf00      	nop
 80a1158:	20001008 	.word	0x20001008
 80a115c:	200020d0 	.word	0x200020d0

080a1160 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a1160:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a1162:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 80a1164:	4604      	mov	r4, r0
      if (_M_manager)
 80a1166:	b113      	cbz	r3, 80a116e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a1168:	2203      	movs	r2, #3
 80a116a:	4601      	mov	r1, r0
 80a116c:	4798      	blx	r3
    }
 80a116e:	4620      	mov	r0, r4
 80a1170:	bd10      	pop	{r4, pc}

080a1172 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 80a1172:	b513      	push	{r0, r1, r4, lr}
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1174:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 80a1176:	460b      	mov	r3, r1
 80a1178:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a117a:	c803      	ldmia	r0, {r0, r1}
 80a117c:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a1180:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a1184:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a1188:	e894 0003 	ldmia.w	r4, {r0, r1}
 80a118c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a1190:	b002      	add	sp, #8
 80a1192:	bd10      	pop	{r4, pc}

080a1194 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 80a1194:	2200      	movs	r2, #0
 80a1196:	4b01      	ldr	r3, [pc, #4]	; (80a119c <_GLOBAL__sub_I_RGB+0x8>)
 80a1198:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 80a119a:	4770      	bx	lr
 80a119c:	200020d4 	.word	0x200020d4

080a11a0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a11a0:	4b01      	ldr	r3, [pc, #4]	; (80a11a8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a11a2:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a11a4:	4770      	bx	lr
 80a11a6:	bf00      	nop
 80a11a8:	2000100c 	.word	0x2000100c

080a11ac <serialEventRun>:
{
 80a11ac:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a11ae:	4b13      	ldr	r3, [pc, #76]	; (80a11fc <serialEventRun+0x50>)
 80a11b0:	b143      	cbz	r3, 80a11c4 <serialEventRun+0x18>
 80a11b2:	f000 fc11 	bl	80a19d8 <_Z16_fetch_usbserialv>
 80a11b6:	6803      	ldr	r3, [r0, #0]
 80a11b8:	691b      	ldr	r3, [r3, #16]
 80a11ba:	4798      	blx	r3
 80a11bc:	2800      	cmp	r0, #0
 80a11be:	dd01      	ble.n	80a11c4 <serialEventRun+0x18>
        serialEvent();
 80a11c0:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a11c4:	4b0e      	ldr	r3, [pc, #56]	; (80a1200 <serialEventRun+0x54>)
 80a11c6:	b143      	cbz	r3, 80a11da <serialEventRun+0x2e>
 80a11c8:	f000 fdac 	bl	80a1d24 <_Z22__fetch_global_Serial1v>
 80a11cc:	6803      	ldr	r3, [r0, #0]
 80a11ce:	691b      	ldr	r3, [r3, #16]
 80a11d0:	4798      	blx	r3
 80a11d2:	2800      	cmp	r0, #0
 80a11d4:	dd01      	ble.n	80a11da <serialEventRun+0x2e>
        serialEvent1();
 80a11d6:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a11da:	4b0a      	ldr	r3, [pc, #40]	; (80a1204 <serialEventRun+0x58>)
 80a11dc:	b10b      	cbz	r3, 80a11e2 <serialEventRun+0x36>
 80a11de:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a11e2:	4b09      	ldr	r3, [pc, #36]	; (80a1208 <serialEventRun+0x5c>)
 80a11e4:	b143      	cbz	r3, 80a11f8 <serialEventRun+0x4c>
 80a11e6:	f000 fc31 	bl	80a1a4c <_Z17_fetch_usbserial1v>
 80a11ea:	6803      	ldr	r3, [r0, #0]
 80a11ec:	691b      	ldr	r3, [r3, #16]
 80a11ee:	4798      	blx	r3
 80a11f0:	2800      	cmp	r0, #0
 80a11f2:	dd01      	ble.n	80a11f8 <serialEventRun+0x4c>
        usbSerialEvent1();
 80a11f4:	f3af 8000 	nop.w
}
 80a11f8:	bd08      	pop	{r3, pc}
 80a11fa:	bf00      	nop
	...

080a120c <_post_loop>:
{
 80a120c:	b508      	push	{r3, lr}
	serialEventRun();
 80a120e:	f7ff ffcd 	bl	80a11ac <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a1212:	f7ff fdd9 	bl	80a0dc8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a1216:	4b01      	ldr	r3, [pc, #4]	; (80a121c <_post_loop+0x10>)
 80a1218:	6018      	str	r0, [r3, #0]
}
 80a121a:	bd08      	pop	{r3, pc}
 80a121c:	20002448 	.word	0x20002448

080a1220 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a1220:	4805      	ldr	r0, [pc, #20]	; (80a1238 <_Z33system_initialize_user_backup_ramv+0x18>)
 80a1222:	4a06      	ldr	r2, [pc, #24]	; (80a123c <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 80a1224:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a1226:	1a12      	subs	r2, r2, r0
 80a1228:	4905      	ldr	r1, [pc, #20]	; (80a1240 <_Z33system_initialize_user_backup_ramv+0x20>)
 80a122a:	f002 fc27 	bl	80a3a7c <memcpy>
    __backup_sram_signature = signature;
 80a122e:	4b05      	ldr	r3, [pc, #20]	; (80a1244 <_Z33system_initialize_user_backup_ramv+0x24>)
 80a1230:	4a05      	ldr	r2, [pc, #20]	; (80a1248 <_Z33system_initialize_user_backup_ramv+0x28>)
 80a1232:	601a      	str	r2, [r3, #0]
}
 80a1234:	bd08      	pop	{r3, pc}
 80a1236:	bf00      	nop
 80a1238:	40024000 	.word	0x40024000
 80a123c:	40024004 	.word	0x40024004
 80a1240:	080a40c0 	.word	0x080a40c0
 80a1244:	40024000 	.word	0x40024000
 80a1248:	9a271c1e 	.word	0x9a271c1e

080a124c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a124c:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a124e:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1250:	461a      	mov	r2, r3
 80a1252:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1256:	9300      	str	r3, [sp, #0]
 80a1258:	f7ff fe58 	bl	80a0f0c <system_ctrl_set_result>
}
 80a125c:	b003      	add	sp, #12
 80a125e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a1264 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a1264:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a1266:	8843      	ldrh	r3, [r0, #2]
 80a1268:	2b0a      	cmp	r3, #10
 80a126a:	d008      	beq.n	80a127e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a126c:	2b50      	cmp	r3, #80	; 0x50
 80a126e:	d10b      	bne.n	80a1288 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a1270:	4b09      	ldr	r3, [pc, #36]	; (80a1298 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a1272:	681b      	ldr	r3, [r3, #0]
 80a1274:	b14b      	cbz	r3, 80a128a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a1276:	b003      	add	sp, #12
 80a1278:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a127c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a127e:	f7ff ffe5 	bl	80a124c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a1282:	b003      	add	sp, #12
 80a1284:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1288:	2300      	movs	r3, #0
 80a128a:	461a      	mov	r2, r3
 80a128c:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1290:	9300      	str	r3, [sp, #0]
 80a1292:	f7ff fe3b 	bl	80a0f0c <system_ctrl_set_result>
}
 80a1296:	e7f4      	b.n	80a1282 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a1298:	200020e8 	.word	0x200020e8

080a129c <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a129c:	2100      	movs	r1, #0
{
 80a129e:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a12a0:	4811      	ldr	r0, [pc, #68]	; (80a12e8 <module_user_init_hook+0x4c>)
 80a12a2:	f7ff fee5 	bl	80a1070 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 80a12a6:	4b11      	ldr	r3, [pc, #68]	; (80a12ec <module_user_init_hook+0x50>)
 80a12a8:	681a      	ldr	r2, [r3, #0]
 80a12aa:	4b11      	ldr	r3, [pc, #68]	; (80a12f0 <module_user_init_hook+0x54>)
 80a12ac:	429a      	cmp	r2, r3
 80a12ae:	bf0c      	ite	eq
 80a12b0:	2201      	moveq	r2, #1
 80a12b2:	2200      	movne	r2, #0
 80a12b4:	4b0f      	ldr	r3, [pc, #60]	; (80a12f4 <module_user_init_hook+0x58>)
 80a12b6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a12b8:	d001      	beq.n	80a12be <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 80a12ba:	f7ff ffb1 	bl	80a1220 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a12be:	f7ff fd7b 	bl	80a0db8 <HAL_RNG_GetRandomNumber>
 80a12c2:	4604      	mov	r4, r0
    srand(seed);
 80a12c4:	f002 fc0a 	bl	80a3adc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a12c8:	4b0b      	ldr	r3, [pc, #44]	; (80a12f8 <module_user_init_hook+0x5c>)
 80a12ca:	b113      	cbz	r3, 80a12d2 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 80a12cc:	4620      	mov	r0, r4
 80a12ce:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a12d2:	2100      	movs	r1, #0
 80a12d4:	4808      	ldr	r0, [pc, #32]	; (80a12f8 <module_user_init_hook+0x5c>)
 80a12d6:	f7ff fe9b 	bl	80a1010 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a12da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a12de:	2100      	movs	r1, #0
 80a12e0:	4806      	ldr	r0, [pc, #24]	; (80a12fc <module_user_init_hook+0x60>)
 80a12e2:	f7ff be09 	b.w	80a0ef8 <system_ctrl_set_app_request_handler>
 80a12e6:	bf00      	nop
 80a12e8:	080a11a1 	.word	0x080a11a1
 80a12ec:	40024000 	.word	0x40024000
 80a12f0:	9a271c1e 	.word	0x9a271c1e
 80a12f4:	200020e4 	.word	0x200020e4
 80a12f8:	00000000 	.word	0x00000000
 80a12fc:	080a1265 	.word	0x080a1265

080a1300 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a1300:	4770      	bx	lr

080a1302 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 80a1302:	2000      	movs	r0, #0
 80a1304:	4770      	bx	lr

080a1306 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a1306:	b510      	push	{r4, lr}
 80a1308:	4604      	mov	r4, r0
 80a130a:	2110      	movs	r1, #16
 80a130c:	f7fe fec9 	bl	80a00a2 <_ZdlPvj>
 80a1310:	4620      	mov	r0, r4
 80a1312:	bd10      	pop	{r4, pc}

080a1314 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 80a1314:	b508      	push	{r3, lr}
      { delete this; }
 80a1316:	f7ff fff6 	bl	80a1306 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a131a:	bd08      	pop	{r3, pc}

080a131c <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a131c:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a131e:	b530      	push	{r4, r5, lr}
        type_(type) {
 80a1320:	f64f 749c 	movw	r4, #65436	; 0xff9c
 80a1324:	6002      	str	r2, [r0, #0]
 80a1326:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a1328:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a132a:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a132c:	680c      	ldr	r4, [r1, #0]
 80a132e:	8085      	strh	r5, [r0, #4]
 80a1330:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1332:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a1334:	bd30      	pop	{r4, r5, pc}

080a1336 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a1336:	b510      	push	{r4, lr}
 80a1338:	4604      	mov	r4, r0
    free((void*)msg_);
 80a133a:	6800      	ldr	r0, [r0, #0]
 80a133c:	f7ff fe78 	bl	80a1030 <free>
}
 80a1340:	4620      	mov	r0, r4
 80a1342:	bd10      	pop	{r4, pc}

080a1344 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 80a1344:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a1346:	68c4      	ldr	r4, [r0, #12]
 80a1348:	b1f4      	cbz	r4, 80a1388 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 80a134a:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a134c:	2b02      	cmp	r3, #2
 80a134e:	d103      	bne.n	80a1358 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a1350:	f104 000c 	add.w	r0, r4, #12
 80a1354:	f7ff ffef 	bl	80a1336 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 80a1358:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
 80a135a:	b135      	cbz	r5, 80a136a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a135c:	4628      	mov	r0, r5
 80a135e:	f7ff feff 	bl	80a1160 <_ZNSt14_Function_baseD1Ev>
 80a1362:	2110      	movs	r1, #16
 80a1364:	4628      	mov	r0, r5
 80a1366:	f7fe fe9c 	bl	80a00a2 <_ZdlPvj>
 80a136a:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a136c:	b135      	cbz	r5, 80a137c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a136e:	4628      	mov	r0, r5
 80a1370:	f7ff fef6 	bl	80a1160 <_ZNSt14_Function_baseD1Ev>
 80a1374:	2110      	movs	r1, #16
 80a1376:	4628      	mov	r0, r5
 80a1378:	f7fe fe93 	bl	80a00a2 <_ZdlPvj>
 80a137c:	4620      	mov	r0, r4
 80a137e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a1382:	2114      	movs	r1, #20
 80a1384:	f7fe be8d 	b.w	80a00a2 <_ZdlPvj>
 80a1388:	bd38      	pop	{r3, r4, r5, pc}

080a138a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a138a:	680b      	ldr	r3, [r1, #0]
 80a138c:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 80a138e:	684b      	ldr	r3, [r1, #4]
 80a1390:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 80a1392:	b113      	cbz	r3, 80a139a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
 80a1394:	685a      	ldr	r2, [r3, #4]
 80a1396:	3201      	adds	r2, #1
 80a1398:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a139a:	4770      	bx	lr

080a139c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a139c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a139e:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 80a13a0:	4668      	mov	r0, sp
 80a13a2:	460d      	mov	r5, r1
 80a13a4:	f7ff fff1 	bl	80a138a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a13a8:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a13aa:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a13ac:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 80a13ae:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a13b0:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 80a13b2:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 80a13b4:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a13b6:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 80a13b8:	f7ff fa66 	bl	80a0888 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 80a13bc:	b135      	cbz	r5, 80a13cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
 80a13be:	1d28      	adds	r0, r5, #4
 80a13c0:	f7ff fa62 	bl	80a0888 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a13c4:	2108      	movs	r1, #8
 80a13c6:	4628      	mov	r0, r5
 80a13c8:	f7fe fe6b 	bl	80a00a2 <_ZdlPvj>
        return p;
    }
 80a13cc:	4620      	mov	r0, r4
 80a13ce:	b003      	add	sp, #12
 80a13d0:	bd30      	pop	{r4, r5, pc}

080a13d2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a13d2:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a13d4:	b510      	push	{r4, lr}
      if (_M_empty())
 80a13d6:	b90a      	cbnz	r2, 80a13dc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a13d8:	f000 fcde 	bl	80a1d98 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a13dc:	68c3      	ldr	r3, [r0, #12]
    }
 80a13de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a13e2:	4718      	bx	r3

080a13e4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a13e4:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a13e6:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80a13e8:	f100 0110 	add.w	r1, r0, #16
 80a13ec:	f7ff fff1 	bl	80a13d2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 80a13f0:	bd08      	pop	{r3, pc}

080a13f2 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 80a13f2:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a13f4:	b510      	push	{r4, lr}
      if (_M_empty())
 80a13f6:	b90a      	cbnz	r2, 80a13fc <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a13f8:	f000 fcce 	bl	80a1d98 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a13fc:	68c3      	ldr	r3, [r0, #12]
    }
 80a13fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1402:	4718      	bx	r3

080a1404 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a1404:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a1406:	6800      	ldr	r0, [r0, #0]
 80a1408:	f100 0110 	add.w	r1, r0, #16
 80a140c:	f7ff fff1 	bl	80a13f2 <_ZNKSt8functionIFvRKbEEclES1_>
      }
 80a1410:	bd08      	pop	{r3, pc}
	...

080a1414 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 80a1414:	b538      	push	{r3, r4, r5, lr}
 80a1416:	2300      	movs	r3, #0
 80a1418:	4604      	mov	r4, r0
 80a141a:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a141c:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 80a141e:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a1420:	f7fe fe3b 	bl	80a009a <_Znwj>
 80a1424:	b128      	cbz	r0, 80a1432 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 80a1426:	2301      	movs	r3, #1
 80a1428:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 80a142c:	4b02      	ldr	r3, [pc, #8]	; (80a1438 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a142e:	60c5      	str	r5, [r0, #12]
 80a1430:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a1432:	6020      	str	r0, [r4, #0]
	}
 80a1434:	4620      	mov	r0, r4
 80a1436:	bd38      	pop	{r3, r4, r5, pc}
 80a1438:	080a3d28 	.word	0x080a3d28

080a143c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 80a143c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a143e:	2300      	movs	r3, #0
 80a1440:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 80a1442:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a1444:	4604      	mov	r4, r0
 80a1446:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a1448:	b12b      	cbz	r3, 80a1456 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a144a:	2202      	movs	r2, #2
 80a144c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a144e:	68eb      	ldr	r3, [r5, #12]
 80a1450:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a1452:	68ab      	ldr	r3, [r5, #8]
 80a1454:	60a3      	str	r3, [r4, #8]
    }
 80a1456:	4620      	mov	r0, r4
 80a1458:	bd38      	pop	{r3, r4, r5, pc}
	...

080a145c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 80a145c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a145e:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
 80a1460:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a1462:	4668      	mov	r0, sp
 80a1464:	f7ff ff5a 	bl	80a131c <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a1468:	f04f 0302 	mov.w	r3, #2
 80a146c:	e8d4 2f4f 	ldrexb	r2, [r4]
 80a1470:	2a00      	cmp	r2, #0
 80a1472:	d103      	bne.n	80a147c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 80a1474:	e8c4 3f41 	strexb	r1, r3, [r4]
 80a1478:	2900      	cmp	r1, #0
 80a147a:	d1f7      	bne.n	80a146c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 80a147c:	d125      	bne.n	80a14ca <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
 80a147e:	f104 050c 	add.w	r5, r4, #12
 80a1482:	4669      	mov	r1, sp
 80a1484:	4628      	mov	r0, r5
 80a1486:	f7ff ff49 	bl	80a131c <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 80a148a:	2301      	movs	r3, #1
 80a148c:	f3bf 8f5b 	dmb	ish
 80a1490:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a1492:	2000      	movs	r0, #0
 80a1494:	f3bf 8f5b 	dmb	ish
 80a1498:	f104 0308 	add.w	r3, r4, #8
 80a149c:	e853 6f00 	ldrex	r6, [r3]
 80a14a0:	e843 0200 	strex	r2, r0, [r3]
 80a14a4:	2a00      	cmp	r2, #0
 80a14a6:	d1f9      	bne.n	80a149c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
 80a14a8:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a14ac:	b16e      	cbz	r6, 80a14ca <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
 80a14ae:	f7ff fd13 	bl	80a0ed8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a14b2:	b178      	cbz	r0, 80a14d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a14b4:	4629      	mov	r1, r5
 80a14b6:	4630      	mov	r0, r6
 80a14b8:	f7ff ff8b 	bl	80a13d2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 80a14bc:	4630      	mov	r0, r6
 80a14be:	f7ff fe4f 	bl	80a1160 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a14c2:	2110      	movs	r1, #16
 80a14c4:	4630      	mov	r0, r6
 80a14c6:	f7fe fdec 	bl	80a00a2 <_ZdlPvj>
        p_->setError(std::move(error));
 80a14ca:	4668      	mov	r0, sp
 80a14cc:	f7ff ff33 	bl	80a1336 <_ZN8particle5ErrorD1Ev>
    }
 80a14d0:	b009      	add	sp, #36	; 0x24
 80a14d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a14d4:	4631      	mov	r1, r6
 80a14d6:	a802      	add	r0, sp, #8
 80a14d8:	f7ff ffb0 	bl	80a143c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a14dc:	68e0      	ldr	r0, [r4, #12]
 80a14de:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a14e2:	b108      	cbz	r0, 80a14e8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
 80a14e4:	f002 fb28 	bl	80a3b38 <strdup>
        type_(type) {
 80a14e8:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a14ea:	2010      	movs	r0, #16
 80a14ec:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a14f0:	f7fe fdd3 	bl	80a009a <_Znwj>
 80a14f4:	4605      	mov	r5, r0
 80a14f6:	b1e8      	cbz	r0, 80a1534 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
 80a14f8:	2700      	movs	r7, #0
 80a14fa:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a14fc:	2018      	movs	r0, #24
 80a14fe:	f7fe fdcc 	bl	80a009a <_Znwj>
 80a1502:	4604      	mov	r4, r0
 80a1504:	b188      	cbz	r0, 80a152a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
 80a1506:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a1508:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a150a:	a802      	add	r0, sp, #8
 80a150c:	f7ff fe31 	bl	80a1172 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1510:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a1512:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1514:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1516:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a1518:	9204      	str	r2, [sp, #16]
 80a151a:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a151c:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a151e:	60e3      	str	r3, [r4, #12]
 80a1520:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 80a1524:	9205      	str	r2, [sp, #20]
 80a1526:	f7ff fef9 	bl	80a131c <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 80a152a:	4b08      	ldr	r3, [pc, #32]	; (80a154c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a152c:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a152e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a1530:	4b07      	ldr	r3, [pc, #28]	; (80a1550 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
 80a1532:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 80a1534:	a806      	add	r0, sp, #24
 80a1536:	f7ff fefe 	bl	80a1336 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a153a:	a802      	add	r0, sp, #8
 80a153c:	f7ff fe10 	bl	80a1160 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a1540:	2200      	movs	r2, #0
 80a1542:	4629      	mov	r1, r5
 80a1544:	4803      	ldr	r0, [pc, #12]	; (80a1554 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
 80a1546:	f7ff fccf 	bl	80a0ee8 <application_thread_invoke>
 80a154a:	e7b7      	b.n	80a14bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
 80a154c:	080a13e5 	.word	0x080a13e5
 80a1550:	080a1671 	.word	0x080a1671
 80a1554:	080a1b35 	.word	0x080a1b35

080a1558 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a1558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a155c:	b08a      	sub	sp, #40	; 0x28
 80a155e:	4605      	mov	r5, r0
 80a1560:	460c      	mov	r4, r1
 80a1562:	4617      	mov	r7, r2
 80a1564:	4698      	mov	r8, r3
 80a1566:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a156a:	f7ff fd41 	bl	80a0ff0 <spark_cloud_flag_connected>
 80a156e:	ae07      	add	r6, sp, #28
    if (!connected()) {
 80a1570:	4682      	mov	sl, r0
 80a1572:	bb38      	cbnz	r0, 80a15c4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 80a1574:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a1578:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a157a:	a905      	add	r1, sp, #20
 80a157c:	4630      	mov	r0, r6
 80a157e:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a1582:	f7ff fecb 	bl	80a131c <_ZN8particle5ErrorC1EOS0_>
 80a1586:	2014      	movs	r0, #20
 80a1588:	f7fe fd87 	bl	80a009a <_Znwj>
 80a158c:	4604      	mov	r4, r0
 80a158e:	b148      	cbz	r0, 80a15a4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a1590:	2302      	movs	r3, #2
 80a1592:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a1594:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a1596:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a159a:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 80a159c:	4631      	mov	r1, r6
 80a159e:	300c      	adds	r0, #12
 80a15a0:	f7ff febc 	bl	80a131c <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a15a4:	4628      	mov	r0, r5
	: __shared_count(__p)
 80a15a6:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a15a8:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 80a15ac:	f7ff ff32 	bl	80a1414 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a15b0:	4630      	mov	r0, r6
 80a15b2:	f7ff fec0 	bl	80a1336 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a15b6:	a805      	add	r0, sp, #20
 80a15b8:	f7ff febd 	bl	80a1336 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
 80a15bc:	4628      	mov	r0, r5
 80a15be:	b00a      	add	sp, #40	; 0x28
 80a15c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d.size = sizeof(spark_send_event_data);
 80a15c4:	230c      	movs	r3, #12
    spark_send_event_data d = {};
 80a15c6:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a15ca:	2014      	movs	r0, #20
 80a15cc:	e9cd aa08 	strd	sl, sl, [sp, #32]
    d.size = sizeof(spark_send_event_data);
 80a15d0:	9307      	str	r3, [sp, #28]
 80a15d2:	f7fe fd62 	bl	80a009a <_Znwj>
 80a15d6:	4601      	mov	r1, r0
 80a15d8:	b128      	cbz	r0, 80a15e6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a15da:	e9c0 aa01 	strd	sl, sl, [r0, #4]
 80a15de:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a15e2:	f880 a001 	strb.w	sl, [r0, #1]
 80a15e6:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a15e8:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 80a15ea:	f7ff ff13 	bl	80a1414 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 80a15ee:	4b1f      	ldr	r3, [pc, #124]	; (80a166c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x114>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a15f0:	2008      	movs	r0, #8
 80a15f2:	9308      	str	r3, [sp, #32]
 80a15f4:	f7fe fd51 	bl	80a009a <_Znwj>
 80a15f8:	4682      	mov	sl, r0
 80a15fa:	b110      	cbz	r0, 80a1602 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xaa>
 80a15fc:	a903      	add	r1, sp, #12
 80a15fe:	f7ff fec4 	bl	80a138a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a1602:	4642      	mov	r2, r8
 80a1604:	4639      	mov	r1, r7
 80a1606:	4620      	mov	r0, r4
 80a1608:	9600      	str	r6, [sp, #0]
 80a160a:	fa5f f389 	uxtb.w	r3, r9
    d.handler_data = p.dataPtr();
 80a160e:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a1612:	f7ff fcf5 	bl	80a1000 <spark_send_event>
 80a1616:	b9b8      	cbnz	r0, 80a1648 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf0>
	return __atomic_load_n(&_M_i, int(__m));
 80a1618:	9b03      	ldr	r3, [sp, #12]
 80a161a:	785b      	ldrb	r3, [r3, #1]
 80a161c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a1620:	b993      	cbnz	r3, 80a1648 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf0>
 80a1622:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 80a1626:	a905      	add	r1, sp, #20
 80a1628:	a803      	add	r0, sp, #12
 80a162a:	9205      	str	r2, [sp, #20]
 80a162c:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a1630:	f7ff ff14 	bl	80a145c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a1634:	a805      	add	r0, sp, #20
 80a1636:	f7ff fe7e 	bl	80a1336 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a163a:	a805      	add	r0, sp, #20
 80a163c:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a163e:	f7ff fead 	bl	80a139c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 80a1642:	a806      	add	r0, sp, #24
 80a1644:	f7ff f920 	bl	80a0888 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1648:	a903      	add	r1, sp, #12
 80a164a:	a805      	add	r0, sp, #20
 80a164c:	f7ff fe9d 	bl	80a138a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a1650:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a1652:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a1654:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 80a1656:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a1658:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 80a165a:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 80a165c:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 80a165e:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 80a1660:	f7ff f912 	bl	80a0888 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1664:	a804      	add	r0, sp, #16
 80a1666:	f7ff f90f 	bl	80a0888 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 80a166a:	e7a7      	b.n	80a15bc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 80a166c:	080a16ed 	.word	0x080a16ed

080a1670 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
 80a1670:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80a1672:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1674:	4605      	mov	r5, r0
	switch (__op)
 80a1676:	d103      	bne.n	80a1680 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 80a1678:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80a167a:	6003      	str	r3, [r0, #0]
      }
 80a167c:	2000      	movs	r0, #0
 80a167e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
 80a1680:	2a02      	cmp	r2, #2
 80a1682:	d010      	beq.n	80a16a6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 80a1684:	2a03      	cmp	r2, #3
 80a1686:	d1f9      	bne.n	80a167c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 80a1688:	6804      	ldr	r4, [r0, #0]
 80a168a:	2c00      	cmp	r4, #0
 80a168c:	d0f6      	beq.n	80a167c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
 80a168e:	f104 0010 	add.w	r0, r4, #16
 80a1692:	f7ff fe50 	bl	80a1336 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a1696:	4620      	mov	r0, r4
 80a1698:	f7ff fd62 	bl	80a1160 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a169c:	2118      	movs	r1, #24
 80a169e:	4620      	mov	r0, r4
 80a16a0:	f7fe fcff 	bl	80a00a2 <_ZdlPvj>
 80a16a4:	e7ea      	b.n	80a167c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 80a16a6:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 80a16a8:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a16aa:	f7fe fcf6 	bl	80a009a <_Znwj>
 80a16ae:	4604      	mov	r4, r0
 80a16b0:	b150      	cbz	r0, 80a16c8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a16b2:	4631      	mov	r1, r6
 80a16b4:	f7ff fec2 	bl	80a143c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a16b8:	6930      	ldr	r0, [r6, #16]
 80a16ba:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a16be:	b108      	cbz	r0, 80a16c4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
 80a16c0:	f002 fa3a 	bl	80a3b38 <strdup>
        type_(type) {
 80a16c4:	6120      	str	r0, [r4, #16]
 80a16c6:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 80a16c8:	602c      	str	r4, [r5, #0]
	}
 80a16ca:	e7d7      	b.n	80a167c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

080a16cc <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 80a16cc:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a16ce:	2300      	movs	r3, #0
 80a16d0:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 80a16d2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a16d4:	4604      	mov	r4, r0
 80a16d6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a16d8:	b12b      	cbz	r3, 80a16e6 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a16da:	2202      	movs	r2, #2
 80a16dc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a16de:	68eb      	ldr	r3, [r5, #12]
 80a16e0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a16e2:	68ab      	ldr	r3, [r5, #8]
 80a16e4:	60a3      	str	r3, [r4, #8]
    }
 80a16e6:	4620      	mov	r0, r4
 80a16e8:	bd38      	pop	{r3, r4, r5, pc}
	...

080a16ec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a16ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a16ee:	4604      	mov	r4, r0
 80a16f0:	b089      	sub	sp, #36	; 0x24
 80a16f2:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a16f4:	a801      	add	r0, sp, #4
 80a16f6:	4611      	mov	r1, r2
 80a16f8:	f7ff fe50 	bl	80a139c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a16fc:	b1a4      	cbz	r4, 80a1728 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a16fe:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a1700:	b11d      	cbz	r5, 80a170a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 80a1702:	4628      	mov	r0, r5
 80a1704:	f002 fa18 	bl	80a3b38 <strdup>
 80a1708:	4605      	mov	r5, r0
 80a170a:	a801      	add	r0, sp, #4
 80a170c:	a903      	add	r1, sp, #12
        type_(type) {
 80a170e:	9503      	str	r5, [sp, #12]
 80a1710:	f8ad 4010 	strh.w	r4, [sp, #16]
 80a1714:	f7ff fea2 	bl	80a145c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a1718:	a803      	add	r0, sp, #12
 80a171a:	f7ff fe0c 	bl	80a1336 <_ZN8particle5ErrorD1Ev>
 80a171e:	a802      	add	r0, sp, #8
 80a1720:	f7ff f8b2 	bl	80a0888 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a1724:	b009      	add	sp, #36	; 0x24
 80a1726:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a1728:	2301      	movs	r3, #1
      { return _M_ptr; }
 80a172a:	9d01      	ldr	r5, [sp, #4]
 80a172c:	e8d5 2f4f 	ldrexb	r2, [r5]
 80a1730:	2a00      	cmp	r2, #0
 80a1732:	d103      	bne.n	80a173c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 80a1734:	e8c5 3f41 	strexb	r1, r3, [r5]
 80a1738:	2900      	cmp	r1, #0
 80a173a:	d1f7      	bne.n	80a172c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 80a173c:	d1ef      	bne.n	80a171e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 80a173e:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 80a1740:	f3bf 8f5b 	dmb	ish
 80a1744:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a1746:	f3bf 8f5b 	dmb	ish
 80a174a:	1d2b      	adds	r3, r5, #4
 80a174c:	e853 6f00 	ldrex	r6, [r3]
 80a1750:	e843 4200 	strex	r2, r4, [r3]
 80a1754:	2a00      	cmp	r2, #0
 80a1756:	d1f9      	bne.n	80a174c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
 80a1758:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a175c:	2e00      	cmp	r6, #0
 80a175e:	d0de      	beq.n	80a171e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 80a1760:	4620      	mov	r0, r4
 80a1762:	f7ff fbb9 	bl	80a0ed8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a1766:	4607      	mov	r7, r0
 80a1768:	b160      	cbz	r0, 80a1784 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a176a:	4630      	mov	r0, r6
 80a176c:	f105 010c 	add.w	r1, r5, #12
 80a1770:	f7ff fe3f 	bl	80a13f2 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 80a1774:	4630      	mov	r0, r6
 80a1776:	f7ff fcf3 	bl	80a1160 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a177a:	2110      	movs	r1, #16
 80a177c:	4630      	mov	r0, r6
 80a177e:	f7fe fc90 	bl	80a00a2 <_ZdlPvj>
 80a1782:	e7cc      	b.n	80a171e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a1784:	4631      	mov	r1, r6
 80a1786:	a803      	add	r0, sp, #12
 80a1788:	f7ff ffa0 	bl	80a16cc <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a178c:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a178e:	2010      	movs	r0, #16
 80a1790:	f88d 301c 	strb.w	r3, [sp, #28]
 80a1794:	f7fe fc81 	bl	80a009a <_Znwj>
 80a1798:	4605      	mov	r5, r0
 80a179a:	b1d0      	cbz	r0, 80a17d2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
 80a179c:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a179e:	2014      	movs	r0, #20
 80a17a0:	f7fe fc7b 	bl	80a009a <_Znwj>
 80a17a4:	4604      	mov	r4, r0
 80a17a6:	b178      	cbz	r0, 80a17c8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
	std::swap(_M_functor, __x._M_functor);
 80a17a8:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a17aa:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a17ac:	a803      	add	r0, sp, #12
 80a17ae:	f7ff fce0 	bl	80a1172 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a17b2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a17b4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a17b6:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a17b8:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 80a17ba:	9205      	str	r2, [sp, #20]
 80a17bc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a17be:	60e3      	str	r3, [r4, #12]
 80a17c0:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 80a17c4:	9206      	str	r2, [sp, #24]
 80a17c6:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 80a17c8:	4b06      	ldr	r3, [pc, #24]	; (80a17e4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a17ca:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a17cc:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a17ce:	4b06      	ldr	r3, [pc, #24]	; (80a17e8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 80a17d0:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 80a17d2:	a803      	add	r0, sp, #12
 80a17d4:	f7ff fcc4 	bl	80a1160 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a17d8:	2200      	movs	r2, #0
 80a17da:	4629      	mov	r1, r5
 80a17dc:	4803      	ldr	r0, [pc, #12]	; (80a17ec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
 80a17de:	f7ff fb83 	bl	80a0ee8 <application_thread_invoke>
 80a17e2:	e7c7      	b.n	80a1774 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
 80a17e4:	080a1405 	.word	0x080a1405
 80a17e8:	080a17f1 	.word	0x080a17f1
 80a17ec:	080a1b35 	.word	0x080a1b35

080a17f0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
 80a17f0:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80a17f2:	b570      	push	{r4, r5, r6, lr}
 80a17f4:	4604      	mov	r4, r0
	switch (__op)
 80a17f6:	d103      	bne.n	80a1800 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 80a17f8:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80a17fa:	6003      	str	r3, [r0, #0]
      }
 80a17fc:	2000      	movs	r0, #0
 80a17fe:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
 80a1800:	2a02      	cmp	r2, #2
 80a1802:	d00c      	beq.n	80a181e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 80a1804:	2a03      	cmp	r2, #3
 80a1806:	d1f9      	bne.n	80a17fc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 80a1808:	6804      	ldr	r4, [r0, #0]
 80a180a:	2c00      	cmp	r4, #0
 80a180c:	d0f6      	beq.n	80a17fc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
 80a180e:	4620      	mov	r0, r4
 80a1810:	f7ff fca6 	bl	80a1160 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a1814:	2114      	movs	r1, #20
 80a1816:	4620      	mov	r0, r4
 80a1818:	f7fe fc43 	bl	80a00a2 <_ZdlPvj>
 80a181c:	e7ee      	b.n	80a17fc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 80a181e:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 80a1820:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a1822:	f7fe fc3a 	bl	80a009a <_Znwj>
 80a1826:	4605      	mov	r5, r0
 80a1828:	b120      	cbz	r0, 80a1834 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
 80a182a:	4631      	mov	r1, r6
 80a182c:	f7ff ff4e 	bl	80a16cc <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a1830:	7c33      	ldrb	r3, [r6, #16]
 80a1832:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 80a1834:	6025      	str	r5, [r4, #0]
	}
 80a1836:	e7e1      	b.n	80a17fc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

080a1838 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a1838:	4770      	bx	lr

080a183a <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a183a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a183c:	460e      	mov	r6, r1
 80a183e:	2400      	movs	r4, #0
 80a1840:	f100 0708 	add.w	r7, r0, #8
 80a1844:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a1846:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a184a:	220a      	movs	r2, #10
 80a184c:	4630      	mov	r0, r6
 80a184e:	f7ff fc52 	bl	80a10f6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1852:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1854:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a1856:	d101      	bne.n	80a185c <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a1858:	4620      	mov	r0, r4
 80a185a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a185c:	2c00      	cmp	r4, #0
 80a185e:	d0f2      	beq.n	80a1846 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a1860:	212e      	movs	r1, #46	; 0x2e
 80a1862:	4630      	mov	r0, r6
 80a1864:	f7ff fc44 	bl	80a10f0 <_ZN5Print5printEc>
 80a1868:	4404      	add	r4, r0
 80a186a:	e7ec      	b.n	80a1846 <_ZNK9IPAddress7printToER5Print+0xc>

080a186c <_ZN9IPAddressD0Ev>:
 80a186c:	b510      	push	{r4, lr}
 80a186e:	4604      	mov	r4, r0
 80a1870:	2118      	movs	r1, #24
 80a1872:	f7fe fc16 	bl	80a00a2 <_ZdlPvj>
 80a1876:	4620      	mov	r0, r4
 80a1878:	bd10      	pop	{r4, pc}
	...

080a187c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a187c:	b510      	push	{r4, lr}
 80a187e:	4604      	mov	r4, r0
 80a1880:	4b04      	ldr	r3, [pc, #16]	; (80a1894 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a1882:	2211      	movs	r2, #17
 80a1884:	2100      	movs	r1, #0
 80a1886:	f840 3b04 	str.w	r3, [r0], #4
 80a188a:	f002 f91f 	bl	80a3acc <memset>
}
 80a188e:	4620      	mov	r0, r4
 80a1890:	bd10      	pop	{r4, pc}
 80a1892:	bf00      	nop
 80a1894:	080a3d44 	.word	0x080a3d44

080a1898 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a1898:	4603      	mov	r3, r0
 80a189a:	4a07      	ldr	r2, [pc, #28]	; (80a18b8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a189c:	b510      	push	{r4, lr}
 80a189e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a18a2:	f101 0210 	add.w	r2, r1, #16
 80a18a6:	f851 4b04 	ldr.w	r4, [r1], #4
 80a18aa:	4291      	cmp	r1, r2
 80a18ac:	f843 4b04 	str.w	r4, [r3], #4
 80a18b0:	d1f9      	bne.n	80a18a6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a18b2:	780a      	ldrb	r2, [r1, #0]
 80a18b4:	701a      	strb	r2, [r3, #0]
}
 80a18b6:	bd10      	pop	{r4, pc}
 80a18b8:	080a3d44 	.word	0x080a3d44

080a18bc <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t addr)
 80a18bc:	4a02      	ldr	r2, [pc, #8]	; (80a18c8 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = addr;
 80a18be:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a18c2:	2204      	movs	r2, #4
 80a18c4:	7502      	strb	r2, [r0, #20]
}
 80a18c6:	4770      	bx	lr
 80a18c8:	080a3d44 	.word	0x080a3d44

080a18cc <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a18cc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a18ce:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a18d2:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a18d6:	2304      	movs	r3, #4
 80a18d8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a18dc:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a18e0:	6044      	str	r4, [r0, #4]
 80a18e2:	7503      	strb	r3, [r0, #20]
}
 80a18e4:	bd10      	pop	{r4, pc}
	...

080a18e8 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a18e8:	b513      	push	{r0, r1, r4, lr}
 80a18ea:	4c04      	ldr	r4, [pc, #16]	; (80a18fc <_ZN9IPAddressC1Ehhhh+0x14>)
 80a18ec:	6004      	str	r4, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a18ee:	f89d 4010 	ldrb.w	r4, [sp, #16]
 80a18f2:	9400      	str	r4, [sp, #0]
 80a18f4:	f7ff ffea 	bl	80a18cc <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a18f8:	b002      	add	sp, #8
 80a18fa:	bd10      	pop	{r4, pc}
 80a18fc:	080a3d44 	.word	0x080a3d44

080a1900 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1900:	7441      	strb	r1, [r0, #17]
}
 80a1902:	4770      	bx	lr

080a1904 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1904:	4770      	bx	lr

080a1906 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a1906:	4770      	bx	lr

080a1908 <_ZN9USBSerial4readEv>:
{
 80a1908:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a190a:	2100      	movs	r1, #0
 80a190c:	7c00      	ldrb	r0, [r0, #16]
 80a190e:	f7ff fabb 	bl	80a0e88 <HAL_USB_USART_Receive_Data>
}
 80a1912:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1916:	bd08      	pop	{r3, pc}

080a1918 <_ZN9USBSerial4peekEv>:
{
 80a1918:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a191a:	2101      	movs	r1, #1
 80a191c:	7c00      	ldrb	r0, [r0, #16]
 80a191e:	f7ff fab3 	bl	80a0e88 <HAL_USB_USART_Receive_Data>
}
 80a1922:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1926:	bd08      	pop	{r3, pc}

080a1928 <_ZN9USBSerial17availableForWriteEv>:
{
 80a1928:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a192a:	7c00      	ldrb	r0, [r0, #16]
 80a192c:	f7ff faa4 	bl	80a0e78 <HAL_USB_USART_Available_Data_For_Write>
}
 80a1930:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1934:	bd08      	pop	{r3, pc}

080a1936 <_ZN9USBSerial9availableEv>:
{
 80a1936:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a1938:	7c00      	ldrb	r0, [r0, #16]
 80a193a:	f7ff fa95 	bl	80a0e68 <HAL_USB_USART_Available_Data>
}
 80a193e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1942:	bd08      	pop	{r3, pc}

080a1944 <_ZN9USBSerial5writeEh>:
{
 80a1944:	b538      	push	{r3, r4, r5, lr}
 80a1946:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1948:	7c00      	ldrb	r0, [r0, #16]
{
 80a194a:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a194c:	f7ff fa94 	bl	80a0e78 <HAL_USB_USART_Available_Data_For_Write>
 80a1950:	2800      	cmp	r0, #0
 80a1952:	dc01      	bgt.n	80a1958 <_ZN9USBSerial5writeEh+0x14>
 80a1954:	7c60      	ldrb	r0, [r4, #17]
 80a1956:	b128      	cbz	r0, 80a1964 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a1958:	4629      	mov	r1, r5
 80a195a:	7c20      	ldrb	r0, [r4, #16]
 80a195c:	f7ff fa9c 	bl	80a0e98 <HAL_USB_USART_Send_Data>
 80a1960:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a1964:	bd38      	pop	{r3, r4, r5, pc}

080a1966 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a1966:	7c00      	ldrb	r0, [r0, #16]
 80a1968:	f7ff ba9e 	b.w	80a0ea8 <HAL_USB_USART_Flush_Data>

080a196c <_ZN9USBSerialD0Ev>:
 80a196c:	b510      	push	{r4, lr}
 80a196e:	4604      	mov	r4, r0
 80a1970:	2114      	movs	r1, #20
 80a1972:	f7fe fb96 	bl	80a00a2 <_ZdlPvj>
 80a1976:	4620      	mov	r0, r4
 80a1978:	bd10      	pop	{r4, pc}

080a197a <__tcf_1>:
 80a197a:	4770      	bx	lr

080a197c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a197c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a197e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1982:	4604      	mov	r4, r0
 80a1984:	4608      	mov	r0, r1
 80a1986:	2100      	movs	r1, #0
 80a1988:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a198c:	4b04      	ldr	r3, [pc, #16]	; (80a19a0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a198e:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a1990:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a1992:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a1994:	4611      	mov	r1, r2
  _blocking = true;
 80a1996:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a1998:	f7ff fa56 	bl	80a0e48 <HAL_USB_USART_Init>
}
 80a199c:	4620      	mov	r0, r4
 80a199e:	bd10      	pop	{r4, pc}
 80a19a0:	080a3d58 	.word	0x080a3d58

080a19a4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a19a4:	2200      	movs	r2, #0
 80a19a6:	7c00      	ldrb	r0, [r0, #16]
 80a19a8:	f7ff ba56 	b.w	80a0e58 <HAL_USB_USART_Begin>

080a19ac <_Z19acquireSerialBufferv>:
{
 80a19ac:	b510      	push	{r4, lr}
 80a19ae:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 80a19b0:	2214      	movs	r2, #20
 80a19b2:	2100      	movs	r1, #0
 80a19b4:	f002 f88a 	bl	80a3acc <memset>
  conf.rx_buffer = serial_rx_buffer;
 80a19b8:	4b05      	ldr	r3, [pc, #20]	; (80a19d0 <_Z19acquireSerialBufferv+0x24>)
}
 80a19ba:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80a19bc:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a19be:	4b05      	ldr	r3, [pc, #20]	; (80a19d4 <_Z19acquireSerialBufferv+0x28>)
 80a19c0:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a19c2:	f240 1301 	movw	r3, #257	; 0x101
 80a19c6:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a19c8:	2381      	movs	r3, #129	; 0x81
 80a19ca:	8223      	strh	r3, [r4, #16]
}
 80a19cc:	bd10      	pop	{r4, pc}
 80a19ce:	bf00      	nop
 80a19d0:	2000211c 	.word	0x2000211c
 80a19d4:	2000221d 	.word	0x2000221d

080a19d8 <_Z16_fetch_usbserialv>:
{
 80a19d8:	b530      	push	{r4, r5, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a19da:	4d0e      	ldr	r5, [pc, #56]	; (80a1a14 <_Z16_fetch_usbserialv+0x3c>)
{
 80a19dc:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a19de:	a801      	add	r0, sp, #4
 80a19e0:	f7ff ffe4 	bl	80a19ac <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a19e4:	7829      	ldrb	r1, [r5, #0]
 80a19e6:	f3bf 8f5b 	dmb	ish
 80a19ea:	f011 0401 	ands.w	r4, r1, #1
 80a19ee:	d10e      	bne.n	80a1a0e <_Z16_fetch_usbserialv+0x36>
 80a19f0:	4628      	mov	r0, r5
 80a19f2:	f7fe fb58 	bl	80a00a6 <__cxa_guard_acquire>
 80a19f6:	b150      	cbz	r0, 80a1a0e <_Z16_fetch_usbserialv+0x36>
 80a19f8:	4621      	mov	r1, r4
 80a19fa:	aa01      	add	r2, sp, #4
 80a19fc:	4806      	ldr	r0, [pc, #24]	; (80a1a18 <_Z16_fetch_usbserialv+0x40>)
 80a19fe:	f7ff ffbd 	bl	80a197c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1a02:	4628      	mov	r0, r5
 80a1a04:	f7fe fb54 	bl	80a00b0 <__cxa_guard_release>
 80a1a08:	4804      	ldr	r0, [pc, #16]	; (80a1a1c <_Z16_fetch_usbserialv+0x44>)
 80a1a0a:	f002 f831 	bl	80a3a70 <atexit>
	return _usbserial;
}
 80a1a0e:	4802      	ldr	r0, [pc, #8]	; (80a1a18 <_Z16_fetch_usbserialv+0x40>)
 80a1a10:	b007      	add	sp, #28
 80a1a12:	bd30      	pop	{r4, r5, pc}
 80a1a14:	200020ec 	.word	0x200020ec
 80a1a18:	200020f4 	.word	0x200020f4
 80a1a1c:	080a1905 	.word	0x080a1905

080a1a20 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a1a20:	b510      	push	{r4, lr}
 80a1a22:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 80a1a24:	2214      	movs	r2, #20
 80a1a26:	2100      	movs	r1, #0
 80a1a28:	f002 f850 	bl	80a3acc <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a1a2c:	4b05      	ldr	r3, [pc, #20]	; (80a1a44 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1a2e:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80a1a30:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a1a32:	4b05      	ldr	r3, [pc, #20]	; (80a1a48 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a1a34:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1a36:	f240 1301 	movw	r3, #257	; 0x101
 80a1a3a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1a3c:	2381      	movs	r3, #129	; 0x81
 80a1a3e:	8223      	strh	r3, [r4, #16]
}
 80a1a40:	bd10      	pop	{r4, pc}
 80a1a42:	bf00      	nop
 80a1a44:	2000229e 	.word	0x2000229e
 80a1a48:	2000239f 	.word	0x2000239f

080a1a4c <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a1a4c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1a4e:	4c0e      	ldr	r4, [pc, #56]	; (80a1a88 <_Z17_fetch_usbserial1v+0x3c>)
{
 80a1a50:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a1a52:	a801      	add	r0, sp, #4
 80a1a54:	f7ff ffe4 	bl	80a1a20 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1a58:	7823      	ldrb	r3, [r4, #0]
 80a1a5a:	f3bf 8f5b 	dmb	ish
 80a1a5e:	07db      	lsls	r3, r3, #31
 80a1a60:	d40e      	bmi.n	80a1a80 <_Z17_fetch_usbserial1v+0x34>
 80a1a62:	4620      	mov	r0, r4
 80a1a64:	f7fe fb1f 	bl	80a00a6 <__cxa_guard_acquire>
 80a1a68:	b150      	cbz	r0, 80a1a80 <_Z17_fetch_usbserial1v+0x34>
 80a1a6a:	2101      	movs	r1, #1
 80a1a6c:	aa01      	add	r2, sp, #4
 80a1a6e:	4807      	ldr	r0, [pc, #28]	; (80a1a8c <_Z17_fetch_usbserial1v+0x40>)
 80a1a70:	f7ff ff84 	bl	80a197c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1a74:	4620      	mov	r0, r4
 80a1a76:	f7fe fb1b 	bl	80a00b0 <__cxa_guard_release>
 80a1a7a:	4805      	ldr	r0, [pc, #20]	; (80a1a90 <_Z17_fetch_usbserial1v+0x44>)
 80a1a7c:	f001 fff8 	bl	80a3a70 <atexit>
  return _usbserial1;
}
 80a1a80:	4802      	ldr	r0, [pc, #8]	; (80a1a8c <_Z17_fetch_usbserial1v+0x40>)
 80a1a82:	b006      	add	sp, #24
 80a1a84:	bd10      	pop	{r4, pc}
 80a1a86:	bf00      	nop
 80a1a88:	200020f0 	.word	0x200020f0
 80a1a8c:	20002108 	.word	0x20002108
 80a1a90:	080a197b 	.word	0x080a197b

080a1a94 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 80a1a94:	4770      	bx	lr

080a1a96 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1a96:	7441      	strb	r1, [r0, #17]
}
 80a1a98:	4770      	bx	lr

080a1a9a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 80a1a9a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a1a9c:	7c00      	ldrb	r0, [r0, #16]
 80a1a9e:	f7ff f9c3 	bl	80a0e28 <hal_usart_available_data_for_write>
}
 80a1aa2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1aa6:	bd08      	pop	{r3, pc}

080a1aa8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a1aa8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a1aaa:	7c00      	ldrb	r0, [r0, #16]
 80a1aac:	f7ff f99c 	bl	80a0de8 <hal_usart_available>
}
 80a1ab0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1ab4:	bd08      	pop	{r3, pc}

080a1ab6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a1ab6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a1ab8:	7c00      	ldrb	r0, [r0, #16]
 80a1aba:	f7ff f9a5 	bl	80a0e08 <hal_usart_peek>
}
 80a1abe:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1ac2:	bd08      	pop	{r3, pc}

080a1ac4 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a1ac4:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a1ac6:	7c00      	ldrb	r0, [r0, #16]
 80a1ac8:	f7ff f996 	bl	80a0df8 <hal_usart_read>
}
 80a1acc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1ad0:	bd08      	pop	{r3, pc}

080a1ad2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80a1ad2:	7c00      	ldrb	r0, [r0, #16]
 80a1ad4:	f7ff b9a0 	b.w	80a0e18 <hal_usart_flush>

080a1ad8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a1ad8:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a1ada:	7c46      	ldrb	r6, [r0, #17]
{
 80a1adc:	4604      	mov	r4, r0
 80a1ade:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a1ae0:	b12e      	cbz	r6, 80a1aee <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 80a1ae2:	4629      	mov	r1, r5
 80a1ae4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a1ae6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a1aea:	f7ff b975 	b.w	80a0dd8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a1aee:	7c00      	ldrb	r0, [r0, #16]
 80a1af0:	f7ff f99a 	bl	80a0e28 <hal_usart_available_data_for_write>
 80a1af4:	2800      	cmp	r0, #0
 80a1af6:	dcf4      	bgt.n	80a1ae2 <_ZN11USARTSerial5writeEh+0xa>
}
 80a1af8:	4630      	mov	r0, r6
 80a1afa:	bd70      	pop	{r4, r5, r6, pc}

080a1afc <_ZN11USARTSerialD0Ev>:
 80a1afc:	b510      	push	{r4, lr}
 80a1afe:	4604      	mov	r4, r0
 80a1b00:	2114      	movs	r1, #20
 80a1b02:	f7fe face 	bl	80a00a2 <_ZdlPvj>
 80a1b06:	4620      	mov	r0, r4
 80a1b08:	bd10      	pop	{r4, pc}
	...

080a1b0c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 80a1b0c:	b510      	push	{r4, lr}
 80a1b0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1b12:	4604      	mov	r4, r0
 80a1b14:	4608      	mov	r0, r1
 80a1b16:	4611      	mov	r1, r2
 80a1b18:	2200      	movs	r2, #0
 80a1b1a:	e9c4 2301 	strd	r2, r3, [r4, #4]
 80a1b1e:	4b04      	ldr	r3, [pc, #16]	; (80a1b30 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 80a1b20:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 80a1b22:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a1b24:	2301      	movs	r3, #1
 80a1b26:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 80a1b28:	f7ff f986 	bl	80a0e38 <hal_usart_init_ex>
}
 80a1b2c:	4620      	mov	r0, r4
 80a1b2e:	bd10      	pop	{r4, pc}
 80a1b30:	080a3d88 	.word	0x080a3d88

080a1b34 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a1b34:	b510      	push	{r4, lr}
      if (_M_empty())
 80a1b36:	6883      	ldr	r3, [r0, #8]
 80a1b38:	4604      	mov	r4, r0
 80a1b3a:	b90b      	cbnz	r3, 80a1b40 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a1b3c:	f000 f92c 	bl	80a1d98 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1b40:	68c3      	ldr	r3, [r0, #12]
 80a1b42:	4798      	blx	r3
      if (_M_manager)
 80a1b44:	68a3      	ldr	r3, [r4, #8]
 80a1b46:	b11b      	cbz	r3, 80a1b50 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a1b48:	2203      	movs	r2, #3
 80a1b4a:	4621      	mov	r1, r4
 80a1b4c:	4620      	mov	r0, r4
 80a1b4e:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a1b50:	4620      	mov	r0, r4
}
 80a1b52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 80a1b56:	2110      	movs	r1, #16
 80a1b58:	f7fe baa3 	b.w	80a00a2 <_ZdlPvj>

080a1b5c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a1b5c:	2200      	movs	r2, #0
 80a1b5e:	6840      	ldr	r0, [r0, #4]
 80a1b60:	4611      	mov	r1, r2
 80a1b62:	f7ff b9f5 	b.w	80a0f50 <network_ready>

080a1b66 <_ZN5spark9WiFiClass7resolveEPKc>:
    bool clearCredentials(void) {
        return network_clear_credentials(*this, 0, NULL, NULL);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a1b66:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1b68:	4615      	mov	r5, r2
 80a1b6a:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a1b6c:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a1b6e:	460e      	mov	r6, r1
 80a1b70:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a1b72:	2100      	movs	r1, #0
 80a1b74:	a803      	add	r0, sp, #12
 80a1b76:	f001 ffa9 	bl	80a3acc <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1b7a:	4628      	mov	r0, r5
 80a1b7c:	f001 fff7 	bl	80a3b6e <strlen>
 80a1b80:	2700      	movs	r7, #0
 80a1b82:	b281      	uxth	r1, r0
 80a1b84:	6873      	ldr	r3, [r6, #4]
 80a1b86:	4628      	mov	r0, r5
 80a1b88:	9700      	str	r7, [sp, #0]
 80a1b8a:	aa03      	add	r2, sp, #12
 80a1b8c:	f7ff f994 	bl	80a0eb8 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1b90:	b130      	cbz	r0, 80a1ba0 <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a1b92:	4639      	mov	r1, r7
 80a1b94:	4620      	mov	r0, r4
 80a1b96:	f7ff fe91 	bl	80a18bc <_ZN9IPAddressC1Em>
    }
 80a1b9a:	4620      	mov	r0, r4
 80a1b9c:	b009      	add	sp, #36	; 0x24
 80a1b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1ba0:	4620      	mov	r0, r4
 80a1ba2:	a903      	add	r1, sp, #12
 80a1ba4:	f7ff fe78 	bl	80a1898 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a1ba8:	e7f7      	b.n	80a1b9a <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a1baa <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a1baa:	2200      	movs	r2, #0
 80a1bac:	6840      	ldr	r0, [r0, #4]
 80a1bae:	4611      	mov	r1, r2
 80a1bb0:	f7ff b9ee 	b.w	80a0f90 <network_listening>

080a1bb4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a1bb4:	2200      	movs	r2, #0
 80a1bb6:	6840      	ldr	r0, [r0, #4]
 80a1bb8:	4611      	mov	r1, r2
 80a1bba:	f7ff b9f9 	b.w	80a0fb0 <network_get_listen_timeout>

080a1bbe <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a1bbe:	2200      	movs	r2, #0
 80a1bc0:	6840      	ldr	r0, [r0, #4]
 80a1bc2:	f7ff b9ed 	b.w	80a0fa0 <network_set_listen_timeout>

080a1bc6 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a1bc6:	2200      	movs	r2, #0
 80a1bc8:	6840      	ldr	r0, [r0, #4]
 80a1bca:	f081 0101 	eor.w	r1, r1, #1
 80a1bce:	f7ff b9d7 	b.w	80a0f80 <network_listen>

080a1bd2 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a1bd2:	2300      	movs	r3, #0
 80a1bd4:	6840      	ldr	r0, [r0, #4]
 80a1bd6:	461a      	mov	r2, r3
 80a1bd8:	4619      	mov	r1, r3
 80a1bda:	f7ff b9c9 	b.w	80a0f70 <network_off>

080a1bde <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a1bde:	2200      	movs	r2, #0
 80a1be0:	6840      	ldr	r0, [r0, #4]
 80a1be2:	4611      	mov	r1, r2
 80a1be4:	f7ff b9a4 	b.w	80a0f30 <network_connecting>

080a1be8 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a1be8:	2200      	movs	r2, #0
 80a1bea:	2102      	movs	r1, #2
 80a1bec:	6840      	ldr	r0, [r0, #4]
 80a1bee:	f7ff b9a7 	b.w	80a0f40 <network_disconnect>

080a1bf2 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a1bf2:	2300      	movs	r3, #0
 80a1bf4:	6840      	ldr	r0, [r0, #4]
 80a1bf6:	461a      	mov	r2, r3
 80a1bf8:	f7ff b992 	b.w	80a0f20 <network_connect>

080a1bfc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a1bfc:	2204      	movs	r2, #4
 80a1bfe:	4b02      	ldr	r3, [pc, #8]	; (80a1c08 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a1c00:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a1c02:	4a02      	ldr	r2, [pc, #8]	; (80a1c0c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a1c04:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a1c06:	4770      	bx	lr
 80a1c08:	20002420 	.word	0x20002420
 80a1c0c:	080a3db8 	.word	0x080a3db8

080a1c10 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a1c10:	2300      	movs	r3, #0
 80a1c12:	6840      	ldr	r0, [r0, #4]
 80a1c14:	461a      	mov	r2, r3
 80a1c16:	f7ff b983 	b.w	80a0f20 <network_connect>

080a1c1a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a1c1a:	2200      	movs	r2, #0
 80a1c1c:	2102      	movs	r1, #2
 80a1c1e:	6840      	ldr	r0, [r0, #4]
 80a1c20:	f7ff b98e 	b.w	80a0f40 <network_disconnect>

080a1c24 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a1c24:	2200      	movs	r2, #0
 80a1c26:	6840      	ldr	r0, [r0, #4]
 80a1c28:	4611      	mov	r1, r2
 80a1c2a:	f7ff b981 	b.w	80a0f30 <network_connecting>

080a1c2e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a1c2e:	2200      	movs	r2, #0
 80a1c30:	6840      	ldr	r0, [r0, #4]
 80a1c32:	4611      	mov	r1, r2
 80a1c34:	f7ff b98c 	b.w	80a0f50 <network_ready>

080a1c38 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a1c38:	2300      	movs	r3, #0
 80a1c3a:	6840      	ldr	r0, [r0, #4]
 80a1c3c:	461a      	mov	r2, r3
 80a1c3e:	4619      	mov	r1, r3
 80a1c40:	f7ff b98e 	b.w	80a0f60 <network_on>

080a1c44 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a1c44:	2300      	movs	r3, #0
 80a1c46:	6840      	ldr	r0, [r0, #4]
 80a1c48:	461a      	mov	r2, r3
 80a1c4a:	4619      	mov	r1, r3
 80a1c4c:	f7ff b990 	b.w	80a0f70 <network_off>

080a1c50 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a1c50:	2100      	movs	r1, #0
 80a1c52:	6840      	ldr	r0, [r0, #4]
 80a1c54:	f7ff b9b4 	b.w	80a0fc0 <network_is_on>

080a1c58 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a1c58:	2100      	movs	r1, #0
 80a1c5a:	6840      	ldr	r0, [r0, #4]
 80a1c5c:	f7ff b9b8 	b.w	80a0fd0 <network_is_off>

080a1c60 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a1c60:	2200      	movs	r2, #0
 80a1c62:	6840      	ldr	r0, [r0, #4]
 80a1c64:	f081 0101 	eor.w	r1, r1, #1
 80a1c68:	f7ff b98a 	b.w	80a0f80 <network_listen>

080a1c6c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a1c6c:	2200      	movs	r2, #0
 80a1c6e:	6840      	ldr	r0, [r0, #4]
 80a1c70:	f7ff b996 	b.w	80a0fa0 <network_set_listen_timeout>

080a1c74 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a1c74:	2200      	movs	r2, #0
 80a1c76:	6840      	ldr	r0, [r0, #4]
 80a1c78:	4611      	mov	r1, r2
 80a1c7a:	f7ff b999 	b.w	80a0fb0 <network_get_listen_timeout>

080a1c7e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a1c7e:	2200      	movs	r2, #0
 80a1c80:	6840      	ldr	r0, [r0, #4]
 80a1c82:	4611      	mov	r1, r2
 80a1c84:	f7ff b984 	b.w	80a0f90 <network_listening>

080a1c88 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a1c88:	b570      	push	{r4, r5, r6, lr}
 80a1c8a:	4615      	mov	r5, r2
 80a1c8c:	b08e      	sub	sp, #56	; 0x38
 80a1c8e:	4604      	mov	r4, r0
    IPAddress addr;
 80a1c90:	a808      	add	r0, sp, #32
 80a1c92:	f7ff fdf3 	bl	80a187c <_ZN9IPAddressC1Ev>
        HAL_IPAddress ip = {};
 80a1c96:	2211      	movs	r2, #17
 80a1c98:	2100      	movs	r1, #0
 80a1c9a:	a803      	add	r0, sp, #12
 80a1c9c:	f001 ff16 	bl	80a3acc <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1ca0:	2600      	movs	r6, #0
 80a1ca2:	4628      	mov	r0, r5
 80a1ca4:	f001 ff63 	bl	80a3b6e <strlen>
 80a1ca8:	4b0a      	ldr	r3, [pc, #40]	; (80a1cd4 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a1caa:	9600      	str	r6, [sp, #0]
 80a1cac:	b281      	uxth	r1, r0
 80a1cae:	685b      	ldr	r3, [r3, #4]
 80a1cb0:	4628      	mov	r0, r5
 80a1cb2:	aa03      	add	r2, sp, #12
 80a1cb4:	f7ff f900 	bl	80a0eb8 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1cb8:	b130      	cbz	r0, 80a1cc8 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a1cba:	4631      	mov	r1, r6
 80a1cbc:	4620      	mov	r0, r4
 80a1cbe:	f7ff fdfd 	bl	80a18bc <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a1cc2:	4620      	mov	r0, r4
 80a1cc4:	b00e      	add	sp, #56	; 0x38
 80a1cc6:	bd70      	pop	{r4, r5, r6, pc}
 80a1cc8:	4620      	mov	r0, r4
 80a1cca:	a903      	add	r1, sp, #12
 80a1ccc:	f7ff fde4 	bl	80a1898 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a1cd0:	e7f7      	b.n	80a1cc2 <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a1cd2:	bf00      	nop
 80a1cd4:	20002420 	.word	0x20002420

080a1cd8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a1cd8:	4b02      	ldr	r3, [pc, #8]	; (80a1ce4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a1cda:	4a03      	ldr	r2, [pc, #12]	; (80a1ce8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a1cdc:	601a      	str	r2, [r3, #0]
 80a1cde:	2200      	movs	r2, #0
 80a1ce0:	605a      	str	r2, [r3, #4]

} // spark
 80a1ce2:	4770      	bx	lr
 80a1ce4:	20002428 	.word	0x20002428
 80a1ce8:	080a3df4 	.word	0x080a3df4

080a1cec <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 80a1cec:	4770      	bx	lr
	...

080a1cf0 <_Z20acquireSerial1Bufferv>:
{
 80a1cf0:	b570      	push	{r4, r5, r6, lr}
    hal_usart_buffer_config_t config = {
 80a1cf2:	2514      	movs	r5, #20
{
 80a1cf4:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 80a1cf6:	462a      	mov	r2, r5
 80a1cf8:	2100      	movs	r1, #0
 80a1cfa:	f001 fee7 	bl	80a3acc <memset>
 80a1cfe:	8025      	strh	r5, [r4, #0]
 80a1d00:	2580      	movs	r5, #128	; 0x80
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a1d02:	4e07      	ldr	r6, [pc, #28]	; (80a1d20 <_Z20acquireSerial1Bufferv+0x30>)
 80a1d04:	4628      	mov	r0, r5
 80a1d06:	4631      	mov	r1, r6
    hal_usart_buffer_config_t config = {
 80a1d08:	8125      	strh	r5, [r4, #8]
 80a1d0a:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a1d0c:	f000 f83c 	bl	80a1d88 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a1d10:	4631      	mov	r1, r6
    };
 80a1d12:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a1d14:	4628      	mov	r0, r5
 80a1d16:	f000 f837 	bl	80a1d88 <_ZnajRKSt9nothrow_t>
    };
 80a1d1a:	60e0      	str	r0, [r4, #12]
}
 80a1d1c:	4620      	mov	r0, r4
 80a1d1e:	bd70      	pop	{r4, r5, r6, pc}
 80a1d20:	080a3e28 	.word	0x080a3e28

080a1d24 <_Z22__fetch_global_Serial1v>:
{
 80a1d24:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 80a1d26:	4d0e      	ldr	r5, [pc, #56]	; (80a1d60 <_Z22__fetch_global_Serial1v+0x3c>)
{
 80a1d28:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 80a1d2a:	7829      	ldrb	r1, [r5, #0]
 80a1d2c:	f3bf 8f5b 	dmb	ish
 80a1d30:	f011 0401 	ands.w	r4, r1, #1
 80a1d34:	d111      	bne.n	80a1d5a <_Z22__fetch_global_Serial1v+0x36>
 80a1d36:	4628      	mov	r0, r5
 80a1d38:	f7fe f9b5 	bl	80a00a6 <__cxa_guard_acquire>
 80a1d3c:	b168      	cbz	r0, 80a1d5a <_Z22__fetch_global_Serial1v+0x36>
 80a1d3e:	a801      	add	r0, sp, #4
 80a1d40:	f7ff ffd6 	bl	80a1cf0 <_Z20acquireSerial1Bufferv>
 80a1d44:	4621      	mov	r1, r4
 80a1d46:	aa01      	add	r2, sp, #4
 80a1d48:	4806      	ldr	r0, [pc, #24]	; (80a1d64 <_Z22__fetch_global_Serial1v+0x40>)
 80a1d4a:	f7ff fedf 	bl	80a1b0c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 80a1d4e:	4628      	mov	r0, r5
 80a1d50:	f7fe f9ae 	bl	80a00b0 <__cxa_guard_release>
 80a1d54:	4804      	ldr	r0, [pc, #16]	; (80a1d68 <_Z22__fetch_global_Serial1v+0x44>)
 80a1d56:	f001 fe8b 	bl	80a3a70 <atexit>
    return serial1;
}
 80a1d5a:	4802      	ldr	r0, [pc, #8]	; (80a1d64 <_Z22__fetch_global_Serial1v+0x40>)
 80a1d5c:	b007      	add	sp, #28
 80a1d5e:	bd30      	pop	{r4, r5, pc}
 80a1d60:	20002430 	.word	0x20002430
 80a1d64:	20002434 	.word	0x20002434
 80a1d68:	080a1ced 	.word	0x080a1ced

080a1d6c <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a1d6c:	2300      	movs	r3, #0
 80a1d6e:	b507      	push	{r0, r1, r2, lr}
 80a1d70:	461a      	mov	r2, r3
 80a1d72:	4619      	mov	r1, r3
 80a1d74:	9300      	str	r3, [sp, #0]
 80a1d76:	4803      	ldr	r0, [pc, #12]	; (80a1d84 <_GLOBAL__sub_I_INADDR_NONE+0x18>)
 80a1d78:	f7ff fdb6 	bl	80a18e8 <_ZN9IPAddressC1Ehhhh>
 80a1d7c:	b003      	add	sp, #12
 80a1d7e:	f85d fb04 	ldr.w	pc, [sp], #4
 80a1d82:	bf00      	nop
 80a1d84:	2000244c 	.word	0x2000244c

080a1d88 <_ZnajRKSt9nothrow_t>:
 80a1d88:	f7fe b989 	b.w	80a009e <_Znaj>

080a1d8c <_ZSt17__throw_bad_allocv>:
 80a1d8c:	b508      	push	{r3, lr}
 80a1d8e:	f7ff f957 	bl	80a1040 <abort>

080a1d92 <_ZSt20__throw_length_errorPKc>:
 80a1d92:	b508      	push	{r3, lr}
 80a1d94:	f7ff f954 	bl	80a1040 <abort>

080a1d98 <_ZSt25__throw_bad_function_callv>:
 80a1d98:	b508      	push	{r3, lr}
 80a1d9a:	f7ff f951 	bl	80a1040 <abort>
	...

080a1da0 <cos>:
 80a1da0:	b510      	push	{r4, lr}
 80a1da2:	4c26      	ldr	r4, [pc, #152]	; (80a1e3c <cos+0x9c>)
 80a1da4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80a1da8:	42a3      	cmp	r3, r4
 80a1daa:	b086      	sub	sp, #24
 80a1dac:	dd21      	ble.n	80a1df2 <cos+0x52>
 80a1dae:	4a24      	ldr	r2, [pc, #144]	; (80a1e40 <cos+0xa0>)
 80a1db0:	4293      	cmp	r3, r2
 80a1db2:	dd09      	ble.n	80a1dc8 <cos+0x28>
 80a1db4:	4602      	mov	r2, r0
 80a1db6:	460b      	mov	r3, r1
 80a1db8:	f001 f9e0 	bl	80a317c <__aeabi_dsub>
 80a1dbc:	4602      	mov	r2, r0
 80a1dbe:	460b      	mov	r3, r1
 80a1dc0:	4610      	mov	r0, r2
 80a1dc2:	4619      	mov	r1, r3
 80a1dc4:	b006      	add	sp, #24
 80a1dc6:	bd10      	pop	{r4, pc}
 80a1dc8:	aa02      	add	r2, sp, #8
 80a1dca:	f000 f895 	bl	80a1ef8 <__ieee754_rem_pio2>
 80a1dce:	f000 0003 	and.w	r0, r0, #3
 80a1dd2:	2801      	cmp	r0, #1
 80a1dd4:	d014      	beq.n	80a1e00 <cos+0x60>
 80a1dd6:	2802      	cmp	r0, #2
 80a1dd8:	d026      	beq.n	80a1e28 <cos+0x88>
 80a1dda:	b1e0      	cbz	r0, 80a1e16 <cos+0x76>
 80a1ddc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a1de0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a1de4:	2401      	movs	r4, #1
 80a1de6:	9400      	str	r4, [sp, #0]
 80a1de8:	f001 f802 	bl	80a2df0 <__kernel_sin>
 80a1dec:	4602      	mov	r2, r0
 80a1dee:	460b      	mov	r3, r1
 80a1df0:	e7e6      	b.n	80a1dc0 <cos+0x20>
 80a1df2:	2200      	movs	r2, #0
 80a1df4:	2300      	movs	r3, #0
 80a1df6:	b006      	add	sp, #24
 80a1df8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a1dfc:	f000 baa8 	b.w	80a2350 <__kernel_cos>
 80a1e00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a1e04:	9000      	str	r0, [sp, #0]
 80a1e06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a1e0a:	f000 fff1 	bl	80a2df0 <__kernel_sin>
 80a1e0e:	4602      	mov	r2, r0
 80a1e10:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80a1e14:	e7d4      	b.n	80a1dc0 <cos+0x20>
 80a1e16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a1e1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a1e1e:	f000 fa97 	bl	80a2350 <__kernel_cos>
 80a1e22:	4602      	mov	r2, r0
 80a1e24:	460b      	mov	r3, r1
 80a1e26:	e7cb      	b.n	80a1dc0 <cos+0x20>
 80a1e28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a1e2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a1e30:	f000 fa8e 	bl	80a2350 <__kernel_cos>
 80a1e34:	4602      	mov	r2, r0
 80a1e36:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80a1e3a:	e7c1      	b.n	80a1dc0 <cos+0x20>
 80a1e3c:	3fe921fb 	.word	0x3fe921fb
 80a1e40:	7fefffff 	.word	0x7fefffff

080a1e44 <sin>:
 80a1e44:	b510      	push	{r4, lr}
 80a1e46:	4c29      	ldr	r4, [pc, #164]	; (80a1eec <sin+0xa8>)
 80a1e48:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80a1e4c:	42a3      	cmp	r3, r4
 80a1e4e:	b086      	sub	sp, #24
 80a1e50:	dd20      	ble.n	80a1e94 <sin+0x50>
 80a1e52:	4a27      	ldr	r2, [pc, #156]	; (80a1ef0 <sin+0xac>)
 80a1e54:	4293      	cmp	r3, r2
 80a1e56:	dd09      	ble.n	80a1e6c <sin+0x28>
 80a1e58:	4602      	mov	r2, r0
 80a1e5a:	460b      	mov	r3, r1
 80a1e5c:	f001 f98e 	bl	80a317c <__aeabi_dsub>
 80a1e60:	4602      	mov	r2, r0
 80a1e62:	460b      	mov	r3, r1
 80a1e64:	4610      	mov	r0, r2
 80a1e66:	4619      	mov	r1, r3
 80a1e68:	b006      	add	sp, #24
 80a1e6a:	bd10      	pop	{r4, pc}
 80a1e6c:	aa02      	add	r2, sp, #8
 80a1e6e:	f000 f843 	bl	80a1ef8 <__ieee754_rem_pio2>
 80a1e72:	f000 0003 	and.w	r0, r0, #3
 80a1e76:	2801      	cmp	r0, #1
 80a1e78:	d018      	beq.n	80a1eac <sin+0x68>
 80a1e7a:	2802      	cmp	r0, #2
 80a1e7c:	d02a      	beq.n	80a1ed4 <sin+0x90>
 80a1e7e:	b1f0      	cbz	r0, 80a1ebe <sin+0x7a>
 80a1e80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a1e84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a1e88:	f000 fa62 	bl	80a2350 <__kernel_cos>
 80a1e8c:	4602      	mov	r2, r0
 80a1e8e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80a1e92:	e7e7      	b.n	80a1e64 <sin+0x20>
 80a1e94:	2400      	movs	r4, #0
 80a1e96:	2200      	movs	r2, #0
 80a1e98:	2300      	movs	r3, #0
 80a1e9a:	9400      	str	r4, [sp, #0]
 80a1e9c:	f000 ffa8 	bl	80a2df0 <__kernel_sin>
 80a1ea0:	4602      	mov	r2, r0
 80a1ea2:	460b      	mov	r3, r1
 80a1ea4:	4610      	mov	r0, r2
 80a1ea6:	4619      	mov	r1, r3
 80a1ea8:	b006      	add	sp, #24
 80a1eaa:	bd10      	pop	{r4, pc}
 80a1eac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a1eb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a1eb4:	f000 fa4c 	bl	80a2350 <__kernel_cos>
 80a1eb8:	4602      	mov	r2, r0
 80a1eba:	460b      	mov	r3, r1
 80a1ebc:	e7d2      	b.n	80a1e64 <sin+0x20>
 80a1ebe:	2401      	movs	r4, #1
 80a1ec0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a1ec4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a1ec8:	9400      	str	r4, [sp, #0]
 80a1eca:	f000 ff91 	bl	80a2df0 <__kernel_sin>
 80a1ece:	4602      	mov	r2, r0
 80a1ed0:	460b      	mov	r3, r1
 80a1ed2:	e7c7      	b.n	80a1e64 <sin+0x20>
 80a1ed4:	2401      	movs	r4, #1
 80a1ed6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a1eda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a1ede:	9400      	str	r4, [sp, #0]
 80a1ee0:	f000 ff86 	bl	80a2df0 <__kernel_sin>
 80a1ee4:	4602      	mov	r2, r0
 80a1ee6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80a1eea:	e7bb      	b.n	80a1e64 <sin+0x20>
 80a1eec:	3fe921fb 	.word	0x3fe921fb
 80a1ef0:	7fefffff 	.word	0x7fefffff
 80a1ef4:	00000000 	.word	0x00000000

080a1ef8 <__ieee754_rem_pio2>:
 80a1ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1efc:	f8df c238 	ldr.w	ip, [pc, #568]	; 80a2138 <__ieee754_rem_pio2+0x240>
 80a1f00:	f021 4500 	bic.w	r5, r1, #2147483648	; 0x80000000
 80a1f04:	4565      	cmp	r5, ip
 80a1f06:	4606      	mov	r6, r0
 80a1f08:	4614      	mov	r4, r2
 80a1f0a:	b08f      	sub	sp, #60	; 0x3c
 80a1f0c:	f340 8085 	ble.w	80a201a <__ieee754_rem_pio2+0x122>
 80a1f10:	4a8a      	ldr	r2, [pc, #552]	; (80a213c <__ieee754_rem_pio2+0x244>)
 80a1f12:	460f      	mov	r7, r1
 80a1f14:	4295      	cmp	r5, r2
 80a1f16:	dc26      	bgt.n	80a1f66 <__ieee754_rem_pio2+0x6e>
 80a1f18:	a37d      	add	r3, pc, #500	; (adr r3, 80a2110 <__ieee754_rem_pio2+0x218>)
 80a1f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a1f1e:	2900      	cmp	r1, #0
 80a1f20:	f340 81c0 	ble.w	80a22a4 <__ieee754_rem_pio2+0x3ac>
 80a1f24:	f001 f92a 	bl	80a317c <__aeabi_dsub>
 80a1f28:	4b85      	ldr	r3, [pc, #532]	; (80a2140 <__ieee754_rem_pio2+0x248>)
 80a1f2a:	4680      	mov	r8, r0
 80a1f2c:	429d      	cmp	r5, r3
 80a1f2e:	4689      	mov	r9, r1
 80a1f30:	f000 808a 	beq.w	80a2048 <__ieee754_rem_pio2+0x150>
 80a1f34:	a378      	add	r3, pc, #480	; (adr r3, 80a2118 <__ieee754_rem_pio2+0x220>)
 80a1f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a1f3a:	f001 f91f 	bl	80a317c <__aeabi_dsub>
 80a1f3e:	4602      	mov	r2, r0
 80a1f40:	460b      	mov	r3, r1
 80a1f42:	4640      	mov	r0, r8
 80a1f44:	e9c4 2300 	strd	r2, r3, [r4]
 80a1f48:	4649      	mov	r1, r9
 80a1f4a:	f001 f917 	bl	80a317c <__aeabi_dsub>
 80a1f4e:	a372      	add	r3, pc, #456	; (adr r3, 80a2118 <__ieee754_rem_pio2+0x220>)
 80a1f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a1f54:	f001 f912 	bl	80a317c <__aeabi_dsub>
 80a1f58:	2601      	movs	r6, #1
 80a1f5a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80a1f5e:	4630      	mov	r0, r6
 80a1f60:	b00f      	add	sp, #60	; 0x3c
 80a1f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1f66:	4a77      	ldr	r2, [pc, #476]	; (80a2144 <__ieee754_rem_pio2+0x24c>)
 80a1f68:	4295      	cmp	r5, r2
 80a1f6a:	f340 808d 	ble.w	80a2088 <__ieee754_rem_pio2+0x190>
 80a1f6e:	4a76      	ldr	r2, [pc, #472]	; (80a2148 <__ieee754_rem_pio2+0x250>)
 80a1f70:	4295      	cmp	r5, r2
 80a1f72:	dc5f      	bgt.n	80a2034 <__ieee754_rem_pio2+0x13c>
 80a1f74:	ea4f 5825 	mov.w	r8, r5, asr #20
 80a1f78:	f2a8 4816 	subw	r8, r8, #1046	; 0x416
 80a1f7c:	eba5 5108 	sub.w	r1, r5, r8, lsl #20
 80a1f80:	468b      	mov	fp, r1
 80a1f82:	f001 fd4d 	bl	80a3a20 <__aeabi_d2iz>
 80a1f86:	f001 fa47 	bl	80a3418 <__aeabi_i2d>
 80a1f8a:	4602      	mov	r2, r0
 80a1f8c:	460b      	mov	r3, r1
 80a1f8e:	4630      	mov	r0, r6
 80a1f90:	4659      	mov	r1, fp
 80a1f92:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a1f96:	f001 f8f1 	bl	80a317c <__aeabi_dsub>
 80a1f9a:	2200      	movs	r2, #0
 80a1f9c:	4b6b      	ldr	r3, [pc, #428]	; (80a214c <__ieee754_rem_pio2+0x254>)
 80a1f9e:	f001 faa5 	bl	80a34ec <__aeabi_dmul>
 80a1fa2:	468b      	mov	fp, r1
 80a1fa4:	4682      	mov	sl, r0
 80a1fa6:	f001 fd3b 	bl	80a3a20 <__aeabi_d2iz>
 80a1faa:	4605      	mov	r5, r0
 80a1fac:	f001 fa34 	bl	80a3418 <__aeabi_i2d>
 80a1fb0:	4602      	mov	r2, r0
 80a1fb2:	460b      	mov	r3, r1
 80a1fb4:	4650      	mov	r0, sl
 80a1fb6:	4659      	mov	r1, fp
 80a1fb8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80a1fbc:	f001 f8de 	bl	80a317c <__aeabi_dsub>
 80a1fc0:	2200      	movs	r2, #0
 80a1fc2:	4b62      	ldr	r3, [pc, #392]	; (80a214c <__ieee754_rem_pio2+0x254>)
 80a1fc4:	f001 fa92 	bl	80a34ec <__aeabi_dmul>
 80a1fc8:	4602      	mov	r2, r0
 80a1fca:	460b      	mov	r3, r1
 80a1fcc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80a1fd0:	2200      	movs	r2, #0
 80a1fd2:	2300      	movs	r3, #0
 80a1fd4:	f001 fcf2 	bl	80a39bc <__aeabi_dcmpeq>
 80a1fd8:	2800      	cmp	r0, #0
 80a1fda:	f000 8161 	beq.w	80a22a0 <__ieee754_rem_pio2+0x3a8>
 80a1fde:	2d00      	cmp	r5, #0
 80a1fe0:	bf0c      	ite	eq
 80a1fe2:	2301      	moveq	r3, #1
 80a1fe4:	2302      	movne	r3, #2
 80a1fe6:	2502      	movs	r5, #2
 80a1fe8:	4959      	ldr	r1, [pc, #356]	; (80a2150 <__ieee754_rem_pio2+0x258>)
 80a1fea:	4642      	mov	r2, r8
 80a1fec:	9101      	str	r1, [sp, #4]
 80a1fee:	a808      	add	r0, sp, #32
 80a1ff0:	4621      	mov	r1, r4
 80a1ff2:	9500      	str	r5, [sp, #0]
 80a1ff4:	f000 fad4 	bl	80a25a0 <__kernel_rem_pio2>
 80a1ff8:	2f00      	cmp	r7, #0
 80a1ffa:	4606      	mov	r6, r0
 80a1ffc:	daaf      	bge.n	80a1f5e <__ieee754_rem_pio2+0x66>
 80a1ffe:	e9d4 0500 	ldrd	r0, r5, [r4]
 80a2002:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 80a2006:	e9c4 0100 	strd	r0, r1, [r4]
 80a200a:	68e1      	ldr	r1, [r4, #12]
 80a200c:	68a2      	ldr	r2, [r4, #8]
 80a200e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80a2012:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80a2016:	4276      	negs	r6, r6
 80a2018:	e7a1      	b.n	80a1f5e <__ieee754_rem_pio2+0x66>
 80a201a:	2600      	movs	r6, #0
 80a201c:	f04f 0800 	mov.w	r8, #0
 80a2020:	f04f 0900 	mov.w	r9, #0
 80a2024:	e9c2 0100 	strd	r0, r1, [r2]
 80a2028:	4630      	mov	r0, r6
 80a202a:	e9c2 8902 	strd	r8, r9, [r2, #8]
 80a202e:	b00f      	add	sp, #60	; 0x3c
 80a2030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2034:	4602      	mov	r2, r0
 80a2036:	460b      	mov	r3, r1
 80a2038:	f001 f8a0 	bl	80a317c <__aeabi_dsub>
 80a203c:	2600      	movs	r6, #0
 80a203e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80a2042:	e9c4 0100 	strd	r0, r1, [r4]
 80a2046:	e78a      	b.n	80a1f5e <__ieee754_rem_pio2+0x66>
 80a2048:	a335      	add	r3, pc, #212	; (adr r3, 80a2120 <__ieee754_rem_pio2+0x228>)
 80a204a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a204e:	f001 f895 	bl	80a317c <__aeabi_dsub>
 80a2052:	a335      	add	r3, pc, #212	; (adr r3, 80a2128 <__ieee754_rem_pio2+0x230>)
 80a2054:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2058:	4680      	mov	r8, r0
 80a205a:	4689      	mov	r9, r1
 80a205c:	f001 f88e 	bl	80a317c <__aeabi_dsub>
 80a2060:	4602      	mov	r2, r0
 80a2062:	460b      	mov	r3, r1
 80a2064:	4640      	mov	r0, r8
 80a2066:	e9c4 2300 	strd	r2, r3, [r4]
 80a206a:	4649      	mov	r1, r9
 80a206c:	f001 f886 	bl	80a317c <__aeabi_dsub>
 80a2070:	a32d      	add	r3, pc, #180	; (adr r3, 80a2128 <__ieee754_rem_pio2+0x230>)
 80a2072:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2076:	f001 f881 	bl	80a317c <__aeabi_dsub>
 80a207a:	2601      	movs	r6, #1
 80a207c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80a2080:	4630      	mov	r0, r6
 80a2082:	b00f      	add	sp, #60	; 0x3c
 80a2084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2088:	f000 ff74 	bl	80a2f74 <fabs>
 80a208c:	a328      	add	r3, pc, #160	; (adr r3, 80a2130 <__ieee754_rem_pio2+0x238>)
 80a208e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2092:	4680      	mov	r8, r0
 80a2094:	4689      	mov	r9, r1
 80a2096:	f001 fa29 	bl	80a34ec <__aeabi_dmul>
 80a209a:	2200      	movs	r2, #0
 80a209c:	4b2d      	ldr	r3, [pc, #180]	; (80a2154 <__ieee754_rem_pio2+0x25c>)
 80a209e:	f001 f86f 	bl	80a3180 <__adddf3>
 80a20a2:	f001 fcbd 	bl	80a3a20 <__aeabi_d2iz>
 80a20a6:	4606      	mov	r6, r0
 80a20a8:	f001 f9b6 	bl	80a3418 <__aeabi_i2d>
 80a20ac:	a318      	add	r3, pc, #96	; (adr r3, 80a2110 <__ieee754_rem_pio2+0x218>)
 80a20ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a20b2:	4682      	mov	sl, r0
 80a20b4:	468b      	mov	fp, r1
 80a20b6:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80a20ba:	f001 fa17 	bl	80a34ec <__aeabi_dmul>
 80a20be:	4602      	mov	r2, r0
 80a20c0:	460b      	mov	r3, r1
 80a20c2:	4640      	mov	r0, r8
 80a20c4:	4649      	mov	r1, r9
 80a20c6:	f001 f859 	bl	80a317c <__aeabi_dsub>
 80a20ca:	a313      	add	r3, pc, #76	; (adr r3, 80a2118 <__ieee754_rem_pio2+0x220>)
 80a20cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a20d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a20d4:	4650      	mov	r0, sl
 80a20d6:	4659      	mov	r1, fp
 80a20d8:	f001 fa08 	bl	80a34ec <__aeabi_dmul>
 80a20dc:	2e1f      	cmp	r6, #31
 80a20de:	4680      	mov	r8, r0
 80a20e0:	4689      	mov	r9, r1
 80a20e2:	dc3b      	bgt.n	80a215c <__ieee754_rem_pio2+0x264>
 80a20e4:	4b1c      	ldr	r3, [pc, #112]	; (80a2158 <__ieee754_rem_pio2+0x260>)
 80a20e6:	1e72      	subs	r2, r6, #1
 80a20e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a20ec:	42ab      	cmp	r3, r5
 80a20ee:	d035      	beq.n	80a215c <__ieee754_rem_pio2+0x264>
 80a20f0:	4602      	mov	r2, r0
 80a20f2:	460b      	mov	r3, r1
 80a20f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a20f8:	f001 f840 	bl	80a317c <__aeabi_dsub>
 80a20fc:	4602      	mov	r2, r0
 80a20fe:	460b      	mov	r3, r1
 80a2100:	4682      	mov	sl, r0
 80a2102:	468b      	mov	fp, r1
 80a2104:	e9c4 2300 	strd	r2, r3, [r4]
 80a2108:	e0ae      	b.n	80a2268 <__ieee754_rem_pio2+0x370>
 80a210a:	bf00      	nop
 80a210c:	f3af 8000 	nop.w
 80a2110:	54400000 	.word	0x54400000
 80a2114:	3ff921fb 	.word	0x3ff921fb
 80a2118:	1a626331 	.word	0x1a626331
 80a211c:	3dd0b461 	.word	0x3dd0b461
 80a2120:	1a600000 	.word	0x1a600000
 80a2124:	3dd0b461 	.word	0x3dd0b461
 80a2128:	2e037073 	.word	0x2e037073
 80a212c:	3ba3198a 	.word	0x3ba3198a
 80a2130:	6dc9c883 	.word	0x6dc9c883
 80a2134:	3fe45f30 	.word	0x3fe45f30
 80a2138:	3fe921fb 	.word	0x3fe921fb
 80a213c:	4002d97b 	.word	0x4002d97b
 80a2140:	3ff921fb 	.word	0x3ff921fb
 80a2144:	413921fb 	.word	0x413921fb
 80a2148:	7fefffff 	.word	0x7fefffff
 80a214c:	41700000 	.word	0x41700000
 80a2150:	080a3eac 	.word	0x080a3eac
 80a2154:	3fe00000 	.word	0x3fe00000
 80a2158:	080a3e2c 	.word	0x080a3e2c
 80a215c:	152b      	asrs	r3, r5, #20
 80a215e:	9307      	str	r3, [sp, #28]
 80a2160:	4642      	mov	r2, r8
 80a2162:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a2166:	464b      	mov	r3, r9
 80a2168:	f001 f808 	bl	80a317c <__aeabi_dsub>
 80a216c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80a2170:	ebc3 5515 	rsb	r5, r3, r5, lsr #20
 80a2174:	2d10      	cmp	r5, #16
 80a2176:	468b      	mov	fp, r1
 80a2178:	4682      	mov	sl, r0
 80a217a:	dd71      	ble.n	80a2260 <__ieee754_rem_pio2+0x368>
 80a217c:	a368      	add	r3, pc, #416	; (adr r3, 80a2320 <__ieee754_rem_pio2+0x428>)
 80a217e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2182:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a2186:	f001 f9b1 	bl	80a34ec <__aeabi_dmul>
 80a218a:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 80a218e:	4680      	mov	r8, r0
 80a2190:	4689      	mov	r9, r1
 80a2192:	4642      	mov	r2, r8
 80a2194:	464b      	mov	r3, r9
 80a2196:	4650      	mov	r0, sl
 80a2198:	4659      	mov	r1, fp
 80a219a:	f000 ffef 	bl	80a317c <__aeabi_dsub>
 80a219e:	4602      	mov	r2, r0
 80a21a0:	460b      	mov	r3, r1
 80a21a2:	4650      	mov	r0, sl
 80a21a4:	4659      	mov	r1, fp
 80a21a6:	4692      	mov	sl, r2
 80a21a8:	469b      	mov	fp, r3
 80a21aa:	f000 ffe7 	bl	80a317c <__aeabi_dsub>
 80a21ae:	4642      	mov	r2, r8
 80a21b0:	464b      	mov	r3, r9
 80a21b2:	f000 ffe3 	bl	80a317c <__aeabi_dsub>
 80a21b6:	a35c      	add	r3, pc, #368	; (adr r3, 80a2328 <__ieee754_rem_pio2+0x430>)
 80a21b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a21bc:	4680      	mov	r8, r0
 80a21be:	4689      	mov	r9, r1
 80a21c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a21c4:	f001 f992 	bl	80a34ec <__aeabi_dmul>
 80a21c8:	4642      	mov	r2, r8
 80a21ca:	464b      	mov	r3, r9
 80a21cc:	f000 ffd6 	bl	80a317c <__aeabi_dsub>
 80a21d0:	4680      	mov	r8, r0
 80a21d2:	4689      	mov	r9, r1
 80a21d4:	4650      	mov	r0, sl
 80a21d6:	4659      	mov	r1, fp
 80a21d8:	4642      	mov	r2, r8
 80a21da:	464b      	mov	r3, r9
 80a21dc:	e9cd ab02 	strd	sl, fp, [sp, #8]
 80a21e0:	f000 ffcc 	bl	80a317c <__aeabi_dsub>
 80a21e4:	9a07      	ldr	r2, [sp, #28]
 80a21e6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80a21ea:	1ad3      	subs	r3, r2, r3
 80a21ec:	2b31      	cmp	r3, #49	; 0x31
 80a21ee:	468b      	mov	fp, r1
 80a21f0:	4682      	mov	sl, r0
 80a21f2:	dd35      	ble.n	80a2260 <__ieee754_rem_pio2+0x368>
 80a21f4:	a34e      	add	r3, pc, #312	; (adr r3, 80a2330 <__ieee754_rem_pio2+0x438>)
 80a21f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a21fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a21fe:	f001 f975 	bl	80a34ec <__aeabi_dmul>
 80a2202:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 80a2206:	4680      	mov	r8, r0
 80a2208:	4689      	mov	r9, r1
 80a220a:	4642      	mov	r2, r8
 80a220c:	464b      	mov	r3, r9
 80a220e:	4650      	mov	r0, sl
 80a2210:	4659      	mov	r1, fp
 80a2212:	f000 ffb3 	bl	80a317c <__aeabi_dsub>
 80a2216:	4602      	mov	r2, r0
 80a2218:	460b      	mov	r3, r1
 80a221a:	4650      	mov	r0, sl
 80a221c:	4659      	mov	r1, fp
 80a221e:	4692      	mov	sl, r2
 80a2220:	469b      	mov	fp, r3
 80a2222:	e9cd ab02 	strd	sl, fp, [sp, #8]
 80a2226:	f000 ffa9 	bl	80a317c <__aeabi_dsub>
 80a222a:	4642      	mov	r2, r8
 80a222c:	464b      	mov	r3, r9
 80a222e:	f000 ffa5 	bl	80a317c <__aeabi_dsub>
 80a2232:	a341      	add	r3, pc, #260	; (adr r3, 80a2338 <__ieee754_rem_pio2+0x440>)
 80a2234:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2238:	4680      	mov	r8, r0
 80a223a:	4689      	mov	r9, r1
 80a223c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a2240:	f001 f954 	bl	80a34ec <__aeabi_dmul>
 80a2244:	4642      	mov	r2, r8
 80a2246:	464b      	mov	r3, r9
 80a2248:	f000 ff98 	bl	80a317c <__aeabi_dsub>
 80a224c:	4680      	mov	r8, r0
 80a224e:	4689      	mov	r9, r1
 80a2250:	4650      	mov	r0, sl
 80a2252:	4659      	mov	r1, fp
 80a2254:	4642      	mov	r2, r8
 80a2256:	464b      	mov	r3, r9
 80a2258:	f000 ff90 	bl	80a317c <__aeabi_dsub>
 80a225c:	468b      	mov	fp, r1
 80a225e:	4682      	mov	sl, r0
 80a2260:	4652      	mov	r2, sl
 80a2262:	465b      	mov	r3, fp
 80a2264:	e9c4 2300 	strd	r2, r3, [r4]
 80a2268:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a226c:	4652      	mov	r2, sl
 80a226e:	465b      	mov	r3, fp
 80a2270:	f000 ff84 	bl	80a317c <__aeabi_dsub>
 80a2274:	4642      	mov	r2, r8
 80a2276:	464b      	mov	r3, r9
 80a2278:	f000 ff80 	bl	80a317c <__aeabi_dsub>
 80a227c:	4602      	mov	r2, r0
 80a227e:	460b      	mov	r3, r1
 80a2280:	2f00      	cmp	r7, #0
 80a2282:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80a2286:	f6bf ae6a 	bge.w	80a1f5e <__ieee754_rem_pio2+0x66>
 80a228a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80a228e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80a2292:	60a0      	str	r0, [r4, #8]
 80a2294:	6063      	str	r3, [r4, #4]
 80a2296:	60e1      	str	r1, [r4, #12]
 80a2298:	4276      	negs	r6, r6
 80a229a:	f8c4 a000 	str.w	sl, [r4]
 80a229e:	e65e      	b.n	80a1f5e <__ieee754_rem_pio2+0x66>
 80a22a0:	2303      	movs	r3, #3
 80a22a2:	e6a0      	b.n	80a1fe6 <__ieee754_rem_pio2+0xee>
 80a22a4:	f000 ff6c 	bl	80a3180 <__adddf3>
 80a22a8:	4b27      	ldr	r3, [pc, #156]	; (80a2348 <__ieee754_rem_pio2+0x450>)
 80a22aa:	4680      	mov	r8, r0
 80a22ac:	429d      	cmp	r5, r3
 80a22ae:	4689      	mov	r9, r1
 80a22b0:	d016      	beq.n	80a22e0 <__ieee754_rem_pio2+0x3e8>
 80a22b2:	a323      	add	r3, pc, #140	; (adr r3, 80a2340 <__ieee754_rem_pio2+0x448>)
 80a22b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a22b8:	f000 ff62 	bl	80a3180 <__adddf3>
 80a22bc:	4602      	mov	r2, r0
 80a22be:	460b      	mov	r3, r1
 80a22c0:	4640      	mov	r0, r8
 80a22c2:	e9c4 2300 	strd	r2, r3, [r4]
 80a22c6:	4649      	mov	r1, r9
 80a22c8:	f000 ff58 	bl	80a317c <__aeabi_dsub>
 80a22cc:	a31c      	add	r3, pc, #112	; (adr r3, 80a2340 <__ieee754_rem_pio2+0x448>)
 80a22ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a22d2:	f000 ff55 	bl	80a3180 <__adddf3>
 80a22d6:	f04f 36ff 	mov.w	r6, #4294967295
 80a22da:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80a22de:	e63e      	b.n	80a1f5e <__ieee754_rem_pio2+0x66>
 80a22e0:	a30f      	add	r3, pc, #60	; (adr r3, 80a2320 <__ieee754_rem_pio2+0x428>)
 80a22e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a22e6:	f000 ff4b 	bl	80a3180 <__adddf3>
 80a22ea:	a30f      	add	r3, pc, #60	; (adr r3, 80a2328 <__ieee754_rem_pio2+0x430>)
 80a22ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a22f0:	4680      	mov	r8, r0
 80a22f2:	4689      	mov	r9, r1
 80a22f4:	f000 ff44 	bl	80a3180 <__adddf3>
 80a22f8:	4602      	mov	r2, r0
 80a22fa:	460b      	mov	r3, r1
 80a22fc:	4640      	mov	r0, r8
 80a22fe:	e9c4 2300 	strd	r2, r3, [r4]
 80a2302:	4649      	mov	r1, r9
 80a2304:	f000 ff3a 	bl	80a317c <__aeabi_dsub>
 80a2308:	a307      	add	r3, pc, #28	; (adr r3, 80a2328 <__ieee754_rem_pio2+0x430>)
 80a230a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a230e:	f000 ff37 	bl	80a3180 <__adddf3>
 80a2312:	f04f 36ff 	mov.w	r6, #4294967295
 80a2316:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80a231a:	e620      	b.n	80a1f5e <__ieee754_rem_pio2+0x66>
 80a231c:	f3af 8000 	nop.w
 80a2320:	1a600000 	.word	0x1a600000
 80a2324:	3dd0b461 	.word	0x3dd0b461
 80a2328:	2e037073 	.word	0x2e037073
 80a232c:	3ba3198a 	.word	0x3ba3198a
 80a2330:	2e000000 	.word	0x2e000000
 80a2334:	3ba3198a 	.word	0x3ba3198a
 80a2338:	252049c1 	.word	0x252049c1
 80a233c:	397b839a 	.word	0x397b839a
 80a2340:	1a626331 	.word	0x1a626331
 80a2344:	3dd0b461 	.word	0x3dd0b461
 80a2348:	3ff921fb 	.word	0x3ff921fb
 80a234c:	00000000 	.word	0x00000000

080a2350 <__kernel_cos>:
 80a2350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a2354:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80a2358:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80a235c:	4692      	mov	sl, r2
 80a235e:	469b      	mov	fp, r3
 80a2360:	460c      	mov	r4, r1
 80a2362:	4605      	mov	r5, r0
 80a2364:	b085      	sub	sp, #20
 80a2366:	da6d      	bge.n	80a2444 <__kernel_cos+0xf4>
 80a2368:	f001 fb5a 	bl	80a3a20 <__aeabi_d2iz>
 80a236c:	2800      	cmp	r0, #0
 80a236e:	f000 80eb 	beq.w	80a2548 <__kernel_cos+0x1f8>
 80a2372:	462a      	mov	r2, r5
 80a2374:	4623      	mov	r3, r4
 80a2376:	4628      	mov	r0, r5
 80a2378:	4621      	mov	r1, r4
 80a237a:	f001 f8b7 	bl	80a34ec <__aeabi_dmul>
 80a237e:	a376      	add	r3, pc, #472	; (adr r3, 80a2558 <__kernel_cos+0x208>)
 80a2380:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2384:	4680      	mov	r8, r0
 80a2386:	4689      	mov	r9, r1
 80a2388:	f001 f8b0 	bl	80a34ec <__aeabi_dmul>
 80a238c:	a374      	add	r3, pc, #464	; (adr r3, 80a2560 <__kernel_cos+0x210>)
 80a238e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2392:	f000 fef5 	bl	80a3180 <__adddf3>
 80a2396:	4642      	mov	r2, r8
 80a2398:	464b      	mov	r3, r9
 80a239a:	f001 f8a7 	bl	80a34ec <__aeabi_dmul>
 80a239e:	a372      	add	r3, pc, #456	; (adr r3, 80a2568 <__kernel_cos+0x218>)
 80a23a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a23a4:	f000 feea 	bl	80a317c <__aeabi_dsub>
 80a23a8:	4642      	mov	r2, r8
 80a23aa:	464b      	mov	r3, r9
 80a23ac:	f001 f89e 	bl	80a34ec <__aeabi_dmul>
 80a23b0:	a36f      	add	r3, pc, #444	; (adr r3, 80a2570 <__kernel_cos+0x220>)
 80a23b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a23b6:	f000 fee3 	bl	80a3180 <__adddf3>
 80a23ba:	4642      	mov	r2, r8
 80a23bc:	464b      	mov	r3, r9
 80a23be:	f001 f895 	bl	80a34ec <__aeabi_dmul>
 80a23c2:	a36d      	add	r3, pc, #436	; (adr r3, 80a2578 <__kernel_cos+0x228>)
 80a23c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a23c8:	f000 fed8 	bl	80a317c <__aeabi_dsub>
 80a23cc:	4642      	mov	r2, r8
 80a23ce:	464b      	mov	r3, r9
 80a23d0:	f001 f88c 	bl	80a34ec <__aeabi_dmul>
 80a23d4:	a36a      	add	r3, pc, #424	; (adr r3, 80a2580 <__kernel_cos+0x230>)
 80a23d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a23da:	f000 fed1 	bl	80a3180 <__adddf3>
 80a23de:	4642      	mov	r2, r8
 80a23e0:	464b      	mov	r3, r9
 80a23e2:	f001 f883 	bl	80a34ec <__aeabi_dmul>
 80a23e6:	e9cd 0100 	strd	r0, r1, [sp]
 80a23ea:	2200      	movs	r2, #0
 80a23ec:	4640      	mov	r0, r8
 80a23ee:	4649      	mov	r1, r9
 80a23f0:	4b65      	ldr	r3, [pc, #404]	; (80a2588 <__kernel_cos+0x238>)
 80a23f2:	f001 f87b 	bl	80a34ec <__aeabi_dmul>
 80a23f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a23fa:	4606      	mov	r6, r0
 80a23fc:	460f      	mov	r7, r1
 80a23fe:	4640      	mov	r0, r8
 80a2400:	4649      	mov	r1, r9
 80a2402:	f001 f873 	bl	80a34ec <__aeabi_dmul>
 80a2406:	46a8      	mov	r8, r5
 80a2408:	46a1      	mov	r9, r4
 80a240a:	4652      	mov	r2, sl
 80a240c:	465b      	mov	r3, fp
 80a240e:	4604      	mov	r4, r0
 80a2410:	460d      	mov	r5, r1
 80a2412:	4640      	mov	r0, r8
 80a2414:	4649      	mov	r1, r9
 80a2416:	f001 f869 	bl	80a34ec <__aeabi_dmul>
 80a241a:	4602      	mov	r2, r0
 80a241c:	460b      	mov	r3, r1
 80a241e:	4620      	mov	r0, r4
 80a2420:	4629      	mov	r1, r5
 80a2422:	f000 feab 	bl	80a317c <__aeabi_dsub>
 80a2426:	4602      	mov	r2, r0
 80a2428:	460b      	mov	r3, r1
 80a242a:	4630      	mov	r0, r6
 80a242c:	4639      	mov	r1, r7
 80a242e:	f000 fea5 	bl	80a317c <__aeabi_dsub>
 80a2432:	4602      	mov	r2, r0
 80a2434:	460b      	mov	r3, r1
 80a2436:	2000      	movs	r0, #0
 80a2438:	4954      	ldr	r1, [pc, #336]	; (80a258c <__kernel_cos+0x23c>)
 80a243a:	f000 fe9f 	bl	80a317c <__aeabi_dsub>
 80a243e:	b005      	add	sp, #20
 80a2440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2444:	4602      	mov	r2, r0
 80a2446:	460b      	mov	r3, r1
 80a2448:	f001 f850 	bl	80a34ec <__aeabi_dmul>
 80a244c:	a342      	add	r3, pc, #264	; (adr r3, 80a2558 <__kernel_cos+0x208>)
 80a244e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2452:	4680      	mov	r8, r0
 80a2454:	4689      	mov	r9, r1
 80a2456:	f001 f849 	bl	80a34ec <__aeabi_dmul>
 80a245a:	a341      	add	r3, pc, #260	; (adr r3, 80a2560 <__kernel_cos+0x210>)
 80a245c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2460:	f000 fe8e 	bl	80a3180 <__adddf3>
 80a2464:	4642      	mov	r2, r8
 80a2466:	464b      	mov	r3, r9
 80a2468:	f001 f840 	bl	80a34ec <__aeabi_dmul>
 80a246c:	a33e      	add	r3, pc, #248	; (adr r3, 80a2568 <__kernel_cos+0x218>)
 80a246e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2472:	f000 fe83 	bl	80a317c <__aeabi_dsub>
 80a2476:	4642      	mov	r2, r8
 80a2478:	464b      	mov	r3, r9
 80a247a:	f001 f837 	bl	80a34ec <__aeabi_dmul>
 80a247e:	a33c      	add	r3, pc, #240	; (adr r3, 80a2570 <__kernel_cos+0x220>)
 80a2480:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2484:	f000 fe7c 	bl	80a3180 <__adddf3>
 80a2488:	4642      	mov	r2, r8
 80a248a:	464b      	mov	r3, r9
 80a248c:	f001 f82e 	bl	80a34ec <__aeabi_dmul>
 80a2490:	a339      	add	r3, pc, #228	; (adr r3, 80a2578 <__kernel_cos+0x228>)
 80a2492:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2496:	f000 fe71 	bl	80a317c <__aeabi_dsub>
 80a249a:	4642      	mov	r2, r8
 80a249c:	464b      	mov	r3, r9
 80a249e:	f001 f825 	bl	80a34ec <__aeabi_dmul>
 80a24a2:	a337      	add	r3, pc, #220	; (adr r3, 80a2580 <__kernel_cos+0x230>)
 80a24a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a24a8:	f000 fe6a 	bl	80a3180 <__adddf3>
 80a24ac:	464b      	mov	r3, r9
 80a24ae:	4642      	mov	r2, r8
 80a24b0:	f001 f81c 	bl	80a34ec <__aeabi_dmul>
 80a24b4:	4b36      	ldr	r3, [pc, #216]	; (80a2590 <__kernel_cos+0x240>)
 80a24b6:	e9cd 0100 	strd	r0, r1, [sp]
 80a24ba:	429e      	cmp	r6, r3
 80a24bc:	dd95      	ble.n	80a23ea <__kernel_cos+0x9a>
 80a24be:	4b35      	ldr	r3, [pc, #212]	; (80a2594 <__kernel_cos+0x244>)
 80a24c0:	2200      	movs	r2, #0
 80a24c2:	429e      	cmp	r6, r3
 80a24c4:	dc3a      	bgt.n	80a253c <__kernel_cos+0x1ec>
 80a24c6:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
 80a24ca:	2000      	movs	r0, #0
 80a24cc:	492f      	ldr	r1, [pc, #188]	; (80a258c <__kernel_cos+0x23c>)
 80a24ce:	4616      	mov	r6, r2
 80a24d0:	461f      	mov	r7, r3
 80a24d2:	f000 fe53 	bl	80a317c <__aeabi_dsub>
 80a24d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a24da:	2200      	movs	r2, #0
 80a24dc:	4640      	mov	r0, r8
 80a24de:	4649      	mov	r1, r9
 80a24e0:	4b29      	ldr	r3, [pc, #164]	; (80a2588 <__kernel_cos+0x238>)
 80a24e2:	f001 f803 	bl	80a34ec <__aeabi_dmul>
 80a24e6:	4632      	mov	r2, r6
 80a24e8:	463b      	mov	r3, r7
 80a24ea:	f000 fe47 	bl	80a317c <__aeabi_dsub>
 80a24ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a24f2:	4606      	mov	r6, r0
 80a24f4:	460f      	mov	r7, r1
 80a24f6:	4640      	mov	r0, r8
 80a24f8:	4649      	mov	r1, r9
 80a24fa:	f000 fff7 	bl	80a34ec <__aeabi_dmul>
 80a24fe:	46a8      	mov	r8, r5
 80a2500:	46a1      	mov	r9, r4
 80a2502:	4652      	mov	r2, sl
 80a2504:	465b      	mov	r3, fp
 80a2506:	4604      	mov	r4, r0
 80a2508:	460d      	mov	r5, r1
 80a250a:	4640      	mov	r0, r8
 80a250c:	4649      	mov	r1, r9
 80a250e:	f000 ffed 	bl	80a34ec <__aeabi_dmul>
 80a2512:	4602      	mov	r2, r0
 80a2514:	460b      	mov	r3, r1
 80a2516:	4620      	mov	r0, r4
 80a2518:	4629      	mov	r1, r5
 80a251a:	f000 fe2f 	bl	80a317c <__aeabi_dsub>
 80a251e:	4602      	mov	r2, r0
 80a2520:	460b      	mov	r3, r1
 80a2522:	4630      	mov	r0, r6
 80a2524:	4639      	mov	r1, r7
 80a2526:	f000 fe29 	bl	80a317c <__aeabi_dsub>
 80a252a:	4602      	mov	r2, r0
 80a252c:	460b      	mov	r3, r1
 80a252e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a2532:	f000 fe23 	bl	80a317c <__aeabi_dsub>
 80a2536:	b005      	add	sp, #20
 80a2538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a253c:	4b16      	ldr	r3, [pc, #88]	; (80a2598 <__kernel_cos+0x248>)
 80a253e:	2600      	movs	r6, #0
 80a2540:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80a2544:	4f15      	ldr	r7, [pc, #84]	; (80a259c <__kernel_cos+0x24c>)
 80a2546:	e7c8      	b.n	80a24da <__kernel_cos+0x18a>
 80a2548:	2000      	movs	r0, #0
 80a254a:	4910      	ldr	r1, [pc, #64]	; (80a258c <__kernel_cos+0x23c>)
 80a254c:	b005      	add	sp, #20
 80a254e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2552:	bf00      	nop
 80a2554:	f3af 8000 	nop.w
 80a2558:	be8838d4 	.word	0xbe8838d4
 80a255c:	bda8fae9 	.word	0xbda8fae9
 80a2560:	bdb4b1c4 	.word	0xbdb4b1c4
 80a2564:	3e21ee9e 	.word	0x3e21ee9e
 80a2568:	809c52ad 	.word	0x809c52ad
 80a256c:	3e927e4f 	.word	0x3e927e4f
 80a2570:	19cb1590 	.word	0x19cb1590
 80a2574:	3efa01a0 	.word	0x3efa01a0
 80a2578:	16c15177 	.word	0x16c15177
 80a257c:	3f56c16c 	.word	0x3f56c16c
 80a2580:	5555554c 	.word	0x5555554c
 80a2584:	3fa55555 	.word	0x3fa55555
 80a2588:	3fe00000 	.word	0x3fe00000
 80a258c:	3ff00000 	.word	0x3ff00000
 80a2590:	3fd33332 	.word	0x3fd33332
 80a2594:	3fe90000 	.word	0x3fe90000
 80a2598:	3fe70000 	.word	0x3fe70000
 80a259c:	3fd20000 	.word	0x3fd20000

080a25a0 <__kernel_rem_pio2>:
 80a25a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a25a4:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80a25a8:	4cb8      	ldr	r4, [pc, #736]	; (80a288c <__kernel_rem_pio2+0x2ec>)
 80a25aa:	9da2      	ldr	r5, [sp, #648]	; 0x288
 80a25ac:	9308      	str	r3, [sp, #32]
 80a25ae:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 80a25b2:	3b01      	subs	r3, #1
 80a25b4:	f112 0f14 	cmn.w	r2, #20
 80a25b8:	4607      	mov	r7, r0
 80a25ba:	9405      	str	r4, [sp, #20]
 80a25bc:	910b      	str	r1, [sp, #44]	; 0x2c
 80a25be:	9303      	str	r3, [sp, #12]
 80a25c0:	f2c0 8342 	blt.w	80a2c48 <__kernel_rem_pio2+0x6a8>
 80a25c4:	49b2      	ldr	r1, [pc, #712]	; (80a2890 <__kernel_rem_pio2+0x2f0>)
 80a25c6:	1ed3      	subs	r3, r2, #3
 80a25c8:	fb81 0103 	smull	r0, r1, r1, r3
 80a25cc:	17db      	asrs	r3, r3, #31
 80a25ce:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
 80a25d2:	9307      	str	r3, [sp, #28]
 80a25d4:	3301      	adds	r3, #1
 80a25d6:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
 80a25da:	00db      	lsls	r3, r3, #3
 80a25dc:	18d3      	adds	r3, r2, r3
 80a25de:	9306      	str	r3, [sp, #24]
 80a25e0:	9a07      	ldr	r2, [sp, #28]
 80a25e2:	9b03      	ldr	r3, [sp, #12]
 80a25e4:	1ad6      	subs	r6, r2, r3
 80a25e6:	9a05      	ldr	r2, [sp, #20]
 80a25e8:	eb12 0903 	adds.w	r9, r2, r3
 80a25ec:	d41b      	bmi.n	80a2626 <__kernel_rem_pio2+0x86>
 80a25ee:	f109 0901 	add.w	r9, r9, #1
 80a25f2:	2400      	movs	r4, #0
 80a25f4:	2500      	movs	r5, #0
 80a25f6:	f8dd a28c 	ldr.w	sl, [sp, #652]	; 0x28c
 80a25fa:	44b1      	add	r9, r6
 80a25fc:	f10d 0880 	add.w	r8, sp, #128	; 0x80
 80a2600:	e008      	b.n	80a2614 <__kernel_rem_pio2+0x74>
 80a2602:	f85a 0026 	ldr.w	r0, [sl, r6, lsl #2]
 80a2606:	f000 ff07 	bl	80a3418 <__aeabi_i2d>
 80a260a:	3601      	adds	r6, #1
 80a260c:	454e      	cmp	r6, r9
 80a260e:	e8e8 0102 	strd	r0, r1, [r8], #8
 80a2612:	d008      	beq.n	80a2626 <__kernel_rem_pio2+0x86>
 80a2614:	2e00      	cmp	r6, #0
 80a2616:	daf4      	bge.n	80a2602 <__kernel_rem_pio2+0x62>
 80a2618:	4620      	mov	r0, r4
 80a261a:	4629      	mov	r1, r5
 80a261c:	3601      	adds	r6, #1
 80a261e:	454e      	cmp	r6, r9
 80a2620:	e8e8 0102 	strd	r0, r1, [r8], #8
 80a2624:	d1f6      	bne.n	80a2614 <__kernel_rem_pio2+0x74>
 80a2626:	9b05      	ldr	r3, [sp, #20]
 80a2628:	2b00      	cmp	r3, #0
 80a262a:	f2c0 83bc 	blt.w	80a2da6 <__kernel_rem_pio2+0x806>
 80a262e:	9b08      	ldr	r3, [sp, #32]
 80a2630:	aa20      	add	r2, sp, #128	; 0x80
 80a2632:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 80a2636:	00da      	lsls	r2, r3, #3
 80a2638:	9202      	str	r2, [sp, #8]
 80a263a:	9a05      	ldr	r2, [sp, #20]
 80a263c:	f1a7 0108 	sub.w	r1, r7, #8
 80a2640:	441a      	add	r2, r3
 80a2642:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80a2646:	9104      	str	r1, [sp, #16]
 80a2648:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80a264c:	9201      	str	r2, [sp, #4]
 80a264e:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
 80a2652:	9b03      	ldr	r3, [sp, #12]
 80a2654:	2b00      	cmp	r3, #0
 80a2656:	f2c0 81ae 	blt.w	80a29b6 <__kernel_rem_pio2+0x416>
 80a265a:	4657      	mov	r7, sl
 80a265c:	2400      	movs	r4, #0
 80a265e:	2500      	movs	r5, #0
 80a2660:	9e04      	ldr	r6, [sp, #16]
 80a2662:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
 80a2666:	e9f6 0102 	ldrd	r0, r1, [r6, #8]!
 80a266a:	f000 ff3f 	bl	80a34ec <__aeabi_dmul>
 80a266e:	4602      	mov	r2, r0
 80a2670:	460b      	mov	r3, r1
 80a2672:	4620      	mov	r0, r4
 80a2674:	4629      	mov	r1, r5
 80a2676:	f000 fd83 	bl	80a3180 <__adddf3>
 80a267a:	4546      	cmp	r6, r8
 80a267c:	4604      	mov	r4, r0
 80a267e:	460d      	mov	r5, r1
 80a2680:	d1ef      	bne.n	80a2662 <__kernel_rem_pio2+0xc2>
 80a2682:	9b01      	ldr	r3, [sp, #4]
 80a2684:	f109 0901 	add.w	r9, r9, #1
 80a2688:	4599      	cmp	r9, r3
 80a268a:	e8eb 4502 	strd	r4, r5, [fp], #8
 80a268e:	f10a 0a08 	add.w	sl, sl, #8
 80a2692:	d1de      	bne.n	80a2652 <__kernel_rem_pio2+0xb2>
 80a2694:	9b04      	ldr	r3, [sp, #16]
 80a2696:	f8dd b008 	ldr.w	fp, [sp, #8]
 80a269a:	aa0b      	add	r2, sp, #44	; 0x2c
 80a269c:	449b      	add	fp, r3
 80a269e:	9b05      	ldr	r3, [sp, #20]
 80a26a0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80a26a4:	920a      	str	r2, [sp, #40]	; 0x28
 80a26a6:	aa0c      	add	r2, sp, #48	; 0x30
 80a26a8:	9301      	str	r3, [sp, #4]
 80a26aa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80a26ae:	3b08      	subs	r3, #8
 80a26b0:	9309      	str	r3, [sp, #36]	; 0x24
 80a26b2:	9a01      	ldr	r2, [sp, #4]
 80a26b4:	ab98      	add	r3, sp, #608	; 0x260
 80a26b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80a26ba:	2a00      	cmp	r2, #0
 80a26bc:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 80a26c0:	dd29      	ble.n	80a2716 <__kernel_rem_pio2+0x176>
 80a26c2:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 80a26c6:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80a26ca:	eb0a 08c2 	add.w	r8, sl, r2, lsl #3
 80a26ce:	2200      	movs	r2, #0
 80a26d0:	4b70      	ldr	r3, [pc, #448]	; (80a2894 <__kernel_rem_pio2+0x2f4>)
 80a26d2:	4620      	mov	r0, r4
 80a26d4:	4629      	mov	r1, r5
 80a26d6:	f000 ff09 	bl	80a34ec <__aeabi_dmul>
 80a26da:	f001 f9a1 	bl	80a3a20 <__aeabi_d2iz>
 80a26de:	f000 fe9b 	bl	80a3418 <__aeabi_i2d>
 80a26e2:	2200      	movs	r2, #0
 80a26e4:	4b6c      	ldr	r3, [pc, #432]	; (80a2898 <__kernel_rem_pio2+0x2f8>)
 80a26e6:	4606      	mov	r6, r0
 80a26e8:	460f      	mov	r7, r1
 80a26ea:	f000 feff 	bl	80a34ec <__aeabi_dmul>
 80a26ee:	4602      	mov	r2, r0
 80a26f0:	460b      	mov	r3, r1
 80a26f2:	4620      	mov	r0, r4
 80a26f4:	4629      	mov	r1, r5
 80a26f6:	f000 fd41 	bl	80a317c <__aeabi_dsub>
 80a26fa:	f001 f991 	bl	80a3a20 <__aeabi_d2iz>
 80a26fe:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 80a2702:	f849 0b04 	str.w	r0, [r9], #4
 80a2706:	4639      	mov	r1, r7
 80a2708:	4630      	mov	r0, r6
 80a270a:	f000 fd39 	bl	80a3180 <__adddf3>
 80a270e:	45d0      	cmp	r8, sl
 80a2710:	4604      	mov	r4, r0
 80a2712:	460d      	mov	r5, r1
 80a2714:	d1db      	bne.n	80a26ce <__kernel_rem_pio2+0x12e>
 80a2716:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80a271a:	4620      	mov	r0, r4
 80a271c:	4629      	mov	r1, r5
 80a271e:	464a      	mov	r2, r9
 80a2720:	f000 fcaa 	bl	80a3078 <scalbn>
 80a2724:	2200      	movs	r2, #0
 80a2726:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80a272a:	4604      	mov	r4, r0
 80a272c:	460d      	mov	r5, r1
 80a272e:	f000 fedd 	bl	80a34ec <__aeabi_dmul>
 80a2732:	f000 fc25 	bl	80a2f80 <floor>
 80a2736:	2200      	movs	r2, #0
 80a2738:	4b58      	ldr	r3, [pc, #352]	; (80a289c <__kernel_rem_pio2+0x2fc>)
 80a273a:	f000 fed7 	bl	80a34ec <__aeabi_dmul>
 80a273e:	4602      	mov	r2, r0
 80a2740:	460b      	mov	r3, r1
 80a2742:	4620      	mov	r0, r4
 80a2744:	4629      	mov	r1, r5
 80a2746:	f000 fd19 	bl	80a317c <__aeabi_dsub>
 80a274a:	460d      	mov	r5, r1
 80a274c:	4604      	mov	r4, r0
 80a274e:	f001 f967 	bl	80a3a20 <__aeabi_d2iz>
 80a2752:	4680      	mov	r8, r0
 80a2754:	f000 fe60 	bl	80a3418 <__aeabi_i2d>
 80a2758:	460b      	mov	r3, r1
 80a275a:	4602      	mov	r2, r0
 80a275c:	4629      	mov	r1, r5
 80a275e:	4620      	mov	r0, r4
 80a2760:	f000 fd0c 	bl	80a317c <__aeabi_dsub>
 80a2764:	464b      	mov	r3, r9
 80a2766:	2b00      	cmp	r3, #0
 80a2768:	4606      	mov	r6, r0
 80a276a:	460f      	mov	r7, r1
 80a276c:	f340 8098 	ble.w	80a28a0 <__kernel_rem_pio2+0x300>
 80a2770:	9a01      	ldr	r2, [sp, #4]
 80a2772:	a90c      	add	r1, sp, #48	; 0x30
 80a2774:	3a01      	subs	r2, #1
 80a2776:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
 80a277a:	f1c9 0318 	rsb	r3, r9, #24
 80a277e:	fa45 f103 	asr.w	r1, r5, r3
 80a2782:	fa01 f303 	lsl.w	r3, r1, r3
 80a2786:	1aed      	subs	r5, r5, r3
 80a2788:	ab0c      	add	r3, sp, #48	; 0x30
 80a278a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80a278e:	f1c9 0317 	rsb	r3, r9, #23
 80a2792:	411d      	asrs	r5, r3
 80a2794:	2d00      	cmp	r5, #0
 80a2796:	4488      	add	r8, r1
 80a2798:	f300 808c 	bgt.w	80a28b4 <__kernel_rem_pio2+0x314>
 80a279c:	2200      	movs	r2, #0
 80a279e:	2300      	movs	r3, #0
 80a27a0:	4630      	mov	r0, r6
 80a27a2:	4639      	mov	r1, r7
 80a27a4:	f001 f90a 	bl	80a39bc <__aeabi_dcmpeq>
 80a27a8:	2800      	cmp	r0, #0
 80a27aa:	f000 8254 	beq.w	80a2c56 <__kernel_rem_pio2+0x6b6>
 80a27ae:	9b01      	ldr	r3, [sp, #4]
 80a27b0:	9a05      	ldr	r2, [sp, #20]
 80a27b2:	f103 3aff 	add.w	sl, r3, #4294967295
 80a27b6:	4552      	cmp	r2, sl
 80a27b8:	dc10      	bgt.n	80a27dc <__kernel_rem_pio2+0x23c>
 80a27ba:	2200      	movs	r2, #0
 80a27bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80a27c0:	3b01      	subs	r3, #1
 80a27c2:	a90c      	add	r1, sp, #48	; 0x30
 80a27c4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80a27c6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80a27ca:	f853 1904 	ldr.w	r1, [r3], #-4
 80a27ce:	4283      	cmp	r3, r0
 80a27d0:	ea42 0201 	orr.w	r2, r2, r1
 80a27d4:	d1f9      	bne.n	80a27ca <__kernel_rem_pio2+0x22a>
 80a27d6:	2a00      	cmp	r2, #0
 80a27d8:	f040 80f0 	bne.w	80a29bc <__kernel_rem_pio2+0x41c>
 80a27dc:	9b05      	ldr	r3, [sp, #20]
 80a27de:	aa0c      	add	r2, sp, #48	; 0x30
 80a27e0:	3b01      	subs	r3, #1
 80a27e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80a27e6:	2b00      	cmp	r3, #0
 80a27e8:	f040 80e0 	bne.w	80a29ac <__kernel_rem_pio2+0x40c>
 80a27ec:	2301      	movs	r3, #1
 80a27ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a27f0:	f852 1904 	ldr.w	r1, [r2], #-4
 80a27f4:	3301      	adds	r3, #1
 80a27f6:	2900      	cmp	r1, #0
 80a27f8:	d0fa      	beq.n	80a27f0 <__kernel_rem_pio2+0x250>
 80a27fa:	9a01      	ldr	r2, [sp, #4]
 80a27fc:	18d3      	adds	r3, r2, r3
 80a27fe:	9302      	str	r3, [sp, #8]
 80a2800:	1c53      	adds	r3, r2, #1
 80a2802:	4699      	mov	r9, r3
 80a2804:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80a2808:	9a08      	ldr	r2, [sp, #32]
 80a280a:	4490      	add	r8, r2
 80a280c:	9a07      	ldr	r2, [sp, #28]
 80a280e:	eb02 0a03 	add.w	sl, r2, r3
 80a2812:	f10a 4a80 	add.w	sl, sl, #1073741824	; 0x40000000
 80a2816:	9aa3      	ldr	r2, [sp, #652]	; 0x28c
 80a2818:	f10a 3aff 	add.w	sl, sl, #4294967295
 80a281c:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 80a2820:	aa20      	add	r2, sp, #128	; 0x80
 80a2822:	eb02 08c8 	add.w	r8, r2, r8, lsl #3
 80a2826:	aa70      	add	r2, sp, #448	; 0x1c0
 80a2828:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80a282c:	9301      	str	r3, [sp, #4]
 80a282e:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 80a2832:	f000 fdf1 	bl	80a3418 <__aeabi_i2d>
 80a2836:	9b03      	ldr	r3, [sp, #12]
 80a2838:	4647      	mov	r7, r8
 80a283a:	2b00      	cmp	r3, #0
 80a283c:	f108 0808 	add.w	r8, r8, #8
 80a2840:	e948 0102 	strd	r0, r1, [r8, #-8]
 80a2844:	db1f      	blt.n	80a2886 <__kernel_rem_pio2+0x2e6>
 80a2846:	2400      	movs	r4, #0
 80a2848:	2500      	movs	r5, #0
 80a284a:	9e04      	ldr	r6, [sp, #16]
 80a284c:	3f08      	subs	r7, #8
 80a284e:	e001      	b.n	80a2854 <__kernel_rem_pio2+0x2b4>
 80a2850:	e877 0102 	ldrd	r0, r1, [r7], #-8
 80a2854:	e9f6 2302 	ldrd	r2, r3, [r6, #8]!
 80a2858:	f000 fe48 	bl	80a34ec <__aeabi_dmul>
 80a285c:	4602      	mov	r2, r0
 80a285e:	460b      	mov	r3, r1
 80a2860:	4620      	mov	r0, r4
 80a2862:	4629      	mov	r1, r5
 80a2864:	f000 fc8c 	bl	80a3180 <__adddf3>
 80a2868:	455e      	cmp	r6, fp
 80a286a:	4604      	mov	r4, r0
 80a286c:	460d      	mov	r5, r1
 80a286e:	d1ef      	bne.n	80a2850 <__kernel_rem_pio2+0x2b0>
 80a2870:	9b01      	ldr	r3, [sp, #4]
 80a2872:	f109 0901 	add.w	r9, r9, #1
 80a2876:	e8e3 4502 	strd	r4, r5, [r3], #8
 80a287a:	9301      	str	r3, [sp, #4]
 80a287c:	9b02      	ldr	r3, [sp, #8]
 80a287e:	4599      	cmp	r9, r3
 80a2880:	ddd5      	ble.n	80a282e <__kernel_rem_pio2+0x28e>
 80a2882:	9301      	str	r3, [sp, #4]
 80a2884:	e715      	b.n	80a26b2 <__kernel_rem_pio2+0x112>
 80a2886:	2400      	movs	r4, #0
 80a2888:	2500      	movs	r5, #0
 80a288a:	e7f1      	b.n	80a2870 <__kernel_rem_pio2+0x2d0>
 80a288c:	080a3ff8 	.word	0x080a3ff8
 80a2890:	2aaaaaab 	.word	0x2aaaaaab
 80a2894:	3e700000 	.word	0x3e700000
 80a2898:	41700000 	.word	0x41700000
 80a289c:	40200000 	.word	0x40200000
 80a28a0:	d16b      	bne.n	80a297a <__kernel_rem_pio2+0x3da>
 80a28a2:	9b01      	ldr	r3, [sp, #4]
 80a28a4:	aa0c      	add	r2, sp, #48	; 0x30
 80a28a6:	3b01      	subs	r3, #1
 80a28a8:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 80a28ac:	15ed      	asrs	r5, r5, #23
 80a28ae:	2d00      	cmp	r5, #0
 80a28b0:	f77f af74 	ble.w	80a279c <__kernel_rem_pio2+0x1fc>
 80a28b4:	9b01      	ldr	r3, [sp, #4]
 80a28b6:	f108 0801 	add.w	r8, r8, #1
 80a28ba:	2b00      	cmp	r3, #0
 80a28bc:	f340 81c9 	ble.w	80a2c52 <__kernel_rem_pio2+0x6b2>
 80a28c0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80a28c2:	2c00      	cmp	r4, #0
 80a28c4:	d151      	bne.n	80a296a <__kernel_rem_pio2+0x3ca>
 80a28c6:	9b01      	ldr	r3, [sp, #4]
 80a28c8:	2b01      	cmp	r3, #1
 80a28ca:	d020      	beq.n	80a290e <__kernel_rem_pio2+0x36e>
 80a28cc:	2201      	movs	r2, #1
 80a28ce:	ab0c      	add	r3, sp, #48	; 0x30
 80a28d0:	f853 4f04 	ldr.w	r4, [r3, #4]!
 80a28d4:	2c00      	cmp	r4, #0
 80a28d6:	d04b      	beq.n	80a2970 <__kernel_rem_pio2+0x3d0>
 80a28d8:	1c53      	adds	r3, r2, #1
 80a28da:	a90c      	add	r1, sp, #48	; 0x30
 80a28dc:	f1c4 7480 	rsb	r4, r4, #16777216	; 0x1000000
 80a28e0:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
 80a28e4:	9901      	ldr	r1, [sp, #4]
 80a28e6:	4299      	cmp	r1, r3
 80a28e8:	dd10      	ble.n	80a290c <__kernel_rem_pio2+0x36c>
 80a28ea:	ac0c      	add	r4, sp, #48	; 0x30
 80a28ec:	aa0c      	add	r2, sp, #48	; 0x30
 80a28ee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80a28f2:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80a28f6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80a28fa:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80a28fe:	e000      	b.n	80a2902 <__kernel_rem_pio2+0x362>
 80a2900:	681a      	ldr	r2, [r3, #0]
 80a2902:	1a82      	subs	r2, r0, r2
 80a2904:	f843 2b04 	str.w	r2, [r3], #4
 80a2908:	428b      	cmp	r3, r1
 80a290a:	d1f9      	bne.n	80a2900 <__kernel_rem_pio2+0x360>
 80a290c:	2401      	movs	r4, #1
 80a290e:	9b06      	ldr	r3, [sp, #24]
 80a2910:	2b00      	cmp	r3, #0
 80a2912:	dd0e      	ble.n	80a2932 <__kernel_rem_pio2+0x392>
 80a2914:	2b01      	cmp	r3, #1
 80a2916:	f000 818c 	beq.w	80a2c32 <__kernel_rem_pio2+0x692>
 80a291a:	2b02      	cmp	r3, #2
 80a291c:	d109      	bne.n	80a2932 <__kernel_rem_pio2+0x392>
 80a291e:	9b01      	ldr	r3, [sp, #4]
 80a2920:	a90c      	add	r1, sp, #48	; 0x30
 80a2922:	1e5a      	subs	r2, r3, #1
 80a2924:	ab0c      	add	r3, sp, #48	; 0x30
 80a2926:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a292a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80a292e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80a2932:	2d02      	cmp	r5, #2
 80a2934:	f47f af32 	bne.w	80a279c <__kernel_rem_pio2+0x1fc>
 80a2938:	4632      	mov	r2, r6
 80a293a:	463b      	mov	r3, r7
 80a293c:	2000      	movs	r0, #0
 80a293e:	497a      	ldr	r1, [pc, #488]	; (80a2b28 <__kernel_rem_pio2+0x588>)
 80a2940:	f000 fc1c 	bl	80a317c <__aeabi_dsub>
 80a2944:	4606      	mov	r6, r0
 80a2946:	460f      	mov	r7, r1
 80a2948:	2c00      	cmp	r4, #0
 80a294a:	f43f af27 	beq.w	80a279c <__kernel_rem_pio2+0x1fc>
 80a294e:	9a06      	ldr	r2, [sp, #24]
 80a2950:	2000      	movs	r0, #0
 80a2952:	4975      	ldr	r1, [pc, #468]	; (80a2b28 <__kernel_rem_pio2+0x588>)
 80a2954:	f000 fb90 	bl	80a3078 <scalbn>
 80a2958:	4602      	mov	r2, r0
 80a295a:	460b      	mov	r3, r1
 80a295c:	4630      	mov	r0, r6
 80a295e:	4639      	mov	r1, r7
 80a2960:	f000 fc0c 	bl	80a317c <__aeabi_dsub>
 80a2964:	4606      	mov	r6, r0
 80a2966:	460f      	mov	r7, r1
 80a2968:	e718      	b.n	80a279c <__kernel_rem_pio2+0x1fc>
 80a296a:	2301      	movs	r3, #1
 80a296c:	2200      	movs	r2, #0
 80a296e:	e7b4      	b.n	80a28da <__kernel_rem_pio2+0x33a>
 80a2970:	9901      	ldr	r1, [sp, #4]
 80a2972:	3201      	adds	r2, #1
 80a2974:	428a      	cmp	r2, r1
 80a2976:	d1ab      	bne.n	80a28d0 <__kernel_rem_pio2+0x330>
 80a2978:	e7c9      	b.n	80a290e <__kernel_rem_pio2+0x36e>
 80a297a:	2200      	movs	r2, #0
 80a297c:	4b6b      	ldr	r3, [pc, #428]	; (80a2b2c <__kernel_rem_pio2+0x58c>)
 80a297e:	f001 f83b 	bl	80a39f8 <__aeabi_dcmpge>
 80a2982:	4605      	mov	r5, r0
 80a2984:	2800      	cmp	r0, #0
 80a2986:	f43f af09 	beq.w	80a279c <__kernel_rem_pio2+0x1fc>
 80a298a:	9b01      	ldr	r3, [sp, #4]
 80a298c:	f108 0801 	add.w	r8, r8, #1
 80a2990:	2b00      	cmp	r3, #0
 80a2992:	bfc8      	it	gt
 80a2994:	2502      	movgt	r5, #2
 80a2996:	dc93      	bgt.n	80a28c0 <__kernel_rem_pio2+0x320>
 80a2998:	4632      	mov	r2, r6
 80a299a:	463b      	mov	r3, r7
 80a299c:	2000      	movs	r0, #0
 80a299e:	4962      	ldr	r1, [pc, #392]	; (80a2b28 <__kernel_rem_pio2+0x588>)
 80a29a0:	f000 fbec 	bl	80a317c <__aeabi_dsub>
 80a29a4:	2502      	movs	r5, #2
 80a29a6:	4606      	mov	r6, r0
 80a29a8:	460f      	mov	r7, r1
 80a29aa:	e6f7      	b.n	80a279c <__kernel_rem_pio2+0x1fc>
 80a29ac:	9b01      	ldr	r3, [sp, #4]
 80a29ae:	3301      	adds	r3, #1
 80a29b0:	4699      	mov	r9, r3
 80a29b2:	9302      	str	r3, [sp, #8]
 80a29b4:	e726      	b.n	80a2804 <__kernel_rem_pio2+0x264>
 80a29b6:	2400      	movs	r4, #0
 80a29b8:	2500      	movs	r5, #0
 80a29ba:	e662      	b.n	80a2682 <__kernel_rem_pio2+0xe2>
 80a29bc:	9b06      	ldr	r3, [sp, #24]
 80a29be:	9503      	str	r5, [sp, #12]
 80a29c0:	f1a3 0218 	sub.w	r2, r3, #24
 80a29c4:	ab0c      	add	r3, sp, #48	; 0x30
 80a29c6:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
 80a29ca:	f8cd 801c 	str.w	r8, [sp, #28]
 80a29ce:	9206      	str	r2, [sp, #24]
 80a29d0:	b973      	cbnz	r3, 80a29f0 <__kernel_rem_pio2+0x450>
 80a29d2:	9b01      	ldr	r3, [sp, #4]
 80a29d4:	a90c      	add	r1, sp, #48	; 0x30
 80a29d6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80a29da:	3b02      	subs	r3, #2
 80a29dc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80a29e0:	f853 1904 	ldr.w	r1, [r3], #-4
 80a29e4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80a29e8:	3a18      	subs	r2, #24
 80a29ea:	2900      	cmp	r1, #0
 80a29ec:	d0f8      	beq.n	80a29e0 <__kernel_rem_pio2+0x440>
 80a29ee:	9206      	str	r2, [sp, #24]
 80a29f0:	2000      	movs	r0, #0
 80a29f2:	9a06      	ldr	r2, [sp, #24]
 80a29f4:	494c      	ldr	r1, [pc, #304]	; (80a2b28 <__kernel_rem_pio2+0x588>)
 80a29f6:	f000 fb3f 	bl	80a3078 <scalbn>
 80a29fa:	f1ba 0f00 	cmp.w	sl, #0
 80a29fe:	4604      	mov	r4, r0
 80a2a00:	460d      	mov	r5, r1
 80a2a02:	f2c0 81d7 	blt.w	80a2db4 <__kernel_rem_pio2+0x814>
 80a2a06:	f04f 0800 	mov.w	r8, #0
 80a2a0a:	ab70      	add	r3, sp, #448	; 0x1c0
 80a2a0c:	eb03 0bca 	add.w	fp, r3, sl, lsl #3
 80a2a10:	aa0c      	add	r2, sp, #48	; 0x30
 80a2a12:	f10a 0301 	add.w	r3, sl, #1
 80a2a16:	9306      	str	r3, [sp, #24]
 80a2a18:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 80a2a1c:	f8df 9110 	ldr.w	r9, [pc, #272]	; 80a2b30 <__kernel_rem_pio2+0x590>
 80a2a20:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80a2a24:	9304      	str	r3, [sp, #16]
 80a2a26:	f10b 0708 	add.w	r7, fp, #8
 80a2a2a:	f856 0d04 	ldr.w	r0, [r6, #-4]!
 80a2a2e:	f000 fcf3 	bl	80a3418 <__aeabi_i2d>
 80a2a32:	4622      	mov	r2, r4
 80a2a34:	462b      	mov	r3, r5
 80a2a36:	f000 fd59 	bl	80a34ec <__aeabi_dmul>
 80a2a3a:	464b      	mov	r3, r9
 80a2a3c:	e967 0102 	strd	r0, r1, [r7, #-8]!
 80a2a40:	4642      	mov	r2, r8
 80a2a42:	4620      	mov	r0, r4
 80a2a44:	4629      	mov	r1, r5
 80a2a46:	f000 fd51 	bl	80a34ec <__aeabi_dmul>
 80a2a4a:	ab0c      	add	r3, sp, #48	; 0x30
 80a2a4c:	429e      	cmp	r6, r3
 80a2a4e:	4604      	mov	r4, r0
 80a2a50:	460d      	mov	r5, r1
 80a2a52:	d1ea      	bne.n	80a2a2a <__kernel_rem_pio2+0x48a>
 80a2a54:	ab48      	add	r3, sp, #288	; 0x120
 80a2a56:	e9cd 3a01 	strd	r3, sl, [sp, #4]
 80a2a5a:	f8dd a014 	ldr.w	sl, [sp, #20]
 80a2a5e:	f04f 0900 	mov.w	r9, #0
 80a2a62:	f1ba 0f00 	cmp.w	sl, #0
 80a2a66:	db2c      	blt.n	80a2ac2 <__kernel_rem_pio2+0x522>
 80a2a68:	a32d      	add	r3, pc, #180	; (adr r3, 80a2b20 <__kernel_rem_pio2+0x580>)
 80a2a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2a6e:	465f      	mov	r7, fp
 80a2a70:	2600      	movs	r6, #0
 80a2a72:	2400      	movs	r4, #0
 80a2a74:	2500      	movs	r5, #0
 80a2a76:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 80a2b34 <__kernel_rem_pio2+0x594>
 80a2a7a:	e003      	b.n	80a2a84 <__kernel_rem_pio2+0x4e4>
 80a2a7c:	45b1      	cmp	r9, r6
 80a2a7e:	db10      	blt.n	80a2aa2 <__kernel_rem_pio2+0x502>
 80a2a80:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 80a2a84:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 80a2a88:	f000 fd30 	bl	80a34ec <__aeabi_dmul>
 80a2a8c:	4602      	mov	r2, r0
 80a2a8e:	460b      	mov	r3, r1
 80a2a90:	4620      	mov	r0, r4
 80a2a92:	4629      	mov	r1, r5
 80a2a94:	f000 fb74 	bl	80a3180 <__adddf3>
 80a2a98:	3601      	adds	r6, #1
 80a2a9a:	45b2      	cmp	sl, r6
 80a2a9c:	4604      	mov	r4, r0
 80a2a9e:	460d      	mov	r5, r1
 80a2aa0:	daec      	bge.n	80a2a7c <__kernel_rem_pio2+0x4dc>
 80a2aa2:	9b01      	ldr	r3, [sp, #4]
 80a2aa4:	9a02      	ldr	r2, [sp, #8]
 80a2aa6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80a2aaa:	4591      	cmp	r9, r2
 80a2aac:	e9c3 4500 	strd	r4, r5, [r3]
 80a2ab0:	f1ab 0b08 	sub.w	fp, fp, #8
 80a2ab4:	f109 0301 	add.w	r3, r9, #1
 80a2ab8:	d006      	beq.n	80a2ac8 <__kernel_rem_pio2+0x528>
 80a2aba:	f1ba 0f00 	cmp.w	sl, #0
 80a2abe:	4699      	mov	r9, r3
 80a2ac0:	dad2      	bge.n	80a2a68 <__kernel_rem_pio2+0x4c8>
 80a2ac2:	2400      	movs	r4, #0
 80a2ac4:	2500      	movs	r5, #0
 80a2ac6:	e7ec      	b.n	80a2aa2 <__kernel_rem_pio2+0x502>
 80a2ac8:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80a2aca:	f8dd a008 	ldr.w	sl, [sp, #8]
 80a2ace:	2b02      	cmp	r3, #2
 80a2ad0:	dc32      	bgt.n	80a2b38 <__kernel_rem_pio2+0x598>
 80a2ad2:	2b00      	cmp	r3, #0
 80a2ad4:	f300 80f2 	bgt.w	80a2cbc <__kernel_rem_pio2+0x71c>
 80a2ad8:	d118      	bne.n	80a2b0c <__kernel_rem_pio2+0x56c>
 80a2ada:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80a2adc:	9d04      	ldr	r5, [sp, #16]
 80a2ade:	461c      	mov	r4, r3
 80a2ae0:	9e01      	ldr	r6, [sp, #4]
 80a2ae2:	3508      	adds	r5, #8
 80a2ae4:	4435      	add	r5, r6
 80a2ae6:	4618      	mov	r0, r3
 80a2ae8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80a2aec:	4621      	mov	r1, r4
 80a2aee:	f000 fb47 	bl	80a3180 <__adddf3>
 80a2af2:	42ae      	cmp	r6, r5
 80a2af4:	4603      	mov	r3, r0
 80a2af6:	460c      	mov	r4, r1
 80a2af8:	d1f5      	bne.n	80a2ae6 <__kernel_rem_pio2+0x546>
 80a2afa:	9a03      	ldr	r2, [sp, #12]
 80a2afc:	b10a      	cbz	r2, 80a2b02 <__kernel_rem_pio2+0x562>
 80a2afe:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 80a2b02:	4618      	mov	r0, r3
 80a2b04:	4621      	mov	r1, r4
 80a2b06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a2b08:	e9c3 0100 	strd	r0, r1, [r3]
 80a2b0c:	9b07      	ldr	r3, [sp, #28]
 80a2b0e:	f003 0007 	and.w	r0, r3, #7
 80a2b12:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80a2b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2b1a:	bf00      	nop
 80a2b1c:	f3af 8000 	nop.w
 80a2b20:	40000000 	.word	0x40000000
 80a2b24:	3ff921fb 	.word	0x3ff921fb
 80a2b28:	3ff00000 	.word	0x3ff00000
 80a2b2c:	3fe00000 	.word	0x3fe00000
 80a2b30:	3e700000 	.word	0x3e700000
 80a2b34:	080a3fc0 	.word	0x080a3fc0
 80a2b38:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80a2b3a:	2b03      	cmp	r3, #3
 80a2b3c:	d1e6      	bne.n	80a2b0c <__kernel_rem_pio2+0x56c>
 80a2b3e:	f1ba 0f00 	cmp.w	sl, #0
 80a2b42:	f000 814d 	beq.w	80a2de0 <__kernel_rem_pio2+0x840>
 80a2b46:	9b01      	ldr	r3, [sp, #4]
 80a2b48:	9a04      	ldr	r2, [sp, #16]
 80a2b4a:	4413      	add	r3, r2
 80a2b4c:	469b      	mov	fp, r3
 80a2b4e:	e9d3 4500 	ldrd	r4, r5, [r3]
 80a2b52:	e95b 6702 	ldrd	r6, r7, [fp, #-8]
 80a2b56:	4620      	mov	r0, r4
 80a2b58:	4629      	mov	r1, r5
 80a2b5a:	4632      	mov	r2, r6
 80a2b5c:	463b      	mov	r3, r7
 80a2b5e:	f000 fb0f 	bl	80a3180 <__adddf3>
 80a2b62:	46a0      	mov	r8, r4
 80a2b64:	46a9      	mov	r9, r5
 80a2b66:	4604      	mov	r4, r0
 80a2b68:	460d      	mov	r5, r1
 80a2b6a:	4622      	mov	r2, r4
 80a2b6c:	462b      	mov	r3, r5
 80a2b6e:	4630      	mov	r0, r6
 80a2b70:	4639      	mov	r1, r7
 80a2b72:	f000 fb03 	bl	80a317c <__aeabi_dsub>
 80a2b76:	464b      	mov	r3, r9
 80a2b78:	4642      	mov	r2, r8
 80a2b7a:	f000 fb01 	bl	80a3180 <__adddf3>
 80a2b7e:	e9cb 0100 	strd	r0, r1, [fp]
 80a2b82:	e96b 4502 	strd	r4, r5, [fp, #-8]!
 80a2b86:	9b01      	ldr	r3, [sp, #4]
 80a2b88:	455b      	cmp	r3, fp
 80a2b8a:	d1e2      	bne.n	80a2b52 <__kernel_rem_pio2+0x5b2>
 80a2b8c:	f1ba 0f01 	cmp.w	sl, #1
 80a2b90:	f340 8126 	ble.w	80a2de0 <__kernel_rem_pio2+0x840>
 80a2b94:	9b04      	ldr	r3, [sp, #16]
 80a2b96:	9a01      	ldr	r2, [sp, #4]
 80a2b98:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 80a2b9c:	4413      	add	r3, r2
 80a2b9e:	469a      	mov	sl, r3
 80a2ba0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80a2ba4:	9302      	str	r3, [sp, #8]
 80a2ba6:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 80a2baa:	4620      	mov	r0, r4
 80a2bac:	4629      	mov	r1, r5
 80a2bae:	4632      	mov	r2, r6
 80a2bb0:	463b      	mov	r3, r7
 80a2bb2:	f000 fae5 	bl	80a3180 <__adddf3>
 80a2bb6:	46a0      	mov	r8, r4
 80a2bb8:	46a9      	mov	r9, r5
 80a2bba:	4604      	mov	r4, r0
 80a2bbc:	460d      	mov	r5, r1
 80a2bbe:	4622      	mov	r2, r4
 80a2bc0:	462b      	mov	r3, r5
 80a2bc2:	4630      	mov	r0, r6
 80a2bc4:	4639      	mov	r1, r7
 80a2bc6:	f000 fad9 	bl	80a317c <__aeabi_dsub>
 80a2bca:	4642      	mov	r2, r8
 80a2bcc:	464b      	mov	r3, r9
 80a2bce:	f000 fad7 	bl	80a3180 <__adddf3>
 80a2bd2:	e9ca 0100 	strd	r0, r1, [sl]
 80a2bd6:	e96a 4502 	strd	r4, r5, [sl, #-8]!
 80a2bda:	45d3      	cmp	fp, sl
 80a2bdc:	d1e3      	bne.n	80a2ba6 <__kernel_rem_pio2+0x606>
 80a2bde:	2300      	movs	r3, #0
 80a2be0:	461e      	mov	r6, r3
 80a2be2:	9c02      	ldr	r4, [sp, #8]
 80a2be4:	9a01      	ldr	r2, [sp, #4]
 80a2be6:	3408      	adds	r4, #8
 80a2be8:	f102 0510 	add.w	r5, r2, #16
 80a2bec:	4618      	mov	r0, r3
 80a2bee:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80a2bf2:	4631      	mov	r1, r6
 80a2bf4:	f000 fac4 	bl	80a3180 <__adddf3>
 80a2bf8:	42a5      	cmp	r5, r4
 80a2bfa:	4603      	mov	r3, r0
 80a2bfc:	460e      	mov	r6, r1
 80a2bfe:	d1f5      	bne.n	80a2bec <__kernel_rem_pio2+0x64c>
 80a2c00:	9a03      	ldr	r2, [sp, #12]
 80a2c02:	2a00      	cmp	r2, #0
 80a2c04:	f040 80a4 	bne.w	80a2d50 <__kernel_rem_pio2+0x7b0>
 80a2c08:	4618      	mov	r0, r3
 80a2c0a:	4631      	mov	r1, r6
 80a2c0c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80a2c0e:	9b01      	ldr	r3, [sp, #4]
 80a2c10:	e9c4 0104 	strd	r0, r1, [r4, #16]
 80a2c14:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80a2c18:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80a2c1c:	e9dd 2348 	ldrd	r2, r3, [sp, #288]	; 0x120
 80a2c20:	e9c4 2300 	strd	r2, r3, [r4]
 80a2c24:	9b07      	ldr	r3, [sp, #28]
 80a2c26:	f003 0007 	and.w	r0, r3, #7
 80a2c2a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80a2c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2c32:	9b01      	ldr	r3, [sp, #4]
 80a2c34:	a90c      	add	r1, sp, #48	; 0x30
 80a2c36:	1e5a      	subs	r2, r3, #1
 80a2c38:	ab0c      	add	r3, sp, #48	; 0x30
 80a2c3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a2c3e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80a2c42:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80a2c46:	e674      	b.n	80a2932 <__kernel_rem_pio2+0x392>
 80a2c48:	2100      	movs	r1, #0
 80a2c4a:	f06f 0317 	mvn.w	r3, #23
 80a2c4e:	9107      	str	r1, [sp, #28]
 80a2c50:	e4c4      	b.n	80a25dc <__kernel_rem_pio2+0x3c>
 80a2c52:	2400      	movs	r4, #0
 80a2c54:	e65b      	b.n	80a290e <__kernel_rem_pio2+0x36e>
 80a2c56:	9c06      	ldr	r4, [sp, #24]
 80a2c58:	4630      	mov	r0, r6
 80a2c5a:	4639      	mov	r1, r7
 80a2c5c:	4262      	negs	r2, r4
 80a2c5e:	9503      	str	r5, [sp, #12]
 80a2c60:	f8cd 801c 	str.w	r8, [sp, #28]
 80a2c64:	f000 fa08 	bl	80a3078 <scalbn>
 80a2c68:	2200      	movs	r2, #0
 80a2c6a:	4b5f      	ldr	r3, [pc, #380]	; (80a2de8 <__kernel_rem_pio2+0x848>)
 80a2c6c:	4606      	mov	r6, r0
 80a2c6e:	460f      	mov	r7, r1
 80a2c70:	f000 fec2 	bl	80a39f8 <__aeabi_dcmpge>
 80a2c74:	2800      	cmp	r0, #0
 80a2c76:	d061      	beq.n	80a2d3c <__kernel_rem_pio2+0x79c>
 80a2c78:	2200      	movs	r2, #0
 80a2c7a:	4b5c      	ldr	r3, [pc, #368]	; (80a2dec <__kernel_rem_pio2+0x84c>)
 80a2c7c:	3418      	adds	r4, #24
 80a2c7e:	4630      	mov	r0, r6
 80a2c80:	4639      	mov	r1, r7
 80a2c82:	9406      	str	r4, [sp, #24]
 80a2c84:	f000 fc32 	bl	80a34ec <__aeabi_dmul>
 80a2c88:	f000 feca 	bl	80a3a20 <__aeabi_d2iz>
 80a2c8c:	4604      	mov	r4, r0
 80a2c8e:	f000 fbc3 	bl	80a3418 <__aeabi_i2d>
 80a2c92:	2200      	movs	r2, #0
 80a2c94:	4b54      	ldr	r3, [pc, #336]	; (80a2de8 <__kernel_rem_pio2+0x848>)
 80a2c96:	f000 fc29 	bl	80a34ec <__aeabi_dmul>
 80a2c9a:	460b      	mov	r3, r1
 80a2c9c:	4602      	mov	r2, r0
 80a2c9e:	4639      	mov	r1, r7
 80a2ca0:	4630      	mov	r0, r6
 80a2ca2:	f000 fa6b 	bl	80a317c <__aeabi_dsub>
 80a2ca6:	f000 febb 	bl	80a3a20 <__aeabi_d2iz>
 80a2caa:	9d01      	ldr	r5, [sp, #4]
 80a2cac:	ab0c      	add	r3, sp, #48	; 0x30
 80a2cae:	f105 0a01 	add.w	sl, r5, #1
 80a2cb2:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 80a2cb6:	f843 402a 	str.w	r4, [r3, sl, lsl #2]
 80a2cba:	e699      	b.n	80a29f0 <__kernel_rem_pio2+0x450>
 80a2cbc:	2600      	movs	r6, #0
 80a2cbe:	4634      	mov	r4, r6
 80a2cc0:	9f01      	ldr	r7, [sp, #4]
 80a2cc2:	9b06      	ldr	r3, [sp, #24]
 80a2cc4:	eb07 05c3 	add.w	r5, r7, r3, lsl #3
 80a2cc8:	4630      	mov	r0, r6
 80a2cca:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80a2cce:	4621      	mov	r1, r4
 80a2cd0:	f000 fa56 	bl	80a3180 <__adddf3>
 80a2cd4:	42af      	cmp	r7, r5
 80a2cd6:	4606      	mov	r6, r0
 80a2cd8:	460c      	mov	r4, r1
 80a2cda:	d1f5      	bne.n	80a2cc8 <__kernel_rem_pio2+0x728>
 80a2cdc:	9b03      	ldr	r3, [sp, #12]
 80a2cde:	2b00      	cmp	r3, #0
 80a2ce0:	d150      	bne.n	80a2d84 <__kernel_rem_pio2+0x7e4>
 80a2ce2:	4630      	mov	r0, r6
 80a2ce4:	4621      	mov	r1, r4
 80a2ce6:	4623      	mov	r3, r4
 80a2ce8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80a2cea:	4632      	mov	r2, r6
 80a2cec:	e9c4 0100 	strd	r0, r1, [r4]
 80a2cf0:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80a2cf4:	f000 fa42 	bl	80a317c <__aeabi_dsub>
 80a2cf8:	f1ba 0f00 	cmp.w	sl, #0
 80a2cfc:	4603      	mov	r3, r0
 80a2cfe:	460e      	mov	r6, r1
 80a2d00:	dd10      	ble.n	80a2d24 <__kernel_rem_pio2+0x784>
 80a2d02:	2401      	movs	r4, #1
 80a2d04:	ad48      	add	r5, sp, #288	; 0x120
 80a2d06:	4618      	mov	r0, r3
 80a2d08:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 80a2d0c:	4631      	mov	r1, r6
 80a2d0e:	f000 fa37 	bl	80a3180 <__adddf3>
 80a2d12:	3401      	adds	r4, #1
 80a2d14:	45a2      	cmp	sl, r4
 80a2d16:	4603      	mov	r3, r0
 80a2d18:	460e      	mov	r6, r1
 80a2d1a:	daf4      	bge.n	80a2d06 <__kernel_rem_pio2+0x766>
 80a2d1c:	9a03      	ldr	r2, [sp, #12]
 80a2d1e:	b10a      	cbz	r2, 80a2d24 <__kernel_rem_pio2+0x784>
 80a2d20:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 80a2d24:	4618      	mov	r0, r3
 80a2d26:	4631      	mov	r1, r6
 80a2d28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a2d2a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80a2d2e:	9b07      	ldr	r3, [sp, #28]
 80a2d30:	f003 0007 	and.w	r0, r3, #7
 80a2d34:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80a2d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2d3c:	4630      	mov	r0, r6
 80a2d3e:	4639      	mov	r1, r7
 80a2d40:	f000 fe6e 	bl	80a3a20 <__aeabi_d2iz>
 80a2d44:	9b01      	ldr	r3, [sp, #4]
 80a2d46:	aa0c      	add	r2, sp, #48	; 0x30
 80a2d48:	469a      	mov	sl, r3
 80a2d4a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 80a2d4e:	e64f      	b.n	80a29f0 <__kernel_rem_pio2+0x450>
 80a2d50:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80a2d52:	9c01      	ldr	r4, [sp, #4]
 80a2d54:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 80a2d58:	616e      	str	r6, [r5, #20]
 80a2d5a:	4626      	mov	r6, r4
 80a2d5c:	6820      	ldr	r0, [r4, #0]
 80a2d5e:	68a2      	ldr	r2, [r4, #8]
 80a2d60:	6864      	ldr	r4, [r4, #4]
 80a2d62:	612b      	str	r3, [r5, #16]
 80a2d64:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80a2d68:	68f4      	ldr	r4, [r6, #12]
 80a2d6a:	e9c5 0100 	strd	r0, r1, [r5]
 80a2d6e:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 80a2d72:	e9c5 2302 	strd	r2, r3, [r5, #8]
 80a2d76:	9b07      	ldr	r3, [sp, #28]
 80a2d78:	f003 0007 	and.w	r0, r3, #7
 80a2d7c:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80a2d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2d84:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80a2d86:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80a2d8a:	6006      	str	r6, [r0, #0]
 80a2d8c:	4632      	mov	r2, r6
 80a2d8e:	4623      	mov	r3, r4
 80a2d90:	6041      	str	r1, [r0, #4]
 80a2d92:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80a2d96:	f000 f9f1 	bl	80a317c <__aeabi_dsub>
 80a2d9a:	f1ba 0f00 	cmp.w	sl, #0
 80a2d9e:	4603      	mov	r3, r0
 80a2da0:	460e      	mov	r6, r1
 80a2da2:	dcae      	bgt.n	80a2d02 <__kernel_rem_pio2+0x762>
 80a2da4:	e7bc      	b.n	80a2d20 <__kernel_rem_pio2+0x780>
 80a2da6:	f1a7 0308 	sub.w	r3, r7, #8
 80a2daa:	9304      	str	r3, [sp, #16]
 80a2dac:	9b08      	ldr	r3, [sp, #32]
 80a2dae:	00db      	lsls	r3, r3, #3
 80a2db0:	9302      	str	r3, [sp, #8]
 80a2db2:	e46f      	b.n	80a2694 <__kernel_rem_pio2+0xf4>
 80a2db4:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80a2db6:	2b02      	cmp	r3, #2
 80a2db8:	dc06      	bgt.n	80a2dc8 <__kernel_rem_pio2+0x828>
 80a2dba:	2b00      	cmp	r3, #0
 80a2dbc:	dc0d      	bgt.n	80a2dda <__kernel_rem_pio2+0x83a>
 80a2dbe:	f47f aea5 	bne.w	80a2b0c <__kernel_rem_pio2+0x56c>
 80a2dc2:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80a2dc4:	461c      	mov	r4, r3
 80a2dc6:	e698      	b.n	80a2afa <__kernel_rem_pio2+0x55a>
 80a2dc8:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80a2dca:	2b03      	cmp	r3, #3
 80a2dcc:	f47f ae9e 	bne.w	80a2b0c <__kernel_rem_pio2+0x56c>
 80a2dd0:	2300      	movs	r3, #0
 80a2dd2:	aa48      	add	r2, sp, #288	; 0x120
 80a2dd4:	461e      	mov	r6, r3
 80a2dd6:	9201      	str	r2, [sp, #4]
 80a2dd8:	e712      	b.n	80a2c00 <__kernel_rem_pio2+0x660>
 80a2dda:	2600      	movs	r6, #0
 80a2ddc:	4634      	mov	r4, r6
 80a2dde:	e77d      	b.n	80a2cdc <__kernel_rem_pio2+0x73c>
 80a2de0:	2300      	movs	r3, #0
 80a2de2:	461e      	mov	r6, r3
 80a2de4:	e70c      	b.n	80a2c00 <__kernel_rem_pio2+0x660>
 80a2de6:	bf00      	nop
 80a2de8:	41700000 	.word	0x41700000
 80a2dec:	3e700000 	.word	0x3e700000

080a2df0 <__kernel_sin>:
 80a2df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a2df4:	b085      	sub	sp, #20
 80a2df6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80a2dfa:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80a2dfe:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80a2e02:	4682      	mov	sl, r0
 80a2e04:	9101      	str	r1, [sp, #4]
 80a2e06:	da04      	bge.n	80a2e12 <__kernel_sin+0x22>
 80a2e08:	f000 fe0a 	bl	80a3a20 <__aeabi_d2iz>
 80a2e0c:	2800      	cmp	r0, #0
 80a2e0e:	f000 808e 	beq.w	80a2f2e <__kernel_sin+0x13e>
 80a2e12:	9b01      	ldr	r3, [sp, #4]
 80a2e14:	4652      	mov	r2, sl
 80a2e16:	4619      	mov	r1, r3
 80a2e18:	4650      	mov	r0, sl
 80a2e1a:	f000 fb67 	bl	80a34ec <__aeabi_dmul>
 80a2e1e:	4604      	mov	r4, r0
 80a2e20:	460d      	mov	r5, r1
 80a2e22:	9b01      	ldr	r3, [sp, #4]
 80a2e24:	4622      	mov	r2, r4
 80a2e26:	4619      	mov	r1, r3
 80a2e28:	4650      	mov	r0, sl
 80a2e2a:	462b      	mov	r3, r5
 80a2e2c:	f000 fb5e 	bl	80a34ec <__aeabi_dmul>
 80a2e30:	a343      	add	r3, pc, #268	; (adr r3, 80a2f40 <__kernel_sin+0x150>)
 80a2e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2e36:	4606      	mov	r6, r0
 80a2e38:	460f      	mov	r7, r1
 80a2e3a:	4620      	mov	r0, r4
 80a2e3c:	4629      	mov	r1, r5
 80a2e3e:	f000 fb55 	bl	80a34ec <__aeabi_dmul>
 80a2e42:	a341      	add	r3, pc, #260	; (adr r3, 80a2f48 <__kernel_sin+0x158>)
 80a2e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2e48:	f000 f998 	bl	80a317c <__aeabi_dsub>
 80a2e4c:	4622      	mov	r2, r4
 80a2e4e:	462b      	mov	r3, r5
 80a2e50:	f000 fb4c 	bl	80a34ec <__aeabi_dmul>
 80a2e54:	a33e      	add	r3, pc, #248	; (adr r3, 80a2f50 <__kernel_sin+0x160>)
 80a2e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2e5a:	f000 f991 	bl	80a3180 <__adddf3>
 80a2e5e:	4622      	mov	r2, r4
 80a2e60:	462b      	mov	r3, r5
 80a2e62:	f000 fb43 	bl	80a34ec <__aeabi_dmul>
 80a2e66:	a33c      	add	r3, pc, #240	; (adr r3, 80a2f58 <__kernel_sin+0x168>)
 80a2e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2e6c:	f000 f986 	bl	80a317c <__aeabi_dsub>
 80a2e70:	4622      	mov	r2, r4
 80a2e72:	462b      	mov	r3, r5
 80a2e74:	f000 fb3a 	bl	80a34ec <__aeabi_dmul>
 80a2e78:	a339      	add	r3, pc, #228	; (adr r3, 80a2f60 <__kernel_sin+0x170>)
 80a2e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2e7e:	f000 f97f 	bl	80a3180 <__adddf3>
 80a2e82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80a2e84:	4680      	mov	r8, r0
 80a2e86:	4689      	mov	r9, r1
 80a2e88:	b3bb      	cbz	r3, 80a2efa <__kernel_sin+0x10a>
 80a2e8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a2e8e:	2200      	movs	r2, #0
 80a2e90:	4b37      	ldr	r3, [pc, #220]	; (80a2f70 <__kernel_sin+0x180>)
 80a2e92:	f000 fb2b 	bl	80a34ec <__aeabi_dmul>
 80a2e96:	4642      	mov	r2, r8
 80a2e98:	464b      	mov	r3, r9
 80a2e9a:	4680      	mov	r8, r0
 80a2e9c:	4689      	mov	r9, r1
 80a2e9e:	4630      	mov	r0, r6
 80a2ea0:	4639      	mov	r1, r7
 80a2ea2:	f000 fb23 	bl	80a34ec <__aeabi_dmul>
 80a2ea6:	4602      	mov	r2, r0
 80a2ea8:	460b      	mov	r3, r1
 80a2eaa:	4640      	mov	r0, r8
 80a2eac:	4649      	mov	r1, r9
 80a2eae:	f000 f965 	bl	80a317c <__aeabi_dsub>
 80a2eb2:	4622      	mov	r2, r4
 80a2eb4:	462b      	mov	r3, r5
 80a2eb6:	f000 fb19 	bl	80a34ec <__aeabi_dmul>
 80a2eba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a2ebe:	f000 f95d 	bl	80a317c <__aeabi_dsub>
 80a2ec2:	a329      	add	r3, pc, #164	; (adr r3, 80a2f68 <__kernel_sin+0x178>)
 80a2ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2ec8:	4604      	mov	r4, r0
 80a2eca:	460d      	mov	r5, r1
 80a2ecc:	4630      	mov	r0, r6
 80a2ece:	4639      	mov	r1, r7
 80a2ed0:	f000 fb0c 	bl	80a34ec <__aeabi_dmul>
 80a2ed4:	4602      	mov	r2, r0
 80a2ed6:	460b      	mov	r3, r1
 80a2ed8:	4620      	mov	r0, r4
 80a2eda:	4629      	mov	r1, r5
 80a2edc:	f000 f950 	bl	80a3180 <__adddf3>
 80a2ee0:	4602      	mov	r2, r0
 80a2ee2:	460b      	mov	r3, r1
 80a2ee4:	4650      	mov	r0, sl
 80a2ee6:	9901      	ldr	r1, [sp, #4]
 80a2ee8:	f000 f948 	bl	80a317c <__aeabi_dsub>
 80a2eec:	4682      	mov	sl, r0
 80a2eee:	468b      	mov	fp, r1
 80a2ef0:	4650      	mov	r0, sl
 80a2ef2:	4659      	mov	r1, fp
 80a2ef4:	b005      	add	sp, #20
 80a2ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2efa:	4602      	mov	r2, r0
 80a2efc:	460b      	mov	r3, r1
 80a2efe:	4620      	mov	r0, r4
 80a2f00:	4629      	mov	r1, r5
 80a2f02:	f000 faf3 	bl	80a34ec <__aeabi_dmul>
 80a2f06:	a318      	add	r3, pc, #96	; (adr r3, 80a2f68 <__kernel_sin+0x178>)
 80a2f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2f0c:	f000 f936 	bl	80a317c <__aeabi_dsub>
 80a2f10:	4632      	mov	r2, r6
 80a2f12:	463b      	mov	r3, r7
 80a2f14:	f000 faea 	bl	80a34ec <__aeabi_dmul>
 80a2f18:	4652      	mov	r2, sl
 80a2f1a:	9b01      	ldr	r3, [sp, #4]
 80a2f1c:	f000 f930 	bl	80a3180 <__adddf3>
 80a2f20:	4682      	mov	sl, r0
 80a2f22:	468b      	mov	fp, r1
 80a2f24:	4650      	mov	r0, sl
 80a2f26:	4659      	mov	r1, fp
 80a2f28:	b005      	add	sp, #20
 80a2f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2f2e:	f8dd b004 	ldr.w	fp, [sp, #4]
 80a2f32:	4650      	mov	r0, sl
 80a2f34:	4659      	mov	r1, fp
 80a2f36:	b005      	add	sp, #20
 80a2f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2f3c:	f3af 8000 	nop.w
 80a2f40:	5acfd57c 	.word	0x5acfd57c
 80a2f44:	3de5d93a 	.word	0x3de5d93a
 80a2f48:	8a2b9ceb 	.word	0x8a2b9ceb
 80a2f4c:	3e5ae5e6 	.word	0x3e5ae5e6
 80a2f50:	57b1fe7d 	.word	0x57b1fe7d
 80a2f54:	3ec71de3 	.word	0x3ec71de3
 80a2f58:	19c161d5 	.word	0x19c161d5
 80a2f5c:	3f2a01a0 	.word	0x3f2a01a0
 80a2f60:	1110f8a6 	.word	0x1110f8a6
 80a2f64:	3f811111 	.word	0x3f811111
 80a2f68:	55555549 	.word	0x55555549
 80a2f6c:	3fc55555 	.word	0x3fc55555
 80a2f70:	3fe00000 	.word	0x3fe00000

080a2f74 <fabs>:
 80a2f74:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a2f78:	4770      	bx	lr
 80a2f7a:	bf00      	nop
 80a2f7c:	0000      	movs	r0, r0
	...

080a2f80 <floor>:
 80a2f80:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80a2f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2f86:	f2a2 35ff 	subw	r5, r2, #1023	; 0x3ff
 80a2f8a:	2d13      	cmp	r5, #19
 80a2f8c:	460b      	mov	r3, r1
 80a2f8e:	4684      	mov	ip, r0
 80a2f90:	460c      	mov	r4, r1
 80a2f92:	4606      	mov	r6, r0
 80a2f94:	dc30      	bgt.n	80a2ff8 <floor+0x78>
 80a2f96:	2d00      	cmp	r5, #0
 80a2f98:	db1e      	blt.n	80a2fd8 <floor+0x58>
 80a2f9a:	4f35      	ldr	r7, [pc, #212]	; (80a3070 <floor+0xf0>)
 80a2f9c:	412f      	asrs	r7, r5
 80a2f9e:	ea01 0207 	and.w	r2, r1, r7
 80a2fa2:	4302      	orrs	r2, r0
 80a2fa4:	d015      	beq.n	80a2fd2 <floor+0x52>
 80a2fa6:	a330      	add	r3, pc, #192	; (adr r3, 80a3068 <floor+0xe8>)
 80a2fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2fac:	f000 f8e8 	bl	80a3180 <__adddf3>
 80a2fb0:	2200      	movs	r2, #0
 80a2fb2:	2300      	movs	r3, #0
 80a2fb4:	f000 fd2a 	bl	80a3a0c <__aeabi_dcmpgt>
 80a2fb8:	b148      	cbz	r0, 80a2fce <floor+0x4e>
 80a2fba:	2c00      	cmp	r4, #0
 80a2fbc:	da04      	bge.n	80a2fc8 <floor+0x48>
 80a2fbe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80a2fc2:	fa43 f505 	asr.w	r5, r3, r5
 80a2fc6:	442c      	add	r4, r5
 80a2fc8:	2600      	movs	r6, #0
 80a2fca:	ea24 0407 	bic.w	r4, r4, r7
 80a2fce:	4623      	mov	r3, r4
 80a2fd0:	46b4      	mov	ip, r6
 80a2fd2:	4660      	mov	r0, ip
 80a2fd4:	4619      	mov	r1, r3
 80a2fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a2fd8:	a323      	add	r3, pc, #140	; (adr r3, 80a3068 <floor+0xe8>)
 80a2fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2fde:	f000 f8cf 	bl	80a3180 <__adddf3>
 80a2fe2:	2200      	movs	r2, #0
 80a2fe4:	2300      	movs	r3, #0
 80a2fe6:	f000 fd11 	bl	80a3a0c <__aeabi_dcmpgt>
 80a2fea:	2800      	cmp	r0, #0
 80a2fec:	d0ef      	beq.n	80a2fce <floor+0x4e>
 80a2fee:	2c00      	cmp	r4, #0
 80a2ff0:	db24      	blt.n	80a303c <floor+0xbc>
 80a2ff2:	2600      	movs	r6, #0
 80a2ff4:	4634      	mov	r4, r6
 80a2ff6:	e7ea      	b.n	80a2fce <floor+0x4e>
 80a2ff8:	2d33      	cmp	r5, #51	; 0x33
 80a2ffa:	dd08      	ble.n	80a300e <floor+0x8e>
 80a2ffc:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80a3000:	d1e7      	bne.n	80a2fd2 <floor+0x52>
 80a3002:	4602      	mov	r2, r0
 80a3004:	f000 f8bc 	bl	80a3180 <__adddf3>
 80a3008:	4684      	mov	ip, r0
 80a300a:	460b      	mov	r3, r1
 80a300c:	e7e1      	b.n	80a2fd2 <floor+0x52>
 80a300e:	f04f 37ff 	mov.w	r7, #4294967295
 80a3012:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80a3016:	40d7      	lsrs	r7, r2
 80a3018:	4207      	tst	r7, r0
 80a301a:	d0da      	beq.n	80a2fd2 <floor+0x52>
 80a301c:	a312      	add	r3, pc, #72	; (adr r3, 80a3068 <floor+0xe8>)
 80a301e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3022:	f000 f8ad 	bl	80a3180 <__adddf3>
 80a3026:	2200      	movs	r2, #0
 80a3028:	2300      	movs	r3, #0
 80a302a:	f000 fcef 	bl	80a3a0c <__aeabi_dcmpgt>
 80a302e:	2800      	cmp	r0, #0
 80a3030:	d0cd      	beq.n	80a2fce <floor+0x4e>
 80a3032:	2c00      	cmp	r4, #0
 80a3034:	db0b      	blt.n	80a304e <floor+0xce>
 80a3036:	ea26 0607 	bic.w	r6, r6, r7
 80a303a:	e7c8      	b.n	80a2fce <floor+0x4e>
 80a303c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80a3040:	4a0c      	ldr	r2, [pc, #48]	; (80a3074 <floor+0xf4>)
 80a3042:	431e      	orrs	r6, r3
 80a3044:	2e00      	cmp	r6, #0
 80a3046:	bf18      	it	ne
 80a3048:	4614      	movne	r4, r2
 80a304a:	2600      	movs	r6, #0
 80a304c:	e7bf      	b.n	80a2fce <floor+0x4e>
 80a304e:	2d14      	cmp	r5, #20
 80a3050:	d008      	beq.n	80a3064 <floor+0xe4>
 80a3052:	2301      	movs	r3, #1
 80a3054:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
 80a3058:	fa03 f505 	lsl.w	r5, r3, r5
 80a305c:	19ae      	adds	r6, r5, r6
 80a305e:	bf28      	it	cs
 80a3060:	18e4      	addcs	r4, r4, r3
 80a3062:	e7e8      	b.n	80a3036 <floor+0xb6>
 80a3064:	3401      	adds	r4, #1
 80a3066:	e7e6      	b.n	80a3036 <floor+0xb6>
 80a3068:	8800759c 	.word	0x8800759c
 80a306c:	7e37e43c 	.word	0x7e37e43c
 80a3070:	000fffff 	.word	0x000fffff
 80a3074:	bff00000 	.word	0xbff00000

080a3078 <scalbn>:
 80a3078:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80a307c:	b570      	push	{r4, r5, r6, lr}
 80a307e:	468c      	mov	ip, r1
 80a3080:	4604      	mov	r4, r0
 80a3082:	460d      	mov	r5, r1
 80a3084:	4616      	mov	r6, r2
 80a3086:	bb7b      	cbnz	r3, 80a30e8 <scalbn+0x70>
 80a3088:	4603      	mov	r3, r0
 80a308a:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80a308e:	ea5c 0303 	orrs.w	r3, ip, r3
 80a3092:	d028      	beq.n	80a30e6 <scalbn+0x6e>
 80a3094:	4b32      	ldr	r3, [pc, #200]	; (80a3160 <scalbn+0xe8>)
 80a3096:	2200      	movs	r2, #0
 80a3098:	f000 fa28 	bl	80a34ec <__aeabi_dmul>
 80a309c:	4b31      	ldr	r3, [pc, #196]	; (80a3164 <scalbn+0xec>)
 80a309e:	4604      	mov	r4, r0
 80a30a0:	429e      	cmp	r6, r3
 80a30a2:	460d      	mov	r5, r1
 80a30a4:	db1a      	blt.n	80a30dc <scalbn+0x64>
 80a30a6:	468c      	mov	ip, r1
 80a30a8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80a30ac:	3b36      	subs	r3, #54	; 0x36
 80a30ae:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80a30b2:	4433      	add	r3, r6
 80a30b4:	4293      	cmp	r3, r2
 80a30b6:	dc20      	bgt.n	80a30fa <scalbn+0x82>
 80a30b8:	2b00      	cmp	r3, #0
 80a30ba:	dc3e      	bgt.n	80a313a <scalbn+0xc2>
 80a30bc:	f113 0f35 	cmn.w	r3, #53	; 0x35
 80a30c0:	da2c      	bge.n	80a311c <scalbn+0xa4>
 80a30c2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80a30c6:	429e      	cmp	r6, r3
 80a30c8:	dc17      	bgt.n	80a30fa <scalbn+0x82>
 80a30ca:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80a30ce:	f043 71d2 	orr.w	r1, r3, #27525120	; 0x1a40000
 80a30d2:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 80a30d6:	4824      	ldr	r0, [pc, #144]	; (80a3168 <scalbn+0xf0>)
 80a30d8:	f041 011f 	orr.w	r1, r1, #31
 80a30dc:	a31c      	add	r3, pc, #112	; (adr r3, 80a3150 <scalbn+0xd8>)
 80a30de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a30e2:	f000 fa03 	bl	80a34ec <__aeabi_dmul>
 80a30e6:	bd70      	pop	{r4, r5, r6, pc}
 80a30e8:	f240 7eff 	movw	lr, #2047	; 0x7ff
 80a30ec:	4573      	cmp	r3, lr
 80a30ee:	d1de      	bne.n	80a30ae <scalbn+0x36>
 80a30f0:	4602      	mov	r2, r0
 80a30f2:	460b      	mov	r3, r1
 80a30f4:	f000 f844 	bl	80a3180 <__adddf3>
 80a30f8:	bd70      	pop	{r4, r5, r6, pc}
 80a30fa:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80a30fe:	f043 41fc 	orr.w	r1, r3, #2113929216	; 0x7e000000
 80a3102:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 80a3106:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 80a310a:	a313      	add	r3, pc, #76	; (adr r3, 80a3158 <scalbn+0xe0>)
 80a310c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3110:	4816      	ldr	r0, [pc, #88]	; (80a316c <scalbn+0xf4>)
 80a3112:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 80a3116:	f000 f9e9 	bl	80a34ec <__aeabi_dmul>
 80a311a:	bd70      	pop	{r4, r5, r6, pc}
 80a311c:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
 80a3120:	f103 0136 	add.w	r1, r3, #54	; 0x36
 80a3124:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
 80a3128:	ea4c 5501 	orr.w	r5, ip, r1, lsl #20
 80a312c:	2200      	movs	r2, #0
 80a312e:	4620      	mov	r0, r4
 80a3130:	4629      	mov	r1, r5
 80a3132:	4b0f      	ldr	r3, [pc, #60]	; (80a3170 <scalbn+0xf8>)
 80a3134:	f000 f9da 	bl	80a34ec <__aeabi_dmul>
 80a3138:	bd70      	pop	{r4, r5, r6, pc}
 80a313a:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
 80a313e:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
 80a3142:	4620      	mov	r0, r4
 80a3144:	ea4c 5103 	orr.w	r1, ip, r3, lsl #20
 80a3148:	bd70      	pop	{r4, r5, r6, pc}
 80a314a:	bf00      	nop
 80a314c:	f3af 8000 	nop.w
 80a3150:	c2f8f359 	.word	0xc2f8f359
 80a3154:	01a56e1f 	.word	0x01a56e1f
 80a3158:	8800759c 	.word	0x8800759c
 80a315c:	7e37e43c 	.word	0x7e37e43c
 80a3160:	43500000 	.word	0x43500000
 80a3164:	ffff3cb0 	.word	0xffff3cb0
 80a3168:	c2f8f359 	.word	0xc2f8f359
 80a316c:	8800759c 	.word	0x8800759c
 80a3170:	3c900000 	.word	0x3c900000

080a3174 <__aeabi_drsub>:
 80a3174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a3178:	e002      	b.n	80a3180 <__adddf3>
 80a317a:	bf00      	nop

080a317c <__aeabi_dsub>:
 80a317c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a3180 <__adddf3>:
 80a3180:	b530      	push	{r4, r5, lr}
 80a3182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a3186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a318a:	ea94 0f05 	teq	r4, r5
 80a318e:	bf08      	it	eq
 80a3190:	ea90 0f02 	teqeq	r0, r2
 80a3194:	bf1f      	itttt	ne
 80a3196:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a319a:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a319e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a31a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a31a6:	f000 80e2 	beq.w	80a336e <__adddf3+0x1ee>
 80a31aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a31ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a31b2:	bfb8      	it	lt
 80a31b4:	426d      	neglt	r5, r5
 80a31b6:	dd0c      	ble.n	80a31d2 <__adddf3+0x52>
 80a31b8:	442c      	add	r4, r5
 80a31ba:	ea80 0202 	eor.w	r2, r0, r2
 80a31be:	ea81 0303 	eor.w	r3, r1, r3
 80a31c2:	ea82 0000 	eor.w	r0, r2, r0
 80a31c6:	ea83 0101 	eor.w	r1, r3, r1
 80a31ca:	ea80 0202 	eor.w	r2, r0, r2
 80a31ce:	ea81 0303 	eor.w	r3, r1, r3
 80a31d2:	2d36      	cmp	r5, #54	; 0x36
 80a31d4:	bf88      	it	hi
 80a31d6:	bd30      	pophi	{r4, r5, pc}
 80a31d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a31dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a31e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a31e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a31e8:	d002      	beq.n	80a31f0 <__adddf3+0x70>
 80a31ea:	4240      	negs	r0, r0
 80a31ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a31f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a31f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a31f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a31fc:	d002      	beq.n	80a3204 <__adddf3+0x84>
 80a31fe:	4252      	negs	r2, r2
 80a3200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a3204:	ea94 0f05 	teq	r4, r5
 80a3208:	f000 80a7 	beq.w	80a335a <__adddf3+0x1da>
 80a320c:	f1a4 0401 	sub.w	r4, r4, #1
 80a3210:	f1d5 0e20 	rsbs	lr, r5, #32
 80a3214:	db0d      	blt.n	80a3232 <__adddf3+0xb2>
 80a3216:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a321a:	fa22 f205 	lsr.w	r2, r2, r5
 80a321e:	1880      	adds	r0, r0, r2
 80a3220:	f141 0100 	adc.w	r1, r1, #0
 80a3224:	fa03 f20e 	lsl.w	r2, r3, lr
 80a3228:	1880      	adds	r0, r0, r2
 80a322a:	fa43 f305 	asr.w	r3, r3, r5
 80a322e:	4159      	adcs	r1, r3
 80a3230:	e00e      	b.n	80a3250 <__adddf3+0xd0>
 80a3232:	f1a5 0520 	sub.w	r5, r5, #32
 80a3236:	f10e 0e20 	add.w	lr, lr, #32
 80a323a:	2a01      	cmp	r2, #1
 80a323c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a3240:	bf28      	it	cs
 80a3242:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a3246:	fa43 f305 	asr.w	r3, r3, r5
 80a324a:	18c0      	adds	r0, r0, r3
 80a324c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a3250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a3254:	d507      	bpl.n	80a3266 <__adddf3+0xe6>
 80a3256:	f04f 0e00 	mov.w	lr, #0
 80a325a:	f1dc 0c00 	rsbs	ip, ip, #0
 80a325e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a3262:	eb6e 0101 	sbc.w	r1, lr, r1
 80a3266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a326a:	d31b      	bcc.n	80a32a4 <__adddf3+0x124>
 80a326c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a3270:	d30c      	bcc.n	80a328c <__adddf3+0x10c>
 80a3272:	0849      	lsrs	r1, r1, #1
 80a3274:	ea5f 0030 	movs.w	r0, r0, rrx
 80a3278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a327c:	f104 0401 	add.w	r4, r4, #1
 80a3280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a3284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a3288:	f080 809a 	bcs.w	80a33c0 <__adddf3+0x240>
 80a328c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a3290:	bf08      	it	eq
 80a3292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a3296:	f150 0000 	adcs.w	r0, r0, #0
 80a329a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a329e:	ea41 0105 	orr.w	r1, r1, r5
 80a32a2:	bd30      	pop	{r4, r5, pc}
 80a32a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a32a8:	4140      	adcs	r0, r0
 80a32aa:	eb41 0101 	adc.w	r1, r1, r1
 80a32ae:	3c01      	subs	r4, #1
 80a32b0:	bf28      	it	cs
 80a32b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80a32b6:	d2e9      	bcs.n	80a328c <__adddf3+0x10c>
 80a32b8:	f091 0f00 	teq	r1, #0
 80a32bc:	bf04      	itt	eq
 80a32be:	4601      	moveq	r1, r0
 80a32c0:	2000      	moveq	r0, #0
 80a32c2:	fab1 f381 	clz	r3, r1
 80a32c6:	bf08      	it	eq
 80a32c8:	3320      	addeq	r3, #32
 80a32ca:	f1a3 030b 	sub.w	r3, r3, #11
 80a32ce:	f1b3 0220 	subs.w	r2, r3, #32
 80a32d2:	da0c      	bge.n	80a32ee <__adddf3+0x16e>
 80a32d4:	320c      	adds	r2, #12
 80a32d6:	dd08      	ble.n	80a32ea <__adddf3+0x16a>
 80a32d8:	f102 0c14 	add.w	ip, r2, #20
 80a32dc:	f1c2 020c 	rsb	r2, r2, #12
 80a32e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80a32e4:	fa21 f102 	lsr.w	r1, r1, r2
 80a32e8:	e00c      	b.n	80a3304 <__adddf3+0x184>
 80a32ea:	f102 0214 	add.w	r2, r2, #20
 80a32ee:	bfd8      	it	le
 80a32f0:	f1c2 0c20 	rsble	ip, r2, #32
 80a32f4:	fa01 f102 	lsl.w	r1, r1, r2
 80a32f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a32fc:	bfdc      	itt	le
 80a32fe:	ea41 010c 	orrle.w	r1, r1, ip
 80a3302:	4090      	lslle	r0, r2
 80a3304:	1ae4      	subs	r4, r4, r3
 80a3306:	bfa2      	ittt	ge
 80a3308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a330c:	4329      	orrge	r1, r5
 80a330e:	bd30      	popge	{r4, r5, pc}
 80a3310:	ea6f 0404 	mvn.w	r4, r4
 80a3314:	3c1f      	subs	r4, #31
 80a3316:	da1c      	bge.n	80a3352 <__adddf3+0x1d2>
 80a3318:	340c      	adds	r4, #12
 80a331a:	dc0e      	bgt.n	80a333a <__adddf3+0x1ba>
 80a331c:	f104 0414 	add.w	r4, r4, #20
 80a3320:	f1c4 0220 	rsb	r2, r4, #32
 80a3324:	fa20 f004 	lsr.w	r0, r0, r4
 80a3328:	fa01 f302 	lsl.w	r3, r1, r2
 80a332c:	ea40 0003 	orr.w	r0, r0, r3
 80a3330:	fa21 f304 	lsr.w	r3, r1, r4
 80a3334:	ea45 0103 	orr.w	r1, r5, r3
 80a3338:	bd30      	pop	{r4, r5, pc}
 80a333a:	f1c4 040c 	rsb	r4, r4, #12
 80a333e:	f1c4 0220 	rsb	r2, r4, #32
 80a3342:	fa20 f002 	lsr.w	r0, r0, r2
 80a3346:	fa01 f304 	lsl.w	r3, r1, r4
 80a334a:	ea40 0003 	orr.w	r0, r0, r3
 80a334e:	4629      	mov	r1, r5
 80a3350:	bd30      	pop	{r4, r5, pc}
 80a3352:	fa21 f004 	lsr.w	r0, r1, r4
 80a3356:	4629      	mov	r1, r5
 80a3358:	bd30      	pop	{r4, r5, pc}
 80a335a:	f094 0f00 	teq	r4, #0
 80a335e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a3362:	bf06      	itte	eq
 80a3364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a3368:	3401      	addeq	r4, #1
 80a336a:	3d01      	subne	r5, #1
 80a336c:	e74e      	b.n	80a320c <__adddf3+0x8c>
 80a336e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a3372:	bf18      	it	ne
 80a3374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a3378:	d029      	beq.n	80a33ce <__adddf3+0x24e>
 80a337a:	ea94 0f05 	teq	r4, r5
 80a337e:	bf08      	it	eq
 80a3380:	ea90 0f02 	teqeq	r0, r2
 80a3384:	d005      	beq.n	80a3392 <__adddf3+0x212>
 80a3386:	ea54 0c00 	orrs.w	ip, r4, r0
 80a338a:	bf04      	itt	eq
 80a338c:	4619      	moveq	r1, r3
 80a338e:	4610      	moveq	r0, r2
 80a3390:	bd30      	pop	{r4, r5, pc}
 80a3392:	ea91 0f03 	teq	r1, r3
 80a3396:	bf1e      	ittt	ne
 80a3398:	2100      	movne	r1, #0
 80a339a:	2000      	movne	r0, #0
 80a339c:	bd30      	popne	{r4, r5, pc}
 80a339e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a33a2:	d105      	bne.n	80a33b0 <__adddf3+0x230>
 80a33a4:	0040      	lsls	r0, r0, #1
 80a33a6:	4149      	adcs	r1, r1
 80a33a8:	bf28      	it	cs
 80a33aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a33ae:	bd30      	pop	{r4, r5, pc}
 80a33b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a33b4:	bf3c      	itt	cc
 80a33b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a33ba:	bd30      	popcc	{r4, r5, pc}
 80a33bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a33c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a33c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a33c8:	f04f 0000 	mov.w	r0, #0
 80a33cc:	bd30      	pop	{r4, r5, pc}
 80a33ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a33d2:	bf1a      	itte	ne
 80a33d4:	4619      	movne	r1, r3
 80a33d6:	4610      	movne	r0, r2
 80a33d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a33dc:	bf1c      	itt	ne
 80a33de:	460b      	movne	r3, r1
 80a33e0:	4602      	movne	r2, r0
 80a33e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a33e6:	bf06      	itte	eq
 80a33e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a33ec:	ea91 0f03 	teqeq	r1, r3
 80a33f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a33f4:	bd30      	pop	{r4, r5, pc}
 80a33f6:	bf00      	nop

080a33f8 <__aeabi_ui2d>:
 80a33f8:	f090 0f00 	teq	r0, #0
 80a33fc:	bf04      	itt	eq
 80a33fe:	2100      	moveq	r1, #0
 80a3400:	4770      	bxeq	lr
 80a3402:	b530      	push	{r4, r5, lr}
 80a3404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a3408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a340c:	f04f 0500 	mov.w	r5, #0
 80a3410:	f04f 0100 	mov.w	r1, #0
 80a3414:	e750      	b.n	80a32b8 <__adddf3+0x138>
 80a3416:	bf00      	nop

080a3418 <__aeabi_i2d>:
 80a3418:	f090 0f00 	teq	r0, #0
 80a341c:	bf04      	itt	eq
 80a341e:	2100      	moveq	r1, #0
 80a3420:	4770      	bxeq	lr
 80a3422:	b530      	push	{r4, r5, lr}
 80a3424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a3428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a342c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a3430:	bf48      	it	mi
 80a3432:	4240      	negmi	r0, r0
 80a3434:	f04f 0100 	mov.w	r1, #0
 80a3438:	e73e      	b.n	80a32b8 <__adddf3+0x138>
 80a343a:	bf00      	nop

080a343c <__aeabi_f2d>:
 80a343c:	0042      	lsls	r2, r0, #1
 80a343e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a3442:	ea4f 0131 	mov.w	r1, r1, rrx
 80a3446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a344a:	bf1f      	itttt	ne
 80a344c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a3450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a3454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a3458:	4770      	bxne	lr
 80a345a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80a345e:	bf08      	it	eq
 80a3460:	4770      	bxeq	lr
 80a3462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80a3466:	bf04      	itt	eq
 80a3468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80a346c:	4770      	bxeq	lr
 80a346e:	b530      	push	{r4, r5, lr}
 80a3470:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a3474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a3478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a347c:	e71c      	b.n	80a32b8 <__adddf3+0x138>
 80a347e:	bf00      	nop

080a3480 <__aeabi_ul2d>:
 80a3480:	ea50 0201 	orrs.w	r2, r0, r1
 80a3484:	bf08      	it	eq
 80a3486:	4770      	bxeq	lr
 80a3488:	b530      	push	{r4, r5, lr}
 80a348a:	f04f 0500 	mov.w	r5, #0
 80a348e:	e00a      	b.n	80a34a6 <__aeabi_l2d+0x16>

080a3490 <__aeabi_l2d>:
 80a3490:	ea50 0201 	orrs.w	r2, r0, r1
 80a3494:	bf08      	it	eq
 80a3496:	4770      	bxeq	lr
 80a3498:	b530      	push	{r4, r5, lr}
 80a349a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a349e:	d502      	bpl.n	80a34a6 <__aeabi_l2d+0x16>
 80a34a0:	4240      	negs	r0, r0
 80a34a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a34a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a34aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a34ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a34b2:	f43f aed8 	beq.w	80a3266 <__adddf3+0xe6>
 80a34b6:	f04f 0203 	mov.w	r2, #3
 80a34ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a34be:	bf18      	it	ne
 80a34c0:	3203      	addne	r2, #3
 80a34c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a34c6:	bf18      	it	ne
 80a34c8:	3203      	addne	r2, #3
 80a34ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a34ce:	f1c2 0320 	rsb	r3, r2, #32
 80a34d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80a34d6:	fa20 f002 	lsr.w	r0, r0, r2
 80a34da:	fa01 fe03 	lsl.w	lr, r1, r3
 80a34de:	ea40 000e 	orr.w	r0, r0, lr
 80a34e2:	fa21 f102 	lsr.w	r1, r1, r2
 80a34e6:	4414      	add	r4, r2
 80a34e8:	e6bd      	b.n	80a3266 <__adddf3+0xe6>
 80a34ea:	bf00      	nop

080a34ec <__aeabi_dmul>:
 80a34ec:	b570      	push	{r4, r5, r6, lr}
 80a34ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a34f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a34f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a34fa:	bf1d      	ittte	ne
 80a34fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a3500:	ea94 0f0c 	teqne	r4, ip
 80a3504:	ea95 0f0c 	teqne	r5, ip
 80a3508:	f000 f8de 	bleq	80a36c8 <__aeabi_dmul+0x1dc>
 80a350c:	442c      	add	r4, r5
 80a350e:	ea81 0603 	eor.w	r6, r1, r3
 80a3512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a3516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a351a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a351e:	bf18      	it	ne
 80a3520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a3524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a3528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a352c:	d038      	beq.n	80a35a0 <__aeabi_dmul+0xb4>
 80a352e:	fba0 ce02 	umull	ip, lr, r0, r2
 80a3532:	f04f 0500 	mov.w	r5, #0
 80a3536:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a353a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a353e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a3542:	f04f 0600 	mov.w	r6, #0
 80a3546:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a354a:	f09c 0f00 	teq	ip, #0
 80a354e:	bf18      	it	ne
 80a3550:	f04e 0e01 	orrne.w	lr, lr, #1
 80a3554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a3558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a355c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a3560:	d204      	bcs.n	80a356c <__aeabi_dmul+0x80>
 80a3562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a3566:	416d      	adcs	r5, r5
 80a3568:	eb46 0606 	adc.w	r6, r6, r6
 80a356c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a3570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a3574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a3578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a357c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a3580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a3584:	bf88      	it	hi
 80a3586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a358a:	d81e      	bhi.n	80a35ca <__aeabi_dmul+0xde>
 80a358c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a3590:	bf08      	it	eq
 80a3592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a3596:	f150 0000 	adcs.w	r0, r0, #0
 80a359a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a359e:	bd70      	pop	{r4, r5, r6, pc}
 80a35a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a35a4:	ea46 0101 	orr.w	r1, r6, r1
 80a35a8:	ea40 0002 	orr.w	r0, r0, r2
 80a35ac:	ea81 0103 	eor.w	r1, r1, r3
 80a35b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a35b4:	bfc2      	ittt	gt
 80a35b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a35ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a35be:	bd70      	popgt	{r4, r5, r6, pc}
 80a35c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a35c4:	f04f 0e00 	mov.w	lr, #0
 80a35c8:	3c01      	subs	r4, #1
 80a35ca:	f300 80ab 	bgt.w	80a3724 <__aeabi_dmul+0x238>
 80a35ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a35d2:	bfde      	ittt	le
 80a35d4:	2000      	movle	r0, #0
 80a35d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a35da:	bd70      	pople	{r4, r5, r6, pc}
 80a35dc:	f1c4 0400 	rsb	r4, r4, #0
 80a35e0:	3c20      	subs	r4, #32
 80a35e2:	da35      	bge.n	80a3650 <__aeabi_dmul+0x164>
 80a35e4:	340c      	adds	r4, #12
 80a35e6:	dc1b      	bgt.n	80a3620 <__aeabi_dmul+0x134>
 80a35e8:	f104 0414 	add.w	r4, r4, #20
 80a35ec:	f1c4 0520 	rsb	r5, r4, #32
 80a35f0:	fa00 f305 	lsl.w	r3, r0, r5
 80a35f4:	fa20 f004 	lsr.w	r0, r0, r4
 80a35f8:	fa01 f205 	lsl.w	r2, r1, r5
 80a35fc:	ea40 0002 	orr.w	r0, r0, r2
 80a3600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a3604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a3608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a360c:	fa21 f604 	lsr.w	r6, r1, r4
 80a3610:	eb42 0106 	adc.w	r1, r2, r6
 80a3614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a3618:	bf08      	it	eq
 80a361a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a361e:	bd70      	pop	{r4, r5, r6, pc}
 80a3620:	f1c4 040c 	rsb	r4, r4, #12
 80a3624:	f1c4 0520 	rsb	r5, r4, #32
 80a3628:	fa00 f304 	lsl.w	r3, r0, r4
 80a362c:	fa20 f005 	lsr.w	r0, r0, r5
 80a3630:	fa01 f204 	lsl.w	r2, r1, r4
 80a3634:	ea40 0002 	orr.w	r0, r0, r2
 80a3638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a363c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a3640:	f141 0100 	adc.w	r1, r1, #0
 80a3644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a3648:	bf08      	it	eq
 80a364a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a364e:	bd70      	pop	{r4, r5, r6, pc}
 80a3650:	f1c4 0520 	rsb	r5, r4, #32
 80a3654:	fa00 f205 	lsl.w	r2, r0, r5
 80a3658:	ea4e 0e02 	orr.w	lr, lr, r2
 80a365c:	fa20 f304 	lsr.w	r3, r0, r4
 80a3660:	fa01 f205 	lsl.w	r2, r1, r5
 80a3664:	ea43 0302 	orr.w	r3, r3, r2
 80a3668:	fa21 f004 	lsr.w	r0, r1, r4
 80a366c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a3670:	fa21 f204 	lsr.w	r2, r1, r4
 80a3674:	ea20 0002 	bic.w	r0, r0, r2
 80a3678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a367c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a3680:	bf08      	it	eq
 80a3682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a3686:	bd70      	pop	{r4, r5, r6, pc}
 80a3688:	f094 0f00 	teq	r4, #0
 80a368c:	d10f      	bne.n	80a36ae <__aeabi_dmul+0x1c2>
 80a368e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a3692:	0040      	lsls	r0, r0, #1
 80a3694:	eb41 0101 	adc.w	r1, r1, r1
 80a3698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a369c:	bf08      	it	eq
 80a369e:	3c01      	subeq	r4, #1
 80a36a0:	d0f7      	beq.n	80a3692 <__aeabi_dmul+0x1a6>
 80a36a2:	ea41 0106 	orr.w	r1, r1, r6
 80a36a6:	f095 0f00 	teq	r5, #0
 80a36aa:	bf18      	it	ne
 80a36ac:	4770      	bxne	lr
 80a36ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a36b2:	0052      	lsls	r2, r2, #1
 80a36b4:	eb43 0303 	adc.w	r3, r3, r3
 80a36b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a36bc:	bf08      	it	eq
 80a36be:	3d01      	subeq	r5, #1
 80a36c0:	d0f7      	beq.n	80a36b2 <__aeabi_dmul+0x1c6>
 80a36c2:	ea43 0306 	orr.w	r3, r3, r6
 80a36c6:	4770      	bx	lr
 80a36c8:	ea94 0f0c 	teq	r4, ip
 80a36cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a36d0:	bf18      	it	ne
 80a36d2:	ea95 0f0c 	teqne	r5, ip
 80a36d6:	d00c      	beq.n	80a36f2 <__aeabi_dmul+0x206>
 80a36d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a36dc:	bf18      	it	ne
 80a36de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a36e2:	d1d1      	bne.n	80a3688 <__aeabi_dmul+0x19c>
 80a36e4:	ea81 0103 	eor.w	r1, r1, r3
 80a36e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a36ec:	f04f 0000 	mov.w	r0, #0
 80a36f0:	bd70      	pop	{r4, r5, r6, pc}
 80a36f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a36f6:	bf06      	itte	eq
 80a36f8:	4610      	moveq	r0, r2
 80a36fa:	4619      	moveq	r1, r3
 80a36fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a3700:	d019      	beq.n	80a3736 <__aeabi_dmul+0x24a>
 80a3702:	ea94 0f0c 	teq	r4, ip
 80a3706:	d102      	bne.n	80a370e <__aeabi_dmul+0x222>
 80a3708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a370c:	d113      	bne.n	80a3736 <__aeabi_dmul+0x24a>
 80a370e:	ea95 0f0c 	teq	r5, ip
 80a3712:	d105      	bne.n	80a3720 <__aeabi_dmul+0x234>
 80a3714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a3718:	bf1c      	itt	ne
 80a371a:	4610      	movne	r0, r2
 80a371c:	4619      	movne	r1, r3
 80a371e:	d10a      	bne.n	80a3736 <__aeabi_dmul+0x24a>
 80a3720:	ea81 0103 	eor.w	r1, r1, r3
 80a3724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a3728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a372c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a3730:	f04f 0000 	mov.w	r0, #0
 80a3734:	bd70      	pop	{r4, r5, r6, pc}
 80a3736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a373a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a373e:	bd70      	pop	{r4, r5, r6, pc}

080a3740 <__aeabi_ddiv>:
 80a3740:	b570      	push	{r4, r5, r6, lr}
 80a3742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a3746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a374a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a374e:	bf1d      	ittte	ne
 80a3750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a3754:	ea94 0f0c 	teqne	r4, ip
 80a3758:	ea95 0f0c 	teqne	r5, ip
 80a375c:	f000 f8a7 	bleq	80a38ae <__aeabi_ddiv+0x16e>
 80a3760:	eba4 0405 	sub.w	r4, r4, r5
 80a3764:	ea81 0e03 	eor.w	lr, r1, r3
 80a3768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a376c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a3770:	f000 8088 	beq.w	80a3884 <__aeabi_ddiv+0x144>
 80a3774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a3778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a377c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a3780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a3784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a3788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a378c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a3790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a3794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a3798:	429d      	cmp	r5, r3
 80a379a:	bf08      	it	eq
 80a379c:	4296      	cmpeq	r6, r2
 80a379e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a37a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a37a6:	d202      	bcs.n	80a37ae <__aeabi_ddiv+0x6e>
 80a37a8:	085b      	lsrs	r3, r3, #1
 80a37aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80a37ae:	1ab6      	subs	r6, r6, r2
 80a37b0:	eb65 0503 	sbc.w	r5, r5, r3
 80a37b4:	085b      	lsrs	r3, r3, #1
 80a37b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80a37ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a37be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a37c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80a37c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a37ca:	bf22      	ittt	cs
 80a37cc:	1ab6      	subcs	r6, r6, r2
 80a37ce:	4675      	movcs	r5, lr
 80a37d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80a37d4:	085b      	lsrs	r3, r3, #1
 80a37d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80a37da:	ebb6 0e02 	subs.w	lr, r6, r2
 80a37de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a37e2:	bf22      	ittt	cs
 80a37e4:	1ab6      	subcs	r6, r6, r2
 80a37e6:	4675      	movcs	r5, lr
 80a37e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a37ec:	085b      	lsrs	r3, r3, #1
 80a37ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80a37f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80a37f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a37fa:	bf22      	ittt	cs
 80a37fc:	1ab6      	subcs	r6, r6, r2
 80a37fe:	4675      	movcs	r5, lr
 80a3800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a3804:	085b      	lsrs	r3, r3, #1
 80a3806:	ea4f 0232 	mov.w	r2, r2, rrx
 80a380a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a380e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a3812:	bf22      	ittt	cs
 80a3814:	1ab6      	subcs	r6, r6, r2
 80a3816:	4675      	movcs	r5, lr
 80a3818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a381c:	ea55 0e06 	orrs.w	lr, r5, r6
 80a3820:	d018      	beq.n	80a3854 <__aeabi_ddiv+0x114>
 80a3822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a3826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a382a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a382e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a3832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a3836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a383a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a383e:	d1c0      	bne.n	80a37c2 <__aeabi_ddiv+0x82>
 80a3840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a3844:	d10b      	bne.n	80a385e <__aeabi_ddiv+0x11e>
 80a3846:	ea41 0100 	orr.w	r1, r1, r0
 80a384a:	f04f 0000 	mov.w	r0, #0
 80a384e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a3852:	e7b6      	b.n	80a37c2 <__aeabi_ddiv+0x82>
 80a3854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a3858:	bf04      	itt	eq
 80a385a:	4301      	orreq	r1, r0
 80a385c:	2000      	moveq	r0, #0
 80a385e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a3862:	bf88      	it	hi
 80a3864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a3868:	f63f aeaf 	bhi.w	80a35ca <__aeabi_dmul+0xde>
 80a386c:	ebb5 0c03 	subs.w	ip, r5, r3
 80a3870:	bf04      	itt	eq
 80a3872:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a3876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a387a:	f150 0000 	adcs.w	r0, r0, #0
 80a387e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a3882:	bd70      	pop	{r4, r5, r6, pc}
 80a3884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a3888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a388c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a3890:	bfc2      	ittt	gt
 80a3892:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a3896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a389a:	bd70      	popgt	{r4, r5, r6, pc}
 80a389c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a38a0:	f04f 0e00 	mov.w	lr, #0
 80a38a4:	3c01      	subs	r4, #1
 80a38a6:	e690      	b.n	80a35ca <__aeabi_dmul+0xde>
 80a38a8:	ea45 0e06 	orr.w	lr, r5, r6
 80a38ac:	e68d      	b.n	80a35ca <__aeabi_dmul+0xde>
 80a38ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a38b2:	ea94 0f0c 	teq	r4, ip
 80a38b6:	bf08      	it	eq
 80a38b8:	ea95 0f0c 	teqeq	r5, ip
 80a38bc:	f43f af3b 	beq.w	80a3736 <__aeabi_dmul+0x24a>
 80a38c0:	ea94 0f0c 	teq	r4, ip
 80a38c4:	d10a      	bne.n	80a38dc <__aeabi_ddiv+0x19c>
 80a38c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a38ca:	f47f af34 	bne.w	80a3736 <__aeabi_dmul+0x24a>
 80a38ce:	ea95 0f0c 	teq	r5, ip
 80a38d2:	f47f af25 	bne.w	80a3720 <__aeabi_dmul+0x234>
 80a38d6:	4610      	mov	r0, r2
 80a38d8:	4619      	mov	r1, r3
 80a38da:	e72c      	b.n	80a3736 <__aeabi_dmul+0x24a>
 80a38dc:	ea95 0f0c 	teq	r5, ip
 80a38e0:	d106      	bne.n	80a38f0 <__aeabi_ddiv+0x1b0>
 80a38e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a38e6:	f43f aefd 	beq.w	80a36e4 <__aeabi_dmul+0x1f8>
 80a38ea:	4610      	mov	r0, r2
 80a38ec:	4619      	mov	r1, r3
 80a38ee:	e722      	b.n	80a3736 <__aeabi_dmul+0x24a>
 80a38f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a38f4:	bf18      	it	ne
 80a38f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a38fa:	f47f aec5 	bne.w	80a3688 <__aeabi_dmul+0x19c>
 80a38fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a3902:	f47f af0d 	bne.w	80a3720 <__aeabi_dmul+0x234>
 80a3906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a390a:	f47f aeeb 	bne.w	80a36e4 <__aeabi_dmul+0x1f8>
 80a390e:	e712      	b.n	80a3736 <__aeabi_dmul+0x24a>

080a3910 <__gedf2>:
 80a3910:	f04f 3cff 	mov.w	ip, #4294967295
 80a3914:	e006      	b.n	80a3924 <__cmpdf2+0x4>
 80a3916:	bf00      	nop

080a3918 <__ledf2>:
 80a3918:	f04f 0c01 	mov.w	ip, #1
 80a391c:	e002      	b.n	80a3924 <__cmpdf2+0x4>
 80a391e:	bf00      	nop

080a3920 <__cmpdf2>:
 80a3920:	f04f 0c01 	mov.w	ip, #1
 80a3924:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a3928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a392c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a3934:	bf18      	it	ne
 80a3936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a393a:	d01b      	beq.n	80a3974 <__cmpdf2+0x54>
 80a393c:	b001      	add	sp, #4
 80a393e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a3942:	bf0c      	ite	eq
 80a3944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a3948:	ea91 0f03 	teqne	r1, r3
 80a394c:	bf02      	ittt	eq
 80a394e:	ea90 0f02 	teqeq	r0, r2
 80a3952:	2000      	moveq	r0, #0
 80a3954:	4770      	bxeq	lr
 80a3956:	f110 0f00 	cmn.w	r0, #0
 80a395a:	ea91 0f03 	teq	r1, r3
 80a395e:	bf58      	it	pl
 80a3960:	4299      	cmppl	r1, r3
 80a3962:	bf08      	it	eq
 80a3964:	4290      	cmpeq	r0, r2
 80a3966:	bf2c      	ite	cs
 80a3968:	17d8      	asrcs	r0, r3, #31
 80a396a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a396e:	f040 0001 	orr.w	r0, r0, #1
 80a3972:	4770      	bx	lr
 80a3974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a3978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a397c:	d102      	bne.n	80a3984 <__cmpdf2+0x64>
 80a397e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a3982:	d107      	bne.n	80a3994 <__cmpdf2+0x74>
 80a3984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a3988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a398c:	d1d6      	bne.n	80a393c <__cmpdf2+0x1c>
 80a398e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a3992:	d0d3      	beq.n	80a393c <__cmpdf2+0x1c>
 80a3994:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a3998:	4770      	bx	lr
 80a399a:	bf00      	nop

080a399c <__aeabi_cdrcmple>:
 80a399c:	4684      	mov	ip, r0
 80a399e:	4610      	mov	r0, r2
 80a39a0:	4662      	mov	r2, ip
 80a39a2:	468c      	mov	ip, r1
 80a39a4:	4619      	mov	r1, r3
 80a39a6:	4663      	mov	r3, ip
 80a39a8:	e000      	b.n	80a39ac <__aeabi_cdcmpeq>
 80a39aa:	bf00      	nop

080a39ac <__aeabi_cdcmpeq>:
 80a39ac:	b501      	push	{r0, lr}
 80a39ae:	f7ff ffb7 	bl	80a3920 <__cmpdf2>
 80a39b2:	2800      	cmp	r0, #0
 80a39b4:	bf48      	it	mi
 80a39b6:	f110 0f00 	cmnmi.w	r0, #0
 80a39ba:	bd01      	pop	{r0, pc}

080a39bc <__aeabi_dcmpeq>:
 80a39bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a39c0:	f7ff fff4 	bl	80a39ac <__aeabi_cdcmpeq>
 80a39c4:	bf0c      	ite	eq
 80a39c6:	2001      	moveq	r0, #1
 80a39c8:	2000      	movne	r0, #0
 80a39ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80a39ce:	bf00      	nop

080a39d0 <__aeabi_dcmplt>:
 80a39d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a39d4:	f7ff ffea 	bl	80a39ac <__aeabi_cdcmpeq>
 80a39d8:	bf34      	ite	cc
 80a39da:	2001      	movcc	r0, #1
 80a39dc:	2000      	movcs	r0, #0
 80a39de:	f85d fb08 	ldr.w	pc, [sp], #8
 80a39e2:	bf00      	nop

080a39e4 <__aeabi_dcmple>:
 80a39e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a39e8:	f7ff ffe0 	bl	80a39ac <__aeabi_cdcmpeq>
 80a39ec:	bf94      	ite	ls
 80a39ee:	2001      	movls	r0, #1
 80a39f0:	2000      	movhi	r0, #0
 80a39f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a39f6:	bf00      	nop

080a39f8 <__aeabi_dcmpge>:
 80a39f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a39fc:	f7ff ffce 	bl	80a399c <__aeabi_cdrcmple>
 80a3a00:	bf94      	ite	ls
 80a3a02:	2001      	movls	r0, #1
 80a3a04:	2000      	movhi	r0, #0
 80a3a06:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3a0a:	bf00      	nop

080a3a0c <__aeabi_dcmpgt>:
 80a3a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3a10:	f7ff ffc4 	bl	80a399c <__aeabi_cdrcmple>
 80a3a14:	bf34      	ite	cc
 80a3a16:	2001      	movcc	r0, #1
 80a3a18:	2000      	movcs	r0, #0
 80a3a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3a1e:	bf00      	nop

080a3a20 <__aeabi_d2iz>:
 80a3a20:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a3a24:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a3a28:	d215      	bcs.n	80a3a56 <__aeabi_d2iz+0x36>
 80a3a2a:	d511      	bpl.n	80a3a50 <__aeabi_d2iz+0x30>
 80a3a2c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a3a30:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a3a34:	d912      	bls.n	80a3a5c <__aeabi_d2iz+0x3c>
 80a3a36:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a3a3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a3a3e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a3a42:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a3a46:	fa23 f002 	lsr.w	r0, r3, r2
 80a3a4a:	bf18      	it	ne
 80a3a4c:	4240      	negne	r0, r0
 80a3a4e:	4770      	bx	lr
 80a3a50:	f04f 0000 	mov.w	r0, #0
 80a3a54:	4770      	bx	lr
 80a3a56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a3a5a:	d105      	bne.n	80a3a68 <__aeabi_d2iz+0x48>
 80a3a5c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a3a60:	bf08      	it	eq
 80a3a62:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a3a66:	4770      	bx	lr
 80a3a68:	f04f 0000 	mov.w	r0, #0
 80a3a6c:	4770      	bx	lr
 80a3a6e:	bf00      	nop

080a3a70 <atexit>:
 80a3a70:	2300      	movs	r3, #0
 80a3a72:	4601      	mov	r1, r0
 80a3a74:	461a      	mov	r2, r3
 80a3a76:	4618      	mov	r0, r3
 80a3a78:	f000 b882 	b.w	80a3b80 <__register_exitproc>

080a3a7c <memcpy>:
 80a3a7c:	440a      	add	r2, r1
 80a3a7e:	4291      	cmp	r1, r2
 80a3a80:	f100 33ff 	add.w	r3, r0, #4294967295
 80a3a84:	d100      	bne.n	80a3a88 <memcpy+0xc>
 80a3a86:	4770      	bx	lr
 80a3a88:	b510      	push	{r4, lr}
 80a3a8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a3a8e:	4291      	cmp	r1, r2
 80a3a90:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a3a94:	d1f9      	bne.n	80a3a8a <memcpy+0xe>
 80a3a96:	bd10      	pop	{r4, pc}

080a3a98 <memmove>:
 80a3a98:	4288      	cmp	r0, r1
 80a3a9a:	b510      	push	{r4, lr}
 80a3a9c:	eb01 0402 	add.w	r4, r1, r2
 80a3aa0:	d902      	bls.n	80a3aa8 <memmove+0x10>
 80a3aa2:	4284      	cmp	r4, r0
 80a3aa4:	4623      	mov	r3, r4
 80a3aa6:	d807      	bhi.n	80a3ab8 <memmove+0x20>
 80a3aa8:	1e43      	subs	r3, r0, #1
 80a3aaa:	42a1      	cmp	r1, r4
 80a3aac:	d008      	beq.n	80a3ac0 <memmove+0x28>
 80a3aae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a3ab2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80a3ab6:	e7f8      	b.n	80a3aaa <memmove+0x12>
 80a3ab8:	4601      	mov	r1, r0
 80a3aba:	4402      	add	r2, r0
 80a3abc:	428a      	cmp	r2, r1
 80a3abe:	d100      	bne.n	80a3ac2 <memmove+0x2a>
 80a3ac0:	bd10      	pop	{r4, pc}
 80a3ac2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80a3ac6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80a3aca:	e7f7      	b.n	80a3abc <memmove+0x24>

080a3acc <memset>:
 80a3acc:	4603      	mov	r3, r0
 80a3ace:	4402      	add	r2, r0
 80a3ad0:	4293      	cmp	r3, r2
 80a3ad2:	d100      	bne.n	80a3ad6 <memset+0xa>
 80a3ad4:	4770      	bx	lr
 80a3ad6:	f803 1b01 	strb.w	r1, [r3], #1
 80a3ada:	e7f9      	b.n	80a3ad0 <memset+0x4>

080a3adc <srand>:
 80a3adc:	b538      	push	{r3, r4, r5, lr}
 80a3ade:	4b10      	ldr	r3, [pc, #64]	; (80a3b20 <srand+0x44>)
 80a3ae0:	4604      	mov	r4, r0
 80a3ae2:	681d      	ldr	r5, [r3, #0]
 80a3ae4:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a3ae6:	b9b3      	cbnz	r3, 80a3b16 <srand+0x3a>
 80a3ae8:	2018      	movs	r0, #24
 80a3aea:	f7fd fa99 	bl	80a1020 <malloc>
 80a3aee:	4602      	mov	r2, r0
 80a3af0:	63a8      	str	r0, [r5, #56]	; 0x38
 80a3af2:	b920      	cbnz	r0, 80a3afe <srand+0x22>
 80a3af4:	2142      	movs	r1, #66	; 0x42
 80a3af6:	4b0b      	ldr	r3, [pc, #44]	; (80a3b24 <srand+0x48>)
 80a3af8:	480b      	ldr	r0, [pc, #44]	; (80a3b28 <srand+0x4c>)
 80a3afa:	f7fd fab1 	bl	80a1060 <__assert_func>
 80a3afe:	490b      	ldr	r1, [pc, #44]	; (80a3b2c <srand+0x50>)
 80a3b00:	4b0b      	ldr	r3, [pc, #44]	; (80a3b30 <srand+0x54>)
 80a3b02:	e9c0 1300 	strd	r1, r3, [r0]
 80a3b06:	4b0b      	ldr	r3, [pc, #44]	; (80a3b34 <srand+0x58>)
 80a3b08:	2100      	movs	r1, #0
 80a3b0a:	6083      	str	r3, [r0, #8]
 80a3b0c:	230b      	movs	r3, #11
 80a3b0e:	8183      	strh	r3, [r0, #12]
 80a3b10:	2001      	movs	r0, #1
 80a3b12:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80a3b16:	2200      	movs	r2, #0
 80a3b18:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a3b1a:	611c      	str	r4, [r3, #16]
 80a3b1c:	615a      	str	r2, [r3, #20]
 80a3b1e:	bd38      	pop	{r3, r4, r5, pc}
 80a3b20:	2000100c 	.word	0x2000100c
 80a3b24:	080a4008 	.word	0x080a4008
 80a3b28:	080a401f 	.word	0x080a401f
 80a3b2c:	abcd330e 	.word	0xabcd330e
 80a3b30:	e66d1234 	.word	0xe66d1234
 80a3b34:	0005deec 	.word	0x0005deec

080a3b38 <strdup>:
 80a3b38:	4b02      	ldr	r3, [pc, #8]	; (80a3b44 <strdup+0xc>)
 80a3b3a:	4601      	mov	r1, r0
 80a3b3c:	6818      	ldr	r0, [r3, #0]
 80a3b3e:	f000 b803 	b.w	80a3b48 <_strdup_r>
 80a3b42:	bf00      	nop
 80a3b44:	2000100c 	.word	0x2000100c

080a3b48 <_strdup_r>:
 80a3b48:	b570      	push	{r4, r5, r6, lr}
 80a3b4a:	4604      	mov	r4, r0
 80a3b4c:	4608      	mov	r0, r1
 80a3b4e:	460d      	mov	r5, r1
 80a3b50:	f000 f80d 	bl	80a3b6e <strlen>
 80a3b54:	1c46      	adds	r6, r0, #1
 80a3b56:	4631      	mov	r1, r6
 80a3b58:	4620      	mov	r0, r4
 80a3b5a:	f7fd fa79 	bl	80a1050 <_malloc_r>
 80a3b5e:	4604      	mov	r4, r0
 80a3b60:	b118      	cbz	r0, 80a3b6a <_strdup_r+0x22>
 80a3b62:	4632      	mov	r2, r6
 80a3b64:	4629      	mov	r1, r5
 80a3b66:	f7ff ff89 	bl	80a3a7c <memcpy>
 80a3b6a:	4620      	mov	r0, r4
 80a3b6c:	bd70      	pop	{r4, r5, r6, pc}

080a3b6e <strlen>:
 80a3b6e:	4603      	mov	r3, r0
 80a3b70:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a3b74:	2a00      	cmp	r2, #0
 80a3b76:	d1fb      	bne.n	80a3b70 <strlen+0x2>
 80a3b78:	1a18      	subs	r0, r3, r0
 80a3b7a:	3801      	subs	r0, #1
 80a3b7c:	4770      	bx	lr
	...

080a3b80 <__register_exitproc>:
 80a3b80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a3b84:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 80a3c34 <__register_exitproc+0xb4>
 80a3b88:	4606      	mov	r6, r0
 80a3b8a:	f8d8 0000 	ldr.w	r0, [r8]
 80a3b8e:	461f      	mov	r7, r3
 80a3b90:	460d      	mov	r5, r1
 80a3b92:	4691      	mov	r9, r2
 80a3b94:	f000 f858 	bl	80a3c48 <__retarget_lock_acquire_recursive>
 80a3b98:	4b27      	ldr	r3, [pc, #156]	; (80a3c38 <__register_exitproc+0xb8>)
 80a3b9a:	681c      	ldr	r4, [r3, #0]
 80a3b9c:	b934      	cbnz	r4, 80a3bac <__register_exitproc+0x2c>
 80a3b9e:	4c27      	ldr	r4, [pc, #156]	; (80a3c3c <__register_exitproc+0xbc>)
 80a3ba0:	601c      	str	r4, [r3, #0]
 80a3ba2:	4b27      	ldr	r3, [pc, #156]	; (80a3c40 <__register_exitproc+0xc0>)
 80a3ba4:	b113      	cbz	r3, 80a3bac <__register_exitproc+0x2c>
 80a3ba6:	681b      	ldr	r3, [r3, #0]
 80a3ba8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80a3bac:	6863      	ldr	r3, [r4, #4]
 80a3bae:	2b1f      	cmp	r3, #31
 80a3bb0:	dd07      	ble.n	80a3bc2 <__register_exitproc+0x42>
 80a3bb2:	f8d8 0000 	ldr.w	r0, [r8]
 80a3bb6:	f000 f849 	bl	80a3c4c <__retarget_lock_release_recursive>
 80a3bba:	f04f 30ff 	mov.w	r0, #4294967295
 80a3bbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a3bc2:	b35e      	cbz	r6, 80a3c1c <__register_exitproc+0x9c>
 80a3bc4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80a3bc8:	b988      	cbnz	r0, 80a3bee <__register_exitproc+0x6e>
 80a3bca:	4b1e      	ldr	r3, [pc, #120]	; (80a3c44 <__register_exitproc+0xc4>)
 80a3bcc:	b923      	cbnz	r3, 80a3bd8 <__register_exitproc+0x58>
 80a3bce:	f8d8 0000 	ldr.w	r0, [r8]
 80a3bd2:	f000 f83a 	bl	80a3c4a <__retarget_lock_release>
 80a3bd6:	e7f0      	b.n	80a3bba <__register_exitproc+0x3a>
 80a3bd8:	f44f 7084 	mov.w	r0, #264	; 0x108
 80a3bdc:	f7fd fa20 	bl	80a1020 <malloc>
 80a3be0:	2800      	cmp	r0, #0
 80a3be2:	d0f4      	beq.n	80a3bce <__register_exitproc+0x4e>
 80a3be4:	2300      	movs	r3, #0
 80a3be6:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80a3bea:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80a3bee:	2201      	movs	r2, #1
 80a3bf0:	6863      	ldr	r3, [r4, #4]
 80a3bf2:	2e02      	cmp	r6, #2
 80a3bf4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80a3bf8:	fa02 f203 	lsl.w	r2, r2, r3
 80a3bfc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80a3c00:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80a3c04:	ea43 0302 	orr.w	r3, r3, r2
 80a3c08:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80a3c0c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80a3c10:	bf02      	ittt	eq
 80a3c12:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80a3c16:	4313      	orreq	r3, r2
 80a3c18:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 80a3c1c:	6863      	ldr	r3, [r4, #4]
 80a3c1e:	f8d8 0000 	ldr.w	r0, [r8]
 80a3c22:	1c5a      	adds	r2, r3, #1
 80a3c24:	3302      	adds	r3, #2
 80a3c26:	6062      	str	r2, [r4, #4]
 80a3c28:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80a3c2c:	f000 f80e 	bl	80a3c4c <__retarget_lock_release_recursive>
 80a3c30:	2000      	movs	r0, #0
 80a3c32:	e7c4      	b.n	80a3bbe <__register_exitproc+0x3e>
 80a3c34:	20001070 	.word	0x20001070
 80a3c38:	200024f0 	.word	0x200024f0
 80a3c3c:	20002464 	.word	0x20002464
 80a3c40:	00000000 	.word	0x00000000
 80a3c44:	080a1021 	.word	0x080a1021

080a3c48 <__retarget_lock_acquire_recursive>:
 80a3c48:	4770      	bx	lr

080a3c4a <__retarget_lock_release>:
 80a3c4a:	4770      	bx	lr

080a3c4c <__retarget_lock_release_recursive>:
 80a3c4c:	4770      	bx	lr

080a3c4e <link_code_end>:
	...

080a3c50 <dynalib_user>:
 80a3c50:	0021 080a 0061 080a 0089 080a 008d 080a     !...a...........
 80a3c60:	0000 0000 6576 7463 726f 3a3a 4d5f 725f     ....vector::_M_r
 80a3c70:	6165 6c6c 636f 695f 736e 7265 0074 6572     ealloc_insert.re
 80a3c80:	7073 7269 7461 6f69 006e 6163 6e6e 746f     spiration.cannot
 80a3c90:	6320 6572 7461 2065 7473 3a64 763a 6365      create std::vec
 80a3ca0:	6f74 2072 616c 6772 7265 7420 6168 206e     tor larger than 
 80a3cb0:	616d 5f78 6973 657a 2928 4d00 7369 616d     max_size().Misma
 80a3cc0:	6374 6568 2064 656c 676e 6874 0073 7265     tched lengths.er
 80a3cd0:	0072 654c 676e 6874 6920 2073 6f6e 2074     r.Length is not 
 80a3ce0:	2061 6f70 6577 2072 666f 3220 0000 0000     a power of 2....

080a3cf0 <_ZTV13ADCDMA_config>:
	...
 80a3cf8:	0bf5 080a 0bf7 080a 7061 0070 5925 252d     ........app.%Y-%
 80a3d08:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
 80a3d18:	7361 7463 6d69 0065                         asctime.

080a3d20 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a3d28:	1301 080a 1307 080a 1345 080a 1315 080a     ........E.......
 80a3d38:	1303 080a                                   ....

080a3d3c <_ZTV9IPAddress>:
	...
 80a3d44:	183b 080a 1839 080a 186d 080a               ;...9...m...

080a3d50 <_ZTV9USBSerial>:
	...
 80a3d58:	1907 080a 196d 080a 1945 080a 10a5 080a     ....m...E.......
 80a3d68:	1937 080a 1909 080a 1919 080a 1967 080a     7...........g...
 80a3d78:	1929 080a 1901 080a                         ).......

080a3d80 <_ZTV11USARTSerial>:
	...
 80a3d88:	1a95 080a 1afd 080a 1ad9 080a 10a5 080a     ................
 80a3d98:	1aa9 080a 1ac5 080a 1ab7 080a 1ad3 080a     ................
 80a3da8:	1a97 080a 1a9b 080a                         ........

080a3db0 <_ZTVN5spark9WiFiClassE>:
	...
 80a3db8:	1bf3 080a 1be9 080a 1bdf 080a 1b5d 080a     ............]...
 80a3dc8:	1131 080a 1bd3 080a 1c51 080a 1c59 080a     1.......Q...Y...
 80a3dd8:	1bc7 080a 1bbf 080a 1bb5 080a 1bab 080a     ................
 80a3de8:	1b67 080a                                   g...

080a3dec <_ZTVN5spark12NetworkClassE>:
	...
 80a3df4:	1c11 080a 1c1b 080a 1c25 080a 1c2f 080a     ........%.../...
 80a3e04:	1c39 080a 1c45 080a 1c51 080a 1c59 080a     9...E...Q...Y...
 80a3e14:	1c61 080a 1c6d 080a 1c75 080a 1c7f 080a     a...m...u.......
 80a3e24:	1c89 080a                                   ....

080a3e28 <_ZSt7nothrow>:
 80a3e28:	0000 0000                                   ....

080a3e2c <npio2_hw>:
 80a3e2c:	21fb 3ff9 21fb 4009 d97c 4012 21fb 4019     .!.?.!.@|..@.!.@
 80a3e3c:	6a7a 401f d97c 4022 fdbb 4025 21fb 4029     zj.@|."@..%@.!)@
 80a3e4c:	463a 402c 6a7a 402f 475c 4031 d97c 4032     :F,@zj/@\G1@|.2@
 80a3e5c:	6b9c 4034 fdbb 4035 8fdb 4037 21fb 4039     .k4@..5@..7@.!9@
 80a3e6c:	b41b 403a 463a 403c d85a 403d 6a7a 403f     ..:@:F<@Z.=@zj?@
 80a3e7c:	7e4c 4040 475c 4041 106c 4042 d97c 4042     L~@@\GA@l.B@|.B@
 80a3e8c:	a28c 4043 6b9c 4044 34ac 4045 fdbb 4045     ..C@.kD@.4E@..E@
 80a3e9c:	c6cb 4046 8fdb 4047 58eb 4048 21fb 4049     ..F@..G@.XH@.!I@

080a3eac <two_over_pi>:
 80a3eac:	f983 00a2 4e44 006e 29fc 0015 57d1 0027     ....DNn..)...W'.
 80a3ebc:	34dd 00f5 db62 00c0 993c 0095 9041 0043     .4..b...<...A.C.
 80a3ecc:	5163 00fe debb 00ab 61b7 00c5 6e3a 0024     cQ.......a..:n$.
 80a3edc:	4dd2 0042 0649 00e0 ea09 002e 921c 00d1     .MB.I...........
 80a3eec:	1deb 00fe b129 001c 3ee8 00a7 35f5 0082     ....)....>...5..
 80a3efc:	bb44 002e e99c 0084 26b4 0070 7e41 005f     D........&p.A~_.
 80a3f0c:	91d6 0039 8353 0039 f49c 0039 5f8b 0084     ..9.S.9...9.._..
 80a3f1c:	f928 00bd 1ff8 003b ffde 0097 980f 0005     (.....;.........
 80a3f2c:	2f11 00ef 5a0a 008b 1f6d 006d 7ecf 0036     ./...Z..m.m..~6.
 80a3f3c:	cb09 0027 4f46 00b7 669e 003f ea2d 005f     ..'.FO...f?.-._.
 80a3f4c:	27ba 0075 ebe5 00c7 7b3d 00f1 39f7 0007     .'u.....={...9..
 80a3f5c:	5292 008a 6bfb 00ea b11f 005f 5d08 008d     .R...k...._..]..
 80a3f6c:	0330 0056 fc7b 0046 abf0 006b bc20 00cf     0.V.{.F...k. ...
 80a3f7c:	f436 009a a9e3 001d 615e 0091 1b08 00e6     6.......^a......
 80a3f8c:	9985 0065 14a0 005f 408d 0068 d880 00ff     ..e..._..@h.....
 80a3f9c:	7327 004d 0606 0031 56ca 0015 a8c9 0073     'sM...1..V....s.
 80a3fac:	e27b 0060 8c6b 00c0 0000 0000               {.`.k.......

080a3fb8 <PIo2>:
 80a3fb8:	0000 4000 21fb 3ff9 0000 0000 442d 3e74     ...@.!.?....-Dt>
 80a3fc8:	0000 8000 4698 3cf8 0000 6000 cc51 3b78     .....F.<...`Q.x;
 80a3fd8:	0000 8000 1b83 39f0 0000 4000 2520 387a     .......9...@ %z8
 80a3fe8:	0000 8000 8222 36e3 0000 0000 f31d 3569     ...."..6......i5

080a3ff8 <init_jk>:
 80a3ff8:	0002 0000 0003 0000 0004 0000 0006 0000     ................
 80a4008:	4552 4e45 2054 616d 6c6c 636f 7320 6375     REENT malloc suc
 80a4018:	6563 6465 6465 2f00 6e6d 2f74 6f77 6b72     ceeded./mnt/work
 80a4028:	7073 6361 2f65 6f77 6b72 7073 6361 2f65     space/workspace/
 80a4038:	4347 2d43 3031 702d 7069 6c65 6e69 2f65     GCC-10-pipeline/
 80a4048:	656a 6b6e 6e69 2d73 4347 2d43 3031 702d     jenkins-GCC-10-p
 80a4058:	7069 6c65 6e69 2d65 3834 325f 3230 3130     ipeline-48_20201
 80a4068:	3231 5f34 3631 3630 3831 3630 3134 732f     124_1606180641/s
 80a4078:	6372 6e2f 7765 696c 2f62 656e 6c77 6269     rc/newlib/newlib
 80a4088:	6c2f 6269 2f63 7473 6c64 6269 722f 6e61     /libc/stdlib/ran
 80a4098:	2e64 0063                                   d.c.

080a409c <link_const_variable_data_end>:
 80a409c:	080a0815 	.word	0x080a0815
 80a40a0:	080a0be9 	.word	0x080a0be9
 80a40a4:	080a1081 	.word	0x080a1081
 80a40a8:	080a113d 	.word	0x080a113d
 80a40ac:	080a114d 	.word	0x080a114d
 80a40b0:	080a1195 	.word	0x080a1195
 80a40b4:	080a1bfd 	.word	0x080a1bfd
 80a40b8:	080a1cd9 	.word	0x080a1cd9
 80a40bc:	080a1d6d 	.word	0x080a1d6d

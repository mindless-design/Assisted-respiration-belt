
/Users/kristopherngo/Documents/GitHub/Assisted-respiration-belt/target/3.3.0/photon/Assisted-respiration-belt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005d80  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a5da0  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00001090  20000000  080a5da4  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00001660  20001090  20001090  00041090  2**3
                  ALLOC
  6 .module_info_suffix 00000028  080a6e34  080a6e34  00036e34  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a6e5c  080a6e5c  00036e5c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0013d7f5  00000000  00000000  00036e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 00019262  00000000  00000000  00174655  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    0002d4c3  00000000  00000000  0018d8b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00002e40  00000000  00000000  001bad7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00007c78  00000000  00000000  001bdbba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003022d  00000000  00000000  001c5832  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00043e11  00000000  00000000  001f5a5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000d81e5  00000000  00000000  00239870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  00007ee4  00000000  00000000  00311a58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f005 f92d 	bl	80a5290 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f005 f94f 	bl	80a52e0 <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080a5da4 	.word	0x080a5da4
 80a0050:	20001090 	.word	0x20001090
 80a0054:	20001090 	.word	0x20001090
 80a0058:	200026ed 	.word	0x200026ed
 80a005c:	200026ed 	.word	0x200026ed

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f002 ffdd 	bl	80a3020 <module_user_init_hook>

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0066:	2500      	movs	r5, #0
 80a0068:	4e05      	ldr	r6, [pc, #20]	; (80a0080 <module_user_init+0x20>)
 80a006a:	4c06      	ldr	r4, [pc, #24]	; (80a0084 <module_user_init+0x24>)
 80a006c:	1ba4      	subs	r4, r4, r6
 80a006e:	08a4      	lsrs	r4, r4, #2
 80a0070:	42ac      	cmp	r4, r5
 80a0072:	d100      	bne.n	80a0076 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0074:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0076:	f856 3b04 	ldr.w	r3, [r6], #4
 80a007a:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f7      	b.n	80a0070 <module_user_init+0x10>
 80a0080:	080a5d5c 	.word	0x080a5d5c
 80a0084:	080a5d94 	.word	0x080a5d94

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 bac6 	b.w	80a0618 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 fbd1 	bl	80a0834 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0096:	f002 bf7b 	b.w	80a2f90 <_post_loop>

080a009a <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80a009a:	f001 bb0d 	b.w	80a16b8 <malloc>

080a009e <_Znaj>:
 80a009e:	f001 bb0b 	b.w	80a16b8 <malloc>

080a00a2 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 80a00a2:	f001 bb11 	b.w	80a16c8 <free>

080a00a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a6:	7800      	ldrb	r0, [r0, #0]
 80a00a8:	fab0 f080 	clz	r0, r0
 80a00ac:	0940      	lsrs	r0, r0, #5
 80a00ae:	4770      	bx	lr

080a00b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00b0:	2301      	movs	r3, #1
 80a00b2:	7003      	strb	r3, [r0, #0]
 80a00b4:	4770      	bx	lr
	...

080a00b8 <NVIC_Init>:
 80a00b8:	78c3      	ldrb	r3, [r0, #3]
 80a00ba:	b31b      	cbz	r3, 80a0104 <NVIC_Init+0x4c>
 80a00bc:	4b17      	ldr	r3, [pc, #92]	; (80a011c <NVIC_Init+0x64>)
 80a00be:	68da      	ldr	r2, [r3, #12]
 80a00c0:	7843      	ldrb	r3, [r0, #1]
 80a00c2:	43d2      	mvns	r2, r2
 80a00c4:	f3c2 2202 	ubfx	r2, r2, #8, #3
 80a00c8:	f1c2 0104 	rsb	r1, r2, #4
 80a00cc:	b2c9      	uxtb	r1, r1
 80a00ce:	408b      	lsls	r3, r1
 80a00d0:	b2d9      	uxtb	r1, r3
 80a00d2:	230f      	movs	r3, #15
 80a00d4:	4113      	asrs	r3, r2
 80a00d6:	7882      	ldrb	r2, [r0, #2]
 80a00d8:	4013      	ands	r3, r2
 80a00da:	7802      	ldrb	r2, [r0, #0]
 80a00dc:	430b      	orrs	r3, r1
 80a00de:	011b      	lsls	r3, r3, #4
 80a00e0:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
 80a00e4:	b2db      	uxtb	r3, r3
 80a00e6:	f502 4261 	add.w	r2, r2, #57600	; 0xe100
 80a00ea:	f882 3300 	strb.w	r3, [r2, #768]	; 0x300
 80a00ee:	7803      	ldrb	r3, [r0, #0]
 80a00f0:	2201      	movs	r2, #1
 80a00f2:	0959      	lsrs	r1, r3, #5
 80a00f4:	f003 031f 	and.w	r3, r3, #31
 80a00f8:	fa02 f303 	lsl.w	r3, r2, r3
 80a00fc:	4a08      	ldr	r2, [pc, #32]	; (80a0120 <NVIC_Init+0x68>)
 80a00fe:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80a0102:	4770      	bx	lr
 80a0104:	7803      	ldrb	r3, [r0, #0]
 80a0106:	2101      	movs	r1, #1
 80a0108:	095a      	lsrs	r2, r3, #5
 80a010a:	f003 031f 	and.w	r3, r3, #31
 80a010e:	4099      	lsls	r1, r3
 80a0110:	f102 0320 	add.w	r3, r2, #32
 80a0114:	4a02      	ldr	r2, [pc, #8]	; (80a0120 <NVIC_Init+0x68>)
 80a0116:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80a011a:	4770      	bx	lr
 80a011c:	e000ed00 	.word	0xe000ed00
 80a0120:	e000e100 	.word	0xe000e100

080a0124 <ADC_Init>:
 80a0124:	6843      	ldr	r3, [r0, #4]
 80a0126:	b510      	push	{r4, lr}
 80a0128:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80a012c:	680b      	ldr	r3, [r1, #0]
 80a012e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80a0132:	4313      	orrs	r3, r2
 80a0134:	790a      	ldrb	r2, [r1, #4]
 80a0136:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a013a:	6043      	str	r3, [r0, #4]
 80a013c:	68ca      	ldr	r2, [r1, #12]
 80a013e:	690b      	ldr	r3, [r1, #16]
 80a0140:	6884      	ldr	r4, [r0, #8]
 80a0142:	431a      	orrs	r2, r3
 80a0144:	688b      	ldr	r3, [r1, #8]
 80a0146:	431a      	orrs	r2, r3
 80a0148:	4b08      	ldr	r3, [pc, #32]	; (80a016c <ADC_Init+0x48>)
 80a014a:	4023      	ands	r3, r4
 80a014c:	4313      	orrs	r3, r2
 80a014e:	794a      	ldrb	r2, [r1, #5]
 80a0150:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 80a0154:	6083      	str	r3, [r0, #8]
 80a0156:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80a0158:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80a015c:	7d0b      	ldrb	r3, [r1, #20]
 80a015e:	3b01      	subs	r3, #1
 80a0160:	b2db      	uxtb	r3, r3
 80a0162:	ea42 5303 	orr.w	r3, r2, r3, lsl #20
 80a0166:	62c3      	str	r3, [r0, #44]	; 0x2c
 80a0168:	bd10      	pop	{r4, pc}
 80a016a:	bf00      	nop
 80a016c:	c0fff7fd 	.word	0xc0fff7fd

080a0170 <ADC_CommonInit>:
 80a0170:	b510      	push	{r4, lr}
 80a0172:	4c07      	ldr	r4, [pc, #28]	; (80a0190 <ADC_CommonInit+0x20>)
 80a0174:	4b07      	ldr	r3, [pc, #28]	; (80a0194 <ADC_CommonInit+0x24>)
 80a0176:	6862      	ldr	r2, [r4, #4]
 80a0178:	4013      	ands	r3, r2
 80a017a:	e890 0006 	ldmia.w	r0, {r1, r2}
 80a017e:	4311      	orrs	r1, r2
 80a0180:	6882      	ldr	r2, [r0, #8]
 80a0182:	4311      	orrs	r1, r2
 80a0184:	68c2      	ldr	r2, [r0, #12]
 80a0186:	430a      	orrs	r2, r1
 80a0188:	4313      	orrs	r3, r2
 80a018a:	6063      	str	r3, [r4, #4]
 80a018c:	bd10      	pop	{r4, pc}
 80a018e:	bf00      	nop
 80a0190:	40012300 	.word	0x40012300
 80a0194:	fffc30e0 	.word	0xfffc30e0

080a0198 <ADC_Cmd>:
 80a0198:	6883      	ldr	r3, [r0, #8]
 80a019a:	b111      	cbz	r1, 80a01a2 <ADC_Cmd+0xa>
 80a019c:	f043 0301 	orr.w	r3, r3, #1
 80a01a0:	e001      	b.n	80a01a6 <ADC_Cmd+0xe>
 80a01a2:	f023 0301 	bic.w	r3, r3, #1
 80a01a6:	6083      	str	r3, [r0, #8]
 80a01a8:	4770      	bx	lr

080a01aa <ADC_RegularChannelConfig>:
 80a01aa:	2909      	cmp	r1, #9
 80a01ac:	b570      	push	{r4, r5, r6, lr}
 80a01ae:	d90c      	bls.n	80a01ca <ADC_RegularChannelConfig+0x20>
 80a01b0:	f1a1 040a 	sub.w	r4, r1, #10
 80a01b4:	68c6      	ldr	r6, [r0, #12]
 80a01b6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80a01ba:	2507      	movs	r5, #7
 80a01bc:	40a5      	lsls	r5, r4
 80a01be:	ea26 0505 	bic.w	r5, r6, r5
 80a01c2:	40a3      	lsls	r3, r4
 80a01c4:	432b      	orrs	r3, r5
 80a01c6:	60c3      	str	r3, [r0, #12]
 80a01c8:	e009      	b.n	80a01de <ADC_RegularChannelConfig+0x34>
 80a01ca:	6905      	ldr	r5, [r0, #16]
 80a01cc:	eb01 0641 	add.w	r6, r1, r1, lsl #1
 80a01d0:	2407      	movs	r4, #7
 80a01d2:	40b4      	lsls	r4, r6
 80a01d4:	ea25 0404 	bic.w	r4, r5, r4
 80a01d8:	40b3      	lsls	r3, r6
 80a01da:	4323      	orrs	r3, r4
 80a01dc:	6103      	str	r3, [r0, #16]
 80a01de:	2a06      	cmp	r2, #6
 80a01e0:	d80b      	bhi.n	80a01fa <ADC_RegularChannelConfig+0x50>
 80a01e2:	3a01      	subs	r2, #1
 80a01e4:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80a01e6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80a01ea:	231f      	movs	r3, #31
 80a01ec:	4093      	lsls	r3, r2
 80a01ee:	ea24 0303 	bic.w	r3, r4, r3
 80a01f2:	4091      	lsls	r1, r2
 80a01f4:	4319      	orrs	r1, r3
 80a01f6:	6341      	str	r1, [r0, #52]	; 0x34
 80a01f8:	bd70      	pop	{r4, r5, r6, pc}
 80a01fa:	2a0c      	cmp	r2, #12
 80a01fc:	d80b      	bhi.n	80a0216 <ADC_RegularChannelConfig+0x6c>
 80a01fe:	3a07      	subs	r2, #7
 80a0200:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80a0202:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80a0206:	231f      	movs	r3, #31
 80a0208:	4093      	lsls	r3, r2
 80a020a:	ea24 0303 	bic.w	r3, r4, r3
 80a020e:	4091      	lsls	r1, r2
 80a0210:	4319      	orrs	r1, r3
 80a0212:	6301      	str	r1, [r0, #48]	; 0x30
 80a0214:	bd70      	pop	{r4, r5, r6, pc}
 80a0216:	3a0d      	subs	r2, #13
 80a0218:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80a021a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80a021e:	231f      	movs	r3, #31
 80a0220:	4093      	lsls	r3, r2
 80a0222:	ea24 0303 	bic.w	r3, r4, r3
 80a0226:	4091      	lsls	r1, r2
 80a0228:	4319      	orrs	r1, r3
 80a022a:	62c1      	str	r1, [r0, #44]	; 0x2c
 80a022c:	bd70      	pop	{r4, r5, r6, pc}

080a022e <ADC_SoftwareStartConv>:
 80a022e:	6883      	ldr	r3, [r0, #8]
 80a0230:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80a0234:	6083      	str	r3, [r0, #8]
 80a0236:	4770      	bx	lr

080a0238 <ADC_MultiModeDMARequestAfterLastTransferCmd>:
 80a0238:	4b04      	ldr	r3, [pc, #16]	; (80a024c <ADC_MultiModeDMARequestAfterLastTransferCmd+0x14>)
 80a023a:	685a      	ldr	r2, [r3, #4]
 80a023c:	b110      	cbz	r0, 80a0244 <ADC_MultiModeDMARequestAfterLastTransferCmd+0xc>
 80a023e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80a0242:	e001      	b.n	80a0248 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x10>
 80a0244:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80a0248:	605a      	str	r2, [r3, #4]
 80a024a:	4770      	bx	lr
 80a024c:	40012300 	.word	0x40012300

080a0250 <DMA_Init>:
 80a0250:	6802      	ldr	r2, [r0, #0]
 80a0252:	4b13      	ldr	r3, [pc, #76]	; (80a02a0 <DMA_Init+0x50>)
 80a0254:	b510      	push	{r4, lr}
 80a0256:	4013      	ands	r3, r2
 80a0258:	68cc      	ldr	r4, [r1, #12]
 80a025a:	680a      	ldr	r2, [r1, #0]
 80a025c:	4314      	orrs	r4, r2
 80a025e:	694a      	ldr	r2, [r1, #20]
 80a0260:	4314      	orrs	r4, r2
 80a0262:	698a      	ldr	r2, [r1, #24]
 80a0264:	4314      	orrs	r4, r2
 80a0266:	69ca      	ldr	r2, [r1, #28]
 80a0268:	4314      	orrs	r4, r2
 80a026a:	6a0a      	ldr	r2, [r1, #32]
 80a026c:	4314      	orrs	r4, r2
 80a026e:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 80a0270:	4314      	orrs	r4, r2
 80a0272:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80a0274:	4314      	orrs	r4, r2
 80a0276:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 80a0278:	4314      	orrs	r4, r2
 80a027a:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 80a027c:	4322      	orrs	r2, r4
 80a027e:	4313      	orrs	r3, r2
 80a0280:	6003      	str	r3, [r0, #0]
 80a0282:	6943      	ldr	r3, [r0, #20]
 80a0284:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 80a0286:	f023 0207 	bic.w	r2, r3, #7
 80a028a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80a028c:	4323      	orrs	r3, r4
 80a028e:	4313      	orrs	r3, r2
 80a0290:	6143      	str	r3, [r0, #20]
 80a0292:	690b      	ldr	r3, [r1, #16]
 80a0294:	6043      	str	r3, [r0, #4]
 80a0296:	684b      	ldr	r3, [r1, #4]
 80a0298:	6083      	str	r3, [r0, #8]
 80a029a:	688b      	ldr	r3, [r1, #8]
 80a029c:	60c3      	str	r3, [r0, #12]
 80a029e:	bd10      	pop	{r4, pc}
 80a02a0:	f01c803f 	.word	0xf01c803f

080a02a4 <DMA_Cmd>:
 80a02a4:	6803      	ldr	r3, [r0, #0]
 80a02a6:	b111      	cbz	r1, 80a02ae <DMA_Cmd+0xa>
 80a02a8:	f043 0301 	orr.w	r3, r3, #1
 80a02ac:	e001      	b.n	80a02b2 <DMA_Cmd+0xe>
 80a02ae:	f023 0301 	bic.w	r3, r3, #1
 80a02b2:	6003      	str	r3, [r0, #0]
 80a02b4:	4770      	bx	lr
	...

080a02b8 <DMA_GetFlagStatus>:
 80a02b8:	4b0a      	ldr	r3, [pc, #40]	; (80a02e4 <DMA_GetFlagStatus+0x2c>)
 80a02ba:	b510      	push	{r4, lr}
 80a02bc:	4a0a      	ldr	r2, [pc, #40]	; (80a02e8 <DMA_GetFlagStatus+0x30>)
 80a02be:	4c0b      	ldr	r4, [pc, #44]	; (80a02ec <DMA_GetFlagStatus+0x34>)
 80a02c0:	42a0      	cmp	r0, r4
 80a02c2:	bf94      	ite	ls
 80a02c4:	4618      	movls	r0, r3
 80a02c6:	4610      	movhi	r0, r2
 80a02c8:	008b      	lsls	r3, r1, #2
 80a02ca:	bf4c      	ite	mi
 80a02cc:	6843      	ldrmi	r3, [r0, #4]
 80a02ce:	6803      	ldrpl	r3, [r0, #0]
 80a02d0:	f021 21f0 	bic.w	r1, r1, #4026593280	; 0xf000f000
 80a02d4:	f021 1182 	bic.w	r1, r1, #8519810	; 0x820082
 80a02d8:	4219      	tst	r1, r3
 80a02da:	bf14      	ite	ne
 80a02dc:	2001      	movne	r0, #1
 80a02de:	2000      	moveq	r0, #0
 80a02e0:	bd10      	pop	{r4, pc}
 80a02e2:	bf00      	nop
 80a02e4:	40026000 	.word	0x40026000
 80a02e8:	40026400 	.word	0x40026400
 80a02ec:	4002640f 	.word	0x4002640f

080a02f0 <DMA_ClearFlag>:
 80a02f0:	b510      	push	{r4, lr}
 80a02f2:	4a08      	ldr	r2, [pc, #32]	; (80a0314 <DMA_ClearFlag+0x24>)
 80a02f4:	4b08      	ldr	r3, [pc, #32]	; (80a0318 <DMA_ClearFlag+0x28>)
 80a02f6:	4c09      	ldr	r4, [pc, #36]	; (80a031c <DMA_ClearFlag+0x2c>)
 80a02f8:	42a0      	cmp	r0, r4
 80a02fa:	bf94      	ite	ls
 80a02fc:	4618      	movls	r0, r3
 80a02fe:	4610      	movhi	r0, r2
 80a0300:	f011 5f00 	tst.w	r1, #536870912	; 0x20000000
 80a0304:	f021 21f0 	bic.w	r1, r1, #4026593280	; 0xf000f000
 80a0308:	f021 1182 	bic.w	r1, r1, #8519810	; 0x820082
 80a030c:	bf14      	ite	ne
 80a030e:	60c1      	strne	r1, [r0, #12]
 80a0310:	6081      	streq	r1, [r0, #8]
 80a0312:	bd10      	pop	{r4, pc}
 80a0314:	40026400 	.word	0x40026400
 80a0318:	40026000 	.word	0x40026000
 80a031c:	4002640f 	.word	0x4002640f

080a0320 <RCC_AHB1PeriphClockCmd>:
 80a0320:	4b04      	ldr	r3, [pc, #16]	; (80a0334 <RCC_AHB1PeriphClockCmd+0x14>)
 80a0322:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80a0324:	b109      	cbz	r1, 80a032a <RCC_AHB1PeriphClockCmd+0xa>
 80a0326:	4310      	orrs	r0, r2
 80a0328:	e001      	b.n	80a032e <RCC_AHB1PeriphClockCmd+0xe>
 80a032a:	ea22 0000 	bic.w	r0, r2, r0
 80a032e:	6318      	str	r0, [r3, #48]	; 0x30
 80a0330:	4770      	bx	lr
 80a0332:	bf00      	nop
 80a0334:	40023800 	.word	0x40023800

080a0338 <RCC_APB1PeriphClockCmd>:
 80a0338:	4b04      	ldr	r3, [pc, #16]	; (80a034c <RCC_APB1PeriphClockCmd+0x14>)
 80a033a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80a033c:	b109      	cbz	r1, 80a0342 <RCC_APB1PeriphClockCmd+0xa>
 80a033e:	4310      	orrs	r0, r2
 80a0340:	e001      	b.n	80a0346 <RCC_APB1PeriphClockCmd+0xe>
 80a0342:	ea22 0000 	bic.w	r0, r2, r0
 80a0346:	6418      	str	r0, [r3, #64]	; 0x40
 80a0348:	4770      	bx	lr
 80a034a:	bf00      	nop
 80a034c:	40023800 	.word	0x40023800

080a0350 <RCC_APB2PeriphClockCmd>:
 80a0350:	4b04      	ldr	r3, [pc, #16]	; (80a0364 <RCC_APB2PeriphClockCmd+0x14>)
 80a0352:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80a0354:	b109      	cbz	r1, 80a035a <RCC_APB2PeriphClockCmd+0xa>
 80a0356:	4310      	orrs	r0, r2
 80a0358:	e001      	b.n	80a035e <RCC_APB2PeriphClockCmd+0xe>
 80a035a:	ea22 0000 	bic.w	r0, r2, r0
 80a035e:	6458      	str	r0, [r3, #68]	; 0x44
 80a0360:	4770      	bx	lr
 80a0362:	bf00      	nop
 80a0364:	40023800 	.word	0x40023800

080a0368 <TIM_TimeBaseInit>:
 80a0368:	4a1c      	ldr	r2, [pc, #112]	; (80a03dc <TIM_TimeBaseInit+0x74>)
 80a036a:	8803      	ldrh	r3, [r0, #0]
 80a036c:	4290      	cmp	r0, r2
 80a036e:	b29b      	uxth	r3, r3
 80a0370:	d012      	beq.n	80a0398 <TIM_TimeBaseInit+0x30>
 80a0372:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80a0376:	4290      	cmp	r0, r2
 80a0378:	d00e      	beq.n	80a0398 <TIM_TimeBaseInit+0x30>
 80a037a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80a037e:	d00b      	beq.n	80a0398 <TIM_TimeBaseInit+0x30>
 80a0380:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 80a0384:	4290      	cmp	r0, r2
 80a0386:	d007      	beq.n	80a0398 <TIM_TimeBaseInit+0x30>
 80a0388:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80a038c:	4290      	cmp	r0, r2
 80a038e:	d003      	beq.n	80a0398 <TIM_TimeBaseInit+0x30>
 80a0390:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80a0394:	4290      	cmp	r0, r2
 80a0396:	d103      	bne.n	80a03a0 <TIM_TimeBaseInit+0x38>
 80a0398:	884a      	ldrh	r2, [r1, #2]
 80a039a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80a039e:	4313      	orrs	r3, r2
 80a03a0:	4a0f      	ldr	r2, [pc, #60]	; (80a03e0 <TIM_TimeBaseInit+0x78>)
 80a03a2:	4290      	cmp	r0, r2
 80a03a4:	d008      	beq.n	80a03b8 <TIM_TimeBaseInit+0x50>
 80a03a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80a03aa:	4290      	cmp	r0, r2
 80a03ac:	bf1f      	itttt	ne
 80a03ae:	f423 7340 	bicne.w	r3, r3, #768	; 0x300
 80a03b2:	890a      	ldrhne	r2, [r1, #8]
 80a03b4:	b29b      	uxthne	r3, r3
 80a03b6:	4313      	orrne	r3, r2
 80a03b8:	8003      	strh	r3, [r0, #0]
 80a03ba:	684b      	ldr	r3, [r1, #4]
 80a03bc:	62c3      	str	r3, [r0, #44]	; 0x2c
 80a03be:	880b      	ldrh	r3, [r1, #0]
 80a03c0:	8503      	strh	r3, [r0, #40]	; 0x28
 80a03c2:	4b06      	ldr	r3, [pc, #24]	; (80a03dc <TIM_TimeBaseInit+0x74>)
 80a03c4:	4298      	cmp	r0, r3
 80a03c6:	d003      	beq.n	80a03d0 <TIM_TimeBaseInit+0x68>
 80a03c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80a03cc:	4298      	cmp	r0, r3
 80a03ce:	d101      	bne.n	80a03d4 <TIM_TimeBaseInit+0x6c>
 80a03d0:	7a8b      	ldrb	r3, [r1, #10]
 80a03d2:	8603      	strh	r3, [r0, #48]	; 0x30
 80a03d4:	2301      	movs	r3, #1
 80a03d6:	8283      	strh	r3, [r0, #20]
 80a03d8:	4770      	bx	lr
 80a03da:	bf00      	nop
 80a03dc:	40010000 	.word	0x40010000
 80a03e0:	40001000 	.word	0x40001000

080a03e4 <TIM_TimeBaseStructInit>:
 80a03e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a03e8:	6043      	str	r3, [r0, #4]
 80a03ea:	2300      	movs	r3, #0
 80a03ec:	8003      	strh	r3, [r0, #0]
 80a03ee:	8103      	strh	r3, [r0, #8]
 80a03f0:	8043      	strh	r3, [r0, #2]
 80a03f2:	7283      	strb	r3, [r0, #10]
 80a03f4:	4770      	bx	lr

080a03f6 <TIM_Cmd>:
 80a03f6:	8803      	ldrh	r3, [r0, #0]
 80a03f8:	b119      	cbz	r1, 80a0402 <TIM_Cmd+0xc>
 80a03fa:	b29b      	uxth	r3, r3
 80a03fc:	f043 0301 	orr.w	r3, r3, #1
 80a0400:	e003      	b.n	80a040a <TIM_Cmd+0x14>
 80a0402:	f023 0301 	bic.w	r3, r3, #1
 80a0406:	041b      	lsls	r3, r3, #16
 80a0408:	0c1b      	lsrs	r3, r3, #16
 80a040a:	8003      	strh	r3, [r0, #0]
 80a040c:	4770      	bx	lr

080a040e <TIM_SelectOutputTrigger>:
 80a040e:	8883      	ldrh	r3, [r0, #4]
 80a0410:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80a0414:	041b      	lsls	r3, r3, #16
 80a0416:	0c1b      	lsrs	r3, r3, #16
 80a0418:	8083      	strh	r3, [r0, #4]
 80a041a:	8883      	ldrh	r3, [r0, #4]
 80a041c:	b29b      	uxth	r3, r3
 80a041e:	4319      	orrs	r1, r3
 80a0420:	8081      	strh	r1, [r0, #4]
 80a0422:	4770      	bx	lr

080a0424 <_Z15switch_peltiersv>:

Timer peltier_timer((default_period/4), switch_peltiers);

char state = 'D'; // H = Hot on. C = Cold on. I = Hot off. D = Cold off.

void switch_peltiers() {
 80a0424:	b510      	push	{r4, lr}

  switch (state) {
 80a0426:	4c19      	ldr	r4, [pc, #100]	; (80a048c <_Z15switch_peltiersv+0x68>)
 80a0428:	7823      	ldrb	r3, [r4, #0]
 80a042a:	3b43      	subs	r3, #67	; 0x43
 80a042c:	2b06      	cmp	r3, #6
 80a042e:	d80f      	bhi.n	80a0450 <_Z15switch_peltiersv+0x2c>
 80a0430:	e8df f003 	tbb	[pc, r3]
 80a0434:	0e0e0422 	.word	0x0e0e0422
 80a0438:	190e      	.short	0x190e
 80a043a:	0f          	.byte	0x0f
 80a043b:	00          	.byte	0x00
    case 'D' : 
      analogWrite(HOT_PELTIER_PIN, 0);
 80a043c:	2100      	movs	r1, #0
 80a043e:	4608      	mov	r0, r1
 80a0440:	f002 fe94 	bl	80a316c <_Z11analogWritetm>
      analogWrite(COLD_PELTIER_PIN, 0);
 80a0444:	2100      	movs	r1, #0
 80a0446:	2002      	movs	r0, #2
 80a0448:	f002 fe90 	bl	80a316c <_Z11analogWritetm>

      state = 'H';
 80a044c:	2348      	movs	r3, #72	; 0x48
      break;

    case 'C' :
      analogWrite(COLD_PELTIER_PIN, cold_PWM_duty_cycle, cold_PWM_frequency);

      state = 'D';
 80a044e:	7023      	strb	r3, [r4, #0]
      break;
  }
}
 80a0450:	bd10      	pop	{r4, pc}
      analogWrite(HOT_PELTIER_PIN, 0);
 80a0452:	2100      	movs	r1, #0
 80a0454:	4608      	mov	r0, r1
 80a0456:	f002 fe89 	bl	80a316c <_Z11analogWritetm>
      analogWrite(COLD_PELTIER_PIN, 0);
 80a045a:	2100      	movs	r1, #0
 80a045c:	2002      	movs	r0, #2
 80a045e:	f002 fe85 	bl	80a316c <_Z11analogWritetm>
      state = 'C';
 80a0462:	2343      	movs	r3, #67	; 0x43
 80a0464:	e7f3      	b.n	80a044e <_Z15switch_peltiersv+0x2a>
      analogWrite(HOT_PELTIER_PIN, hot_PWM_duty_cycle, hot_PWM_frequency);
 80a0466:	4b0a      	ldr	r3, [pc, #40]	; (80a0490 <_Z15switch_peltiersv+0x6c>)
 80a0468:	2000      	movs	r0, #0
 80a046a:	681a      	ldr	r2, [r3, #0]
 80a046c:	4b09      	ldr	r3, [pc, #36]	; (80a0494 <_Z15switch_peltiersv+0x70>)
 80a046e:	6819      	ldr	r1, [r3, #0]
 80a0470:	f002 fea2 	bl	80a31b8 <_Z11analogWritetmm>
      state = 'I';
 80a0474:	2349      	movs	r3, #73	; 0x49
 80a0476:	e7ea      	b.n	80a044e <_Z15switch_peltiersv+0x2a>
      analogWrite(COLD_PELTIER_PIN, cold_PWM_duty_cycle, cold_PWM_frequency);
 80a0478:	4b07      	ldr	r3, [pc, #28]	; (80a0498 <_Z15switch_peltiersv+0x74>)
 80a047a:	2002      	movs	r0, #2
 80a047c:	681a      	ldr	r2, [r3, #0]
 80a047e:	4b07      	ldr	r3, [pc, #28]	; (80a049c <_Z15switch_peltiersv+0x78>)
 80a0480:	6819      	ldr	r1, [r3, #0]
 80a0482:	f002 fe99 	bl	80a31b8 <_Z11analogWritetmm>
      state = 'D';
 80a0486:	2344      	movs	r3, #68	; 0x44
 80a0488:	e7e1      	b.n	80a044e <_Z15switch_peltiersv+0x2a>
 80a048a:	bf00      	nop
 80a048c:	20001020 	.word	0x20001020
 80a0490:	20001010 	.word	0x20001010
 80a0494:	2000100c 	.word	0x2000100c
 80a0498:	20001004 	.word	0x20001004
 80a049c:	20001000 	.word	0x20001000

080a04a0 <_Z25set_hot_peltier_intensity6String>:
    return frequency_in_milihertz; //success
  }
  return 0;
}

int set_hot_peltier_intensity (String command) {
 80a04a0:	b508      	push	{r3, lr}
  hot_intensity = atoi(command);
 80a04a2:	6800      	ldr	r0, [r0, #0]
 80a04a4:	f004 fef0 	bl	80a5288 <atoi>
 80a04a8:	4b05      	ldr	r3, [pc, #20]	; (80a04c0 <_Z25set_hot_peltier_intensity6String+0x20>)
  if (hot_intensity >= 0 && hot_intensity <= 10) {
 80a04aa:	280a      	cmp	r0, #10
  hot_intensity = atoi(command);
 80a04ac:	6018      	str	r0, [r3, #0]
   hot_PWM_duty_cycle = hot_intensity * 13;
 80a04ae:	bf9d      	ittte	ls
 80a04b0:	230d      	movls	r3, #13
 80a04b2:	4343      	mulls	r3, r0
 80a04b4:	4a03      	ldrls	r2, [pc, #12]	; (80a04c4 <_Z25set_hot_peltier_intensity6String+0x24>)
   return hot_intensity; //Success
  }
  return -1;
 80a04b6:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   hot_PWM_duty_cycle = hot_intensity * 13;
 80a04ba:	bf98      	it	ls
 80a04bc:	6013      	strls	r3, [r2, #0]
}
 80a04be:	bd08      	pop	{r3, pc}
 80a04c0:	200010d8 	.word	0x200010d8
 80a04c4:	2000100c 	.word	0x2000100c

080a04c8 <_Z26set_cold_peltier_intensity6String>:

int set_cold_peltier_intensity (String command) {
 80a04c8:	b508      	push	{r3, lr}
  cold_intensity = atoi(command);
 80a04ca:	6800      	ldr	r0, [r0, #0]
 80a04cc:	f004 fedc 	bl	80a5288 <atoi>
 80a04d0:	4b05      	ldr	r3, [pc, #20]	; (80a04e8 <_Z26set_cold_peltier_intensity6String+0x20>)
  if (cold_intensity >= 0 && cold_intensity <= 10) {
 80a04d2:	280a      	cmp	r0, #10
  cold_intensity = atoi(command);
 80a04d4:	6018      	str	r0, [r3, #0]
   cold_PWM_duty_cycle = cold_intensity * 13;
 80a04d6:	bf9d      	ittte	ls
 80a04d8:	230d      	movls	r3, #13
 80a04da:	4343      	mulls	r3, r0
 80a04dc:	4a03      	ldrls	r2, [pc, #12]	; (80a04ec <_Z26set_cold_peltier_intensity6String+0x24>)
   return cold_intensity; //Success
  }
  return -1;
 80a04de:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   cold_PWM_duty_cycle = cold_intensity * 13;
 80a04e2:	bf98      	it	ls
 80a04e4:	6013      	strls	r3, [r2, #0]
}
 80a04e6:	bd08      	pop	{r3, pc}
 80a04e8:	200010a0 	.word	0x200010a0
 80a04ec:	20001000 	.word	0x20001000

080a04f0 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
 80a04f0:	6943      	ldr	r3, [r0, #20]
 80a04f2:	b113      	cbz	r3, 80a04fa <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a04f4:	6983      	ldr	r3, [r0, #24]
 80a04f6:	300c      	adds	r0, #12
 80a04f8:	4718      	bx	r3
            callback();
        }
    }
 80a04fa:	4770      	bx	lr

080a04fc <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
 80a04fc:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
 80a04fe:	2100      	movs	r1, #0
 80a0500:	4604      	mov	r4, r0
 80a0502:	4608      	mov	r0, r1
 80a0504:	f000 fe6a 	bl	80a11dc <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
 80a0508:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
 80a050a:	4620      	mov	r0, r4
 80a050c:	a901      	add	r1, sp, #4
            void* id = nullptr;
 80a050e:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
 80a0510:	f000 fe7c 	bl	80a120c <os_timer_get_id>
            t = static_cast<Timer*>(id);
 80a0514:	9c01      	ldr	r4, [sp, #4]
            if (t) {
 80a0516:	b10c      	cbz	r4, 80a051c <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
 80a0518:	2301      	movs	r3, #1
 80a051a:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
 80a051c:	2100      	movs	r1, #0
 80a051e:	2001      	movs	r0, #1
 80a0520:	f000 fe5c 	bl	80a11dc <os_thread_scheduling>
            }
        }
        if (t) {
 80a0524:	b12c      	cbz	r4, 80a0532 <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
 80a0526:	6823      	ldr	r3, [r4, #0]
 80a0528:	4620      	mov	r0, r4
 80a052a:	689b      	ldr	r3, [r3, #8]
 80a052c:	4798      	blx	r3
            t->running = false;
 80a052e:	2300      	movs	r3, #0
 80a0530:	7123      	strb	r3, [r4, #4]
        }
    }
 80a0532:	b002      	add	sp, #8
 80a0534:	bd10      	pop	{r4, pc}

080a0536 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
 80a0536:	2a01      	cmp	r2, #1
 80a0538:	d102      	bne.n	80a0540 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80a053a:	6001      	str	r1, [r0, #0]
      }
 80a053c:	2000      	movs	r0, #0
 80a053e:	4770      	bx	lr
	  switch (__op)
 80a0540:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 80a0542:	bf04      	itt	eq
 80a0544:	680b      	ldreq	r3, [r1, #0]
 80a0546:	6003      	streq	r3, [r0, #0]
	      break;
 80a0548:	e7f8      	b.n	80a053c <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

080a054a <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80a054a:	6803      	ldr	r3, [r0, #0]
 80a054c:	4718      	bx	r3
	...

080a0550 <_Z21set_peltier_frequency6String>:
int set_peltier_frequency (String command) {
 80a0550:	b513      	push	{r0, r1, r4, lr}
  frequency_in_milihertz = atoi(command);
 80a0552:	6800      	ldr	r0, [r0, #0]
 80a0554:	f004 fe98 	bl	80a5288 <atoi>
 80a0558:	4c0d      	ldr	r4, [pc, #52]	; (80a0590 <_Z21set_peltier_frequency6String+0x40>)
  if (frequency_in_milihertz <= 500 && frequency_in_milihertz >= 33) {
 80a055a:	f1a0 0221 	sub.w	r2, r0, #33	; 0x21
 80a055e:	f5b2 7fea 	cmp.w	r2, #468	; 0x1d4
  frequency_in_milihertz = atoi(command);
 80a0562:	4603      	mov	r3, r0
 80a0564:	6020      	str	r0, [r4, #0]
  if (frequency_in_milihertz <= 500 && frequency_in_milihertz >= 33) {
 80a0566:	d210      	bcs.n	80a058a <_Z21set_peltier_frequency6String+0x3a>
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
 80a0568:	4a0a      	ldr	r2, [pc, #40]	; (80a0594 <_Z21set_peltier_frequency6String+0x44>)
 80a056a:	6890      	ldr	r0, [r2, #8]
 80a056c:	b150      	cbz	r0, 80a0584 <_Z21set_peltier_frequency6String+0x34>
 80a056e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80a0572:	2200      	movs	r2, #0
 80a0574:	e9cd 1200 	strd	r1, r2, [sp]
 80a0578:	4907      	ldr	r1, [pc, #28]	; (80a0598 <_Z21set_peltier_frequency6String+0x48>)
 80a057a:	fb91 f3f3 	sdiv	r3, r1, r3
 80a057e:	2103      	movs	r1, #3
 80a0580:	f000 fe4c 	bl	80a121c <os_timer_change>
    return frequency_in_milihertz; //success
 80a0584:	6820      	ldr	r0, [r4, #0]
}
 80a0586:	b002      	add	sp, #8
 80a0588:	bd10      	pop	{r4, pc}
  return 0;
 80a058a:	2000      	movs	r0, #0
 80a058c:	e7fb      	b.n	80a0586 <_Z21set_peltier_frequency6String+0x36>
 80a058e:	bf00      	nop
 80a0590:	200010d4 	.word	0x200010d4
 80a0594:	200010dc 	.word	0x200010dc
 80a0598:	0003d090 	.word	0x0003d090

080a059c <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 80a059c:	b510      	push	{r4, lr}
      if (_M_manager)
 80a059e:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 80a05a0:	4604      	mov	r4, r0
      if (_M_manager)
 80a05a2:	b113      	cbz	r3, 80a05aa <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a05a4:	2203      	movs	r2, #3
 80a05a6:	4601      	mov	r1, r0
 80a05a8:	4798      	blx	r3
    }
 80a05aa:	4620      	mov	r0, r4
 80a05ac:	bd10      	pop	{r4, pc}
	...

080a05b0 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
 80a05b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a05b2:	4b13      	ldr	r3, [pc, #76]	; (80a0600 <_ZN5TimerD1Ev+0x50>)
 80a05b4:	4604      	mov	r4, r0
 80a05b6:	6003      	str	r3, [r0, #0]
        if (handle) {
 80a05b8:	6880      	ldr	r0, [r0, #8]
 80a05ba:	b1c8      	cbz	r0, 80a05f0 <_ZN5TimerD1Ev+0x40>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
 80a05bc:	2500      	movs	r5, #0
 80a05be:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80a05c2:	2102      	movs	r1, #2
 80a05c4:	e9cd 3500 	strd	r3, r5, [sp]
 80a05c8:	462a      	mov	r2, r5
 80a05ca:	462b      	mov	r3, r5
 80a05cc:	f000 fe26 	bl	80a121c <os_timer_change>
            os_timer_set_id(handle, nullptr);
 80a05d0:	4629      	mov	r1, r5
 80a05d2:	68a0      	ldr	r0, [r4, #8]
 80a05d4:	f000 fe3a 	bl	80a124c <os_timer_set_id>
            while (running) {
 80a05d8:	7923      	ldrb	r3, [r4, #4]
 80a05da:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80a05de:	b113      	cbz	r3, 80a05e6 <_ZN5TimerD1Ev+0x36>
                os_thread_yield();
 80a05e0:	f000 fdf4 	bl	80a11cc <os_thread_yield>
            while (running) {
 80a05e4:	e7f8      	b.n	80a05d8 <_ZN5TimerD1Ev+0x28>
            os_timer_destroy(handle, nullptr);
 80a05e6:	4629      	mov	r1, r5
 80a05e8:	68a0      	ldr	r0, [r4, #8]
 80a05ea:	f000 fe07 	bl	80a11fc <os_timer_destroy>
            handle = nullptr;
 80a05ee:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
 80a05f0:	f104 000c 	add.w	r0, r4, #12
 80a05f4:	f7ff ffd2 	bl	80a059c <_ZNSt14_Function_baseD1Ev>
    }
 80a05f8:	4620      	mov	r0, r4
 80a05fa:	b003      	add	sp, #12
 80a05fc:	bd30      	pop	{r4, r5, pc}
 80a05fe:	bf00      	nop
 80a0600:	080a563c 	.word	0x080a563c

080a0604 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
 80a0604:	b510      	push	{r4, lr}
 80a0606:	4604      	mov	r4, r0
    }
 80a0608:	f7ff ffd2 	bl	80a05b0 <_ZN5TimerD1Ev>
 80a060c:	4620      	mov	r0, r4
 80a060e:	211c      	movs	r1, #28
 80a0610:	f7ff fd47 	bl	80a00a2 <_ZdlPvj>
 80a0614:	4620      	mov	r0, r4
 80a0616:	bd10      	pop	{r4, pc}

080a0618 <setup>:

// setup() runs once, when the device is first turned on.
void setup() {
 80a0618:	b513      	push	{r0, r1, r4, lr}

  Serial.begin(9600);
 80a061a:	f002 fbc5 	bl	80a2da8 <_Z16_fetch_usbserialv>
 80a061e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a0622:	f002 fba7 	bl	80a2d74 <_ZN9USBSerial5beginEl>

  // Configure the ADC and DMA handler to move samples into a circular buffer.
	adcDMA.start(SAMPLE_RATE);
 80a0626:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80a062a:	481f      	ldr	r0, [pc, #124]	; (80a06a8 <setup+0x90>)
 80a062c:	f000 faee 	bl	80a0c0c <_ZN13ADCDMA_config5startEj>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
 80a0630:	2300      	movs	r3, #0
 80a0632:	2209      	movs	r2, #9
 80a0634:	491d      	ldr	r1, [pc, #116]	; (80a06ac <setup+0x94>)
 80a0636:	481e      	ldr	r0, [pc, #120]	; (80a06b0 <setup+0x98>)
 80a0638:	f000 ffb6 	bl	80a15a8 <spark_variable>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
 80a063c:	4a1d      	ldr	r2, [pc, #116]	; (80a06b4 <setup+0x9c>)
 80a063e:	491e      	ldr	r1, [pc, #120]	; (80a06b8 <setup+0xa0>)
 80a0640:	481e      	ldr	r0, [pc, #120]	; (80a06bc <setup+0xa4>)
 80a0642:	f001 f8e8 	bl	80a1816 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80a0646:	4a1e      	ldr	r2, [pc, #120]	; (80a06c0 <setup+0xa8>)
 80a0648:	491e      	ldr	r1, [pc, #120]	; (80a06c4 <setup+0xac>)
 80a064a:	481c      	ldr	r0, [pc, #112]	; (80a06bc <setup+0xa4>)
 80a064c:	f001 f8e3 	bl	80a1816 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80a0650:	4a1d      	ldr	r2, [pc, #116]	; (80a06c8 <setup+0xb0>)
 80a0652:	491e      	ldr	r1, [pc, #120]	; (80a06cc <setup+0xb4>)
 80a0654:	4819      	ldr	r0, [pc, #100]	; (80a06bc <setup+0xa4>)
 80a0656:	f001 f8de 	bl	80a1816 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  // Setup for recieving the respiration feedback data.
  Particle.function("frequency", set_peltier_frequency);
  Particle.function("hot intensity", set_hot_peltier_intensity);
  Particle.function("cold intensity", set_cold_peltier_intensity);

  pinMode(HOT_PELTIER_PIN, OUTPUT);
 80a065a:	2101      	movs	r1, #1
 80a065c:	2000      	movs	r0, #0
 80a065e:	f002 fd5b 	bl	80a3118 <pinMode>
  pinMode(COLD_PELTIER_PIN, OUTPUT);
 80a0662:	2101      	movs	r1, #1
 80a0664:	2002      	movs	r0, #2
 80a0666:	f002 fd57 	bl	80a3118 <pinMode>
  pinMode(PELTIER_ENABLE_PIN, OUTPUT);
 80a066a:	2101      	movs	r1, #1
 80a066c:	4608      	mov	r0, r1
 80a066e:	f002 fd53 	bl	80a3118 <pinMode>

  digitalWrite(PELTIER_ENABLE_PIN, HIGH);
 80a0672:	2101      	movs	r1, #1
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
 80a0674:	4c16      	ldr	r4, [pc, #88]	; (80a06d0 <setup+0xb8>)
 80a0676:	4608      	mov	r0, r1
 80a0678:	f002 fd5f 	bl	80a313a <digitalWrite>
 80a067c:	68a0      	ldr	r0, [r4, #8]
 80a067e:	b130      	cbz	r0, 80a068e <setup+0x76>
 80a0680:	2300      	movs	r3, #0
 80a0682:	2102      	movs	r1, #2
 80a0684:	461a      	mov	r2, r3
 80a0686:	e9cd 3300 	strd	r3, r3, [sp]
 80a068a:	f000 fdc7 	bl	80a121c <os_timer_change>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
 80a068e:	68a0      	ldr	r0, [r4, #8]
 80a0690:	b140      	cbz	r0, 80a06a4 <setup+0x8c>
 80a0692:	2300      	movs	r3, #0
 80a0694:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80a0698:	4619      	mov	r1, r3
 80a069a:	e9cd 2300 	strd	r2, r3, [sp]
 80a069e:	461a      	mov	r2, r3
 80a06a0:	f000 fdbc 	bl	80a121c <os_timer_change>
  peltier_timer.start();
}
 80a06a4:	b002      	add	sp, #8
 80a06a6:	bd10      	pop	{r4, pc}
 80a06a8:	20001090 	.word	0x20001090
 80a06ac:	20001018 	.word	0x20001018
 80a06b0:	080a5598 	.word	0x080a5598
 80a06b4:	080a55a4 	.word	0x080a55a4
 80a06b8:	080a0551 	.word	0x080a0551
 80a06bc:	080a17eb 	.word	0x080a17eb
 80a06c0:	080a55ae 	.word	0x080a55ae
 80a06c4:	080a04a1 	.word	0x080a04a1
 80a06c8:	080a55bc 	.word	0x080a55bc
 80a06cc:	080a04c9 	.word	0x080a04c9
 80a06d0:	200010dc 	.word	0x200010dc

080a06d4 <_ZNSt12_Vector_baseIdSaIdEED1Ev>:
      _Vector_base(const allocator_type& __a, _Vector_base&& __x)
      : _M_impl(_Tp_alloc_type(__a), std::move(__x._M_impl))
      { }
#endif

      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80a06d4:	b510      	push	{r4, lr}
 80a06d6:	4604      	mov	r4, r0
      {
	_M_deallocate(_M_impl._M_start,
 80a06d8:	6800      	ldr	r0, [r0, #0]

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
 80a06da:	b118      	cbz	r0, 80a06e4 <_ZNSt12_Vector_baseIdSaIdEED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80a06dc:	68a1      	ldr	r1, [r4, #8]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 80a06de:	1a09      	subs	r1, r1, r0
 80a06e0:	f7ff fcdf 	bl	80a00a2 <_ZdlPvj>
      }
 80a06e4:	4620      	mov	r0, r4
 80a06e6:	bd10      	pop	{r4, pc}

080a06e8 <_ZNSt6vectorIdSaIdEE17_M_realloc_insertIJRKdEEEvN9__gnu_cxx17__normal_iteratorIPdS1_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 80a06e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
 80a06ec:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80a06f0:	e9d0 8900 	ldrd	r8, r9, [r0]
 80a06f4:	4693      	mov	fp, r2
 80a06f6:	eba9 0208 	sub.w	r2, r9, r8
	if (max_size() - size() < __n)
 80a06fa:	ebb3 0fe2 	cmp.w	r3, r2, asr #3
 80a06fe:	4607      	mov	r7, r0
 80a0700:	468a      	mov	sl, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80a0702:	ea4f 04e2 	mov.w	r4, r2, asr #3
	if (max_size() - size() < __n)
 80a0706:	d102      	bne.n	80a070e <_ZNSt6vectorIdSaIdEE17_M_realloc_insertIJRKdEEEvN9__gnu_cxx17__normal_iteratorIPdS1_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 80a0708:	4820      	ldr	r0, [pc, #128]	; (80a078c <_ZNSt6vectorIdSaIdEE17_M_realloc_insertIJRKdEEEvN9__gnu_cxx17__normal_iteratorIPdS1_EEDpOT_+0xa4>)
 80a070a:	f002 fe00 	bl	80a330e <_ZSt20__throw_length_errorPKc>
 80a070e:	2c01      	cmp	r4, #1
 80a0710:	4622      	mov	r2, r4
 80a0712:	bf38      	it	cc
 80a0714:	2201      	movcc	r2, #1
 80a0716:	18a4      	adds	r4, r4, r2
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 80a0718:	eba1 0508 	sub.w	r5, r1, r8

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80a071c:	d231      	bcs.n	80a0782 <_ZNSt6vectorIdSaIdEE17_M_realloc_insertIJRKdEEEvN9__gnu_cxx17__normal_iteratorIPdS1_EEDpOT_+0x9a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80a071e:	b394      	cbz	r4, 80a0786 <_ZNSt6vectorIdSaIdEE17_M_realloc_insertIJRKdEEEvN9__gnu_cxx17__normal_iteratorIPdS1_EEDpOT_+0x9e>
 80a0720:	429c      	cmp	r4, r3
 80a0722:	bf28      	it	cs
 80a0724:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a0726:	00e0      	lsls	r0, r4, #3
 80a0728:	f7ff fcb7 	bl	80a009a <_Znwj>
 80a072c:	4606      	mov	r6, r0
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80a072e:	1971      	adds	r1, r6, r5
 80a0730:	d003      	beq.n	80a073a <_ZNSt6vectorIdSaIdEE17_M_realloc_insertIJRKdEEEvN9__gnu_cxx17__normal_iteratorIPdS1_EEDpOT_+0x52>
 80a0732:	e9db 2300 	ldrd	r2, r3, [fp]
 80a0736:	e9c1 2300 	strd	r2, r3, [r1]
    inline __enable_if_t<std::__is_bitwise_relocatable<_Tp>::value, _Tp*>
    __relocate_a_1(_Tp* __first, _Tp* __last,
		   _Tp* __result, allocator<_Up>&) noexcept
    {
      ptrdiff_t __count = __last - __first;
      if (__count > 0)
 80a073a:	2d00      	cmp	r5, #0
 80a073c:	dd04      	ble.n	80a0748 <_ZNSt6vectorIdSaIdEE17_M_realloc_insertIJRKdEEEvN9__gnu_cxx17__normal_iteratorIPdS1_EEDpOT_+0x60>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80a073e:	462a      	mov	r2, r5
 80a0740:	4641      	mov	r1, r8
 80a0742:	4630      	mov	r0, r6
 80a0744:	f004 fdb2 	bl	80a52ac <memmove>
      ptrdiff_t __count = __last - __first;
 80a0748:	eba9 090a 	sub.w	r9, r9, sl
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
					 __new_start, _M_get_Tp_allocator());

	      ++__new_finish;
 80a074c:	3508      	adds	r5, #8
      if (__count > 0)
 80a074e:	f1b9 0f00 	cmp.w	r9, #0
 80a0752:	4435      	add	r5, r6
 80a0754:	dd04      	ble.n	80a0760 <_ZNSt6vectorIdSaIdEE17_M_realloc_insertIJRKdEEEvN9__gnu_cxx17__normal_iteratorIPdS1_EEDpOT_+0x78>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80a0756:	464a      	mov	r2, r9
 80a0758:	4651      	mov	r1, sl
 80a075a:	4628      	mov	r0, r5
 80a075c:	f004 fd98 	bl	80a5290 <memcpy>
      return __result + __count;
 80a0760:	444d      	add	r5, r9
	if (__p)
 80a0762:	f1b8 0f00 	cmp.w	r8, #0
 80a0766:	d005      	beq.n	80a0774 <_ZNSt6vectorIdSaIdEE17_M_realloc_insertIJRKdEEEvN9__gnu_cxx17__normal_iteratorIPdS1_EEDpOT_+0x8c>
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
 80a0768:	68b9      	ldr	r1, [r7, #8]
	::operator delete(__p
 80a076a:	4640      	mov	r0, r8
 80a076c:	eba1 0108 	sub.w	r1, r1, r8
 80a0770:	f7ff fc97 	bl	80a00a2 <_ZdlPvj>
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80a0774:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
      this->_M_impl._M_finish = __new_finish;
 80a0778:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80a077c:	60bc      	str	r4, [r7, #8]
    }
 80a077e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80a0782:	461c      	mov	r4, r3
 80a0784:	e7cf      	b.n	80a0726 <_ZNSt6vectorIdSaIdEE17_M_realloc_insertIJRKdEEEvN9__gnu_cxx17__normal_iteratorIPdS1_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80a0786:	4626      	mov	r6, r4
 80a0788:	e7d1      	b.n	80a072e <_ZNSt6vectorIdSaIdEE17_M_realloc_insertIJRKdEEEvN9__gnu_cxx17__normal_iteratorIPdS1_EEDpOT_+0x46>
 80a078a:	bf00      	nop
 80a078c:	080a55cb 	.word	0x080a55cb

080a0790 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIdEEPT_PKS3_S6_S4_>:
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
 80a0790:	4281      	cmp	r1, r0
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80a0792:	b510      	push	{r4, lr}
 80a0794:	4613      	mov	r3, r2
	  const ptrdiff_t _Num = __last - __first;
 80a0796:	eba1 0400 	sub.w	r4, r1, r0
	  if (_Num)
 80a079a:	d005      	beq.n	80a07a8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIdEEPT_PKS3_S6_S4_+0x18>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80a079c:	4601      	mov	r1, r0
 80a079e:	4622      	mov	r2, r4
 80a07a0:	4618      	mov	r0, r3
 80a07a2:	f004 fd83 	bl	80a52ac <memmove>
 80a07a6:	4603      	mov	r3, r0
	  return __result + _Num;
	}
 80a07a8:	1918      	adds	r0, r3, r4
 80a07aa:	bd10      	pop	{r4, pc}

080a07ac <_ZNSt6vectorIdSaIdEEaSERKS1_.isra.0>:
      if (&__x != this)
 80a07ac:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
 80a07ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a07b2:	4604      	mov	r4, r0
 80a07b4:	460e      	mov	r6, r1
      if (&__x != this)
 80a07b6:	d023      	beq.n	80a0800 <_ZNSt6vectorIdSaIdEEaSERKS1_.isra.0+0x54>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80a07b8:	e9d1 7800 	ldrd	r7, r8, [r1]
			 - this->_M_impl._M_start); }
 80a07bc:	6802      	ldr	r2, [r0, #0]
 80a07be:	6883      	ldr	r3, [r0, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80a07c0:	eba8 0507 	sub.w	r5, r8, r7
			 - this->_M_impl._M_start); }
 80a07c4:	1a9b      	subs	r3, r3, r2
	  if (__xlen > capacity())
 80a07c6:	429d      	cmp	r5, r3
 80a07c8:	d91e      	bls.n	80a0808 <_ZNSt6vectorIdSaIdEEaSERKS1_.isra.0+0x5c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80a07ca:	b1dd      	cbz	r5, 80a0804 <_ZNSt6vectorIdSaIdEEaSERKS1_.isra.0+0x58>
	if (__n > this->_M_max_size())
 80a07cc:	4b18      	ldr	r3, [pc, #96]	; (80a0830 <_ZNSt6vectorIdSaIdEEaSERKS1_.isra.0+0x84>)
 80a07ce:	429d      	cmp	r5, r3
 80a07d0:	d901      	bls.n	80a07d6 <_ZNSt6vectorIdSaIdEEaSERKS1_.isra.0+0x2a>
	  std::__throw_bad_alloc();
 80a07d2:	f002 fd99 	bl	80a3308 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a07d6:	4628      	mov	r0, r5
 80a07d8:	f7ff fc5f 	bl	80a009a <_Znwj>
 80a07dc:	4606      	mov	r6, r0
      if (std::is_constant_evaluated())
	return std::__copy_move<_IsMove, false, _Category>::
	  __copy_m(__first, __last, __result);
#endif
      return std::__copy_move<_IsMove, __memcpyable<_OI, _II>::__value,
			      _Category>::__copy_m(__first, __last, __result);
 80a07de:	4632      	mov	r2, r6
 80a07e0:	4641      	mov	r1, r8
 80a07e2:	4638      	mov	r0, r7
 80a07e4:	f7ff ffd4 	bl	80a0790 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIdEEPT_PKS3_S6_S4_>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80a07e8:	6820      	ldr	r0, [r4, #0]
	if (__p)
 80a07ea:	b118      	cbz	r0, 80a07f4 <_ZNSt6vectorIdSaIdEEaSERKS1_.isra.0+0x48>
			    - this->_M_impl._M_start);
 80a07ec:	68a1      	ldr	r1, [r4, #8]
	::operator delete(__p
 80a07ee:	1a09      	subs	r1, r1, r0
 80a07f0:	f7ff fc57 	bl	80a00a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
 80a07f4:	6026      	str	r6, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 80a07f6:	442e      	add	r6, r5
 80a07f8:	60a6      	str	r6, [r4, #8]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 80a07fa:	6823      	ldr	r3, [r4, #0]
 80a07fc:	442b      	add	r3, r5
 80a07fe:	6063      	str	r3, [r4, #4]
    }
 80a0800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80a0804:	462e      	mov	r6, r5
 80a0806:	e7ea      	b.n	80a07de <_ZNSt6vectorIdSaIdEEaSERKS1_.isra.0+0x32>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80a0808:	6843      	ldr	r3, [r0, #4]
 80a080a:	1a9b      	subs	r3, r3, r2
	  else if (size() >= __xlen)
 80a080c:	429d      	cmp	r5, r3
 80a080e:	d804      	bhi.n	80a081a <_ZNSt6vectorIdSaIdEEaSERKS1_.isra.0+0x6e>
 80a0810:	4641      	mov	r1, r8
 80a0812:	4638      	mov	r0, r7
 80a0814:	f7ff ffbc 	bl	80a0790 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIdEEPT_PKS3_S6_S4_>
    { return std::uninitialized_copy(__first, __last, __result); }
 80a0818:	e7ef      	b.n	80a07fa <_ZNSt6vectorIdSaIdEEaSERKS1_.isra.0+0x4e>
 80a081a:	18f9      	adds	r1, r7, r3
 80a081c:	4638      	mov	r0, r7
 80a081e:	f7ff ffb7 	bl	80a0790 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIdEEPT_PKS3_S6_S4_>
 80a0822:	e9d4 0200 	ldrd	r0, r2, [r4]
 80a0826:	e9d6 3100 	ldrd	r3, r1, [r6]
 80a082a:	1a10      	subs	r0, r2, r0
 80a082c:	4418      	add	r0, r3
 80a082e:	e7f1      	b.n	80a0814 <_ZNSt6vectorIdSaIdEEaSERKS1_.isra.0+0x68>
 80a0830:	7ffffff8 	.word	0x7ffffff8

080a0834 <loop>:

// loop() runs over and over again, as quickly as it can execute.
void loop() {
 80a0834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  // checking the half and full flags configured in ADCDMA_config.

	uint16_t *samples_buffer = NULL;


	if (DMA_GetFlagStatus(DMA2_Stream0, DMA_FLAG_HTIF0)) {
 80a0838:	49a8      	ldr	r1, [pc, #672]	; (80a0adc <loop+0x2a8>)
 80a083a:	48a9      	ldr	r0, [pc, #676]	; (80a0ae0 <loop+0x2ac>)
void loop() {
 80a083c:	b08d      	sub	sp, #52	; 0x34
	if (DMA_GetFlagStatus(DMA2_Stream0, DMA_FLAG_HTIF0)) {
 80a083e:	f7ff fd3b 	bl	80a02b8 <DMA_GetFlagStatus>
 80a0842:	4604      	mov	r4, r0
 80a0844:	b120      	cbz	r0, 80a0850 <loop+0x1c>
	  DMA_ClearFlag(DMA2_Stream0, DMA_FLAG_HTIF0);
 80a0846:	49a5      	ldr	r1, [pc, #660]	; (80a0adc <loop+0x2a8>)
 80a0848:	48a5      	ldr	r0, [pc, #660]	; (80a0ae0 <loop+0x2ac>)
 80a084a:	f7ff fd51 	bl	80a02f0 <DMA_ClearFlag>
	  samples_buffer = samples;
 80a084e:	4ca5      	ldr	r4, [pc, #660]	; (80a0ae4 <loop+0x2b0>)
	}
	if (DMA_GetFlagStatus(DMA2_Stream0, DMA_FLAG_TCIF0)) {
 80a0850:	49a5      	ldr	r1, [pc, #660]	; (80a0ae8 <loop+0x2b4>)
 80a0852:	48a3      	ldr	r0, [pc, #652]	; (80a0ae0 <loop+0x2ac>)
 80a0854:	f7ff fd30 	bl	80a02b8 <DMA_GetFlagStatus>
 80a0858:	2800      	cmp	r0, #0
 80a085a:	f000 80fa 	beq.w	80a0a52 <loop+0x21e>
	  DMA_ClearFlag(DMA2_Stream0, DMA_FLAG_TCIF0);
 80a085e:	49a2      	ldr	r1, [pc, #648]	; (80a0ae8 <loop+0x2b4>)
 80a0860:	489f      	ldr	r0, [pc, #636]	; (80a0ae0 <loop+0x2ac>)
 80a0862:	f7ff fd45 	bl	80a02f0 <DMA_ClearFlag>
	  samples_buffer = &samples[SAMPLE_BUF_SIZE/2-1];
 80a0866:	4ca1      	ldr	r4, [pc, #644]	; (80a0aec <loop+0x2b8>)
 80a0868:	2600      	movs	r6, #0
 80a086a:	2700      	movs	r7, #0
    double sum = 0;

    // Since the ADCs are sampling simulaneously, the samples from each need to be averaged. Then
    // the FIR filter is applied and only 1 of every "DECIMATION_FACTOR" samples is saved.

    for (size_t ii = 0, jj = 0; ii < SAMPLE_BUF_SIZE/2; ii += 2, jj++) {
 80a086c:	2500      	movs	r5, #0
 80a086e:	f8df a280 	ldr.w	sl, [pc, #640]	; 80a0af0 <loop+0x2bc>
      
      sum = (double)samples_buffer[ii]+(double)samples_buffer[ii+1];
 80a0872:	f104 0b02 	add.w	fp, r4, #2
 80a0876:	f83b 0015 	ldrh.w	r0, [fp, r5, lsl #1]

      filtered_sample += (sum/2)*FILTER_COEFFS[jj];
 80a087a:	e8fa 2302 	ldrd	r2, r3, [sl], #8
 80a087e:	e9cd 2302 	strd	r2, r3, [sp, #8]
      sum = (double)samples_buffer[ii]+(double)samples_buffer[ii+1];
 80a0882:	f004 f989 	bl	80a4b98 <__aeabi_ui2d>
 80a0886:	4680      	mov	r8, r0
 80a0888:	f834 0015 	ldrh.w	r0, [r4, r5, lsl #1]
 80a088c:	4689      	mov	r9, r1
 80a088e:	f004 f983 	bl	80a4b98 <__aeabi_ui2d>
 80a0892:	4602      	mov	r2, r0
 80a0894:	460b      	mov	r3, r1
 80a0896:	4640      	mov	r0, r8
 80a0898:	4649      	mov	r1, r9
 80a089a:	f004 f841 	bl	80a4920 <__adddf3>
      filtered_sample += (sum/2)*FILTER_COEFFS[jj];
 80a089e:	2200      	movs	r2, #0
 80a08a0:	4b94      	ldr	r3, [pc, #592]	; (80a0af4 <loop+0x2c0>)
 80a08a2:	f004 f9f3 	bl	80a4c8c <__aeabi_dmul>
 80a08a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a08aa:	f004 f9ef 	bl	80a4c8c <__aeabi_dmul>
 80a08ae:	4602      	mov	r2, r0
 80a08b0:	460b      	mov	r3, r1
 80a08b2:	4630      	mov	r0, r6
 80a08b4:	4639      	mov	r1, r7
 80a08b6:	f004 f833 	bl	80a4920 <__adddf3>
    for (size_t ii = 0, jj = 0; ii < SAMPLE_BUF_SIZE/2; ii += 2, jj++) {
 80a08ba:	3502      	adds	r5, #2
 80a08bc:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
      filtered_sample += (sum/2)*FILTER_COEFFS[jj];
 80a08c0:	4606      	mov	r6, r0
 80a08c2:	460f      	mov	r7, r1
    for (size_t ii = 0, jj = 0; ii < SAMPLE_BUF_SIZE/2; ii += 2, jj++) {
 80a08c4:	d1d7      	bne.n	80a0876 <loop+0x42>
 80a08c6:	e9cd 6706 	strd	r6, r7, [sp, #24]
    }

    Serial.print("filtered sample: ");
 80a08ca:	f002 fa6d 	bl	80a2da8 <_Z16_fetch_usbserialv>
 80a08ce:	498a      	ldr	r1, [pc, #552]	; (80a0af8 <loop+0x2c4>)
 80a08d0:	f001 fb74 	bl	80a1fbc <_ZN5Print5printEPKc>
    Serial.println(filtered_sample, 4);
 80a08d4:	f002 fa68 	bl	80a2da8 <_Z16_fetch_usbserialv>
 80a08d8:	2304      	movs	r3, #4
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80a08da:	4d88      	ldr	r5, [pc, #544]	; (80a0afc <loop+0x2c8>)
 80a08dc:	9300      	str	r3, [sp, #0]
 80a08de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a08e2:	f001 fc5d 	bl	80a21a0 <_ZN5Print7printlnEdi>
 80a08e6:	e9d5 1301 	ldrd	r1, r3, [r5, #4]
 80a08ea:	4299      	cmp	r1, r3
 80a08ec:	f000 80b7 	beq.w	80a0a5e <loop+0x22a>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80a08f0:	b119      	cbz	r1, 80a08fa <loop+0xc6>
 80a08f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a08f6:	e9c1 2300 	strd	r2, r3, [r1]
	    ++this->_M_impl._M_finish;
 80a08fa:	686b      	ldr	r3, [r5, #4]
 80a08fc:	3308      	adds	r3, #8
 80a08fe:	606b      	str	r3, [r5, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80a0900:	e9d5 2600 	ldrd	r2, r6, [r5]
 80a0904:	1ab6      	subs	r6, r6, r2

    fft_window_data_real.push_back(filtered_sample);

    if (fft_window_data_real.size() == fft_window_data_size) {
 80a0906:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80a090a:	f040 80a5 	bne.w	80a0a58 <loop+0x224>
			 - this->_M_impl._M_start); }
 80a090e:	4c7c      	ldr	r4, [pc, #496]	; (80a0b00 <loop+0x2cc>)
 80a0910:	6820      	ldr	r0, [r4, #0]
 80a0912:	68a3      	ldr	r3, [r4, #8]
 80a0914:	1a1b      	subs	r3, r3, r0
      if (__n > capacity())
 80a0916:	f5b3 7f7e 	cmp.w	r3, #1016	; 0x3f8
 80a091a:	f200 80a5 	bhi.w	80a0a68 <loop+0x234>
	: _M_start(), _M_finish(), _M_end_of_storage()
 80a091e:	f04f 0800 	mov.w	r8, #0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a0922:	4630      	mov	r0, r6
 80a0924:	e9cd 8809 	strd	r8, r8, [sp, #36]	; 0x24
 80a0928:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 80a092c:	f7ff fbb5 	bl	80a009a <_Znwj>
 80a0930:	4607      	mov	r7, r0
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
	      const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
	*__first = __tmp;
 80a0932:	4632      	mov	r2, r6
 80a0934:	4641      	mov	r1, r8
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80a0936:	f500 6980 	add.w	r9, r0, #1024	; 0x400
 80a093a:	f004 fcd1 	bl	80a52e0 <memset>
	  _M_start = __x._M_start;
 80a093e:	6823      	ldr	r3, [r4, #0]
      }
 80a0940:	a809      	add	r0, sp, #36	; 0x24
	  _M_start = __x._M_start;
 80a0942:	9309      	str	r3, [sp, #36]	; 0x24
	  _M_finish = __x._M_finish;
 80a0944:	6863      	ldr	r3, [r4, #4]
 80a0946:	e9c4 7900 	strd	r7, r9, [r4]
 80a094a:	930a      	str	r3, [sp, #40]	; 0x28
	  _M_end_of_storage = __x._M_end_of_storage;
 80a094c:	68a3      	ldr	r3, [r4, #8]
 80a094e:	f8c4 9008 	str.w	r9, [r4, #8]
 80a0952:	930b      	str	r3, [sp, #44]	; 0x2c
      }
 80a0954:	f7ff febe 	bl	80a06d4 <_ZNSt12_Vector_baseIdSaIdEED1Ev>
      // and multiply by 1/sqrt(fft_window_data_size) - to account for the number of samples in the spectrum.

      // We then find the index of the maximum peak in the spectrum and mutiply it with the BIN_SIZE.

      double largest_peak = 0;
      double respiration_frequency = 0;
 80a0958:	f04f 0a00 	mov.w	sl, #0
 80a095c:	f04f 0b00 	mov.w	fp, #0

      for (size_t i = BINS_TO_BE_CUT_OFF; i < fft_window_data_size/2 + 1; i++) {
 80a0960:	2602      	movs	r6, #2
      fft_window_data_copy = fft_window_data_real;
 80a0962:	4966      	ldr	r1, [pc, #408]	; (80a0afc <loop+0x2c8>)
 80a0964:	4867      	ldr	r0, [pc, #412]	; (80a0b04 <loop+0x2d0>)
 80a0966:	f7ff ff21 	bl	80a07ac <_ZNSt6vectorIdSaIdEEaSERKS1_.isra.0>
      fft.transformRadix2(fft_window_data_real, fft_window_data_imag);
 80a096a:	4a65      	ldr	r2, [pc, #404]	; (80a0b00 <loop+0x2cc>)
 80a096c:	4963      	ldr	r1, [pc, #396]	; (80a0afc <loop+0x2c8>)
 80a096e:	a809      	add	r0, sp, #36	; 0x24
 80a0970:	f000 fa56 	bl	80a0e20 <_ZN3Fft15transformRadix2ERSt6vectorIdSaIdEES3_>
      double largest_peak = 0;
 80a0974:	e9cd ab02 	strd	sl, fp, [sp, #8]
        current_value_of_single_sided_spectrum = fft_window_data_real[i]*fft_window_data_real[i]+fft_window_data_imag[i]*fft_window_data_imag[i];
 80a0978:	4f63      	ldr	r7, [pc, #396]	; (80a0b08 <loop+0x2d4>)
 80a097a:	682b      	ldr	r3, [r5, #0]
 80a097c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80a0980:	e9d3 0100 	ldrd	r0, r1, [r3]
 80a0984:	6823      	ldr	r3, [r4, #0]
 80a0986:	4602      	mov	r2, r0
 80a0988:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80a098c:	e9d3 8900 	ldrd	r8, r9, [r3]
 80a0990:	460b      	mov	r3, r1
 80a0992:	f004 f97b 	bl	80a4c8c <__aeabi_dmul>
 80a0996:	4642      	mov	r2, r8
 80a0998:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80a099c:	464b      	mov	r3, r9
 80a099e:	4640      	mov	r0, r8
 80a09a0:	4649      	mov	r1, r9
 80a09a2:	f004 f973 	bl	80a4c8c <__aeabi_dmul>
 80a09a6:	4602      	mov	r2, r0
 80a09a8:	460b      	mov	r3, r1
 80a09aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a09ae:	f003 ffb7 	bl	80a4920 <__adddf3>
 80a09b2:	e9c7 0100 	strd	r0, r1, [r7]
        
        Serial.print("Current value of spectrum: ");
 80a09b6:	f002 f9f7 	bl	80a2da8 <_Z16_fetch_usbserialv>
 80a09ba:	4954      	ldr	r1, [pc, #336]	; (80a0b0c <loop+0x2d8>)
 80a09bc:	f001 fafe 	bl	80a1fbc <_ZN5Print5printEPKc>
        Serial.println(current_value_of_single_sided_spectrum, 4);
 80a09c0:	f002 f9f2 	bl	80a2da8 <_Z16_fetch_usbserialv>
 80a09c4:	2304      	movs	r3, #4
 80a09c6:	9300      	str	r3, [sp, #0]
 80a09c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80a09cc:	f001 fbe8 	bl	80a21a0 <_ZN5Print7printlnEdi>

        if (i == BINS_TO_BE_CUT_OFF) {
 80a09d0:	2e02      	cmp	r6, #2
 80a09d2:	d16c      	bne.n	80a0aae <loop+0x27a>
          largest_peak = current_value_of_single_sided_spectrum;
 80a09d4:	e9d7 2300 	ldrd	r2, r3, [r7]
          respiration_frequency = BIN_SIZE*i;
 80a09d8:	f04f 0a00 	mov.w	sl, #0
          largest_peak = current_value_of_single_sided_spectrum;
 80a09dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
          respiration_frequency = BIN_SIZE*i;
 80a09e0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80a0b10 <loop+0x2dc>
      for (size_t i = BINS_TO_BE_CUT_OFF; i < fft_window_data_size/2 + 1; i++) {
 80a09e4:	3601      	adds	r6, #1
 80a09e6:	2e41      	cmp	r6, #65	; 0x41
 80a09e8:	d1c7      	bne.n	80a097a <loop+0x146>
            respiration_frequency = BIN_SIZE*i;
          }
        }
      }

      respiration_rate_per_minute = respiration_frequency*60;
 80a09ea:	2200      	movs	r2, #0
 80a09ec:	4b49      	ldr	r3, [pc, #292]	; (80a0b14 <loop+0x2e0>)
 80a09ee:	4650      	mov	r0, sl
 80a09f0:	4659      	mov	r1, fp
 80a09f2:	f004 f94b 	bl	80a4c8c <__aeabi_dmul>
 80a09f6:	4c48      	ldr	r4, [pc, #288]	; (80a0b18 <loop+0x2e4>)
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
 80a09f8:	2300      	movs	r3, #0
 80a09fa:	2209      	movs	r2, #9
 80a09fc:	e9c4 0100 	strd	r0, r1, [r4]
 80a0a00:	4621      	mov	r1, r4
 80a0a02:	4846      	ldr	r0, [pc, #280]	; (80a0b1c <loop+0x2e8>)
 80a0a04:	f000 fdd0 	bl	80a15a8 <spark_variable>

      Particle.variable("respiration rate", respiration_rate_per_minute);
            
      Serial.print("respiration ");
 80a0a08:	f002 f9ce 	bl	80a2da8 <_Z16_fetch_usbserialv>
 80a0a0c:	4944      	ldr	r1, [pc, #272]	; (80a0b20 <loop+0x2ec>)
 80a0a0e:	f001 fad5 	bl	80a1fbc <_ZN5Print5printEPKc>
      Serial.println(respiration_rate_per_minute, 4);
 80a0a12:	f002 f9c9 	bl	80a2da8 <_Z16_fetch_usbserialv>
 80a0a16:	2304      	movs	r3, #4
      : _M_current(__i) { }
 80a0a18:	4d3a      	ldr	r5, [pc, #232]	; (80a0b04 <loop+0x2d0>)
 80a0a1a:	9300      	str	r3, [sp, #0]
 80a0a1c:	e9d4 2300 	ldrd	r2, r3, [r4]
 80a0a20:	f001 fbbe 	bl	80a21a0 <_ZN5Print7printlnEdi>
 80a0a24:	682b      	ldr	r3, [r5, #0]
 80a0a26:	686a      	ldr	r2, [r5, #4]
      { return __normal_iterator(_M_current + __n); }
 80a0a28:	f503 74a0 	add.w	r4, r3, #320	; 0x140
	  if (__last != end())
 80a0a2c:	4294      	cmp	r4, r2
 80a0a2e:	d005      	beq.n	80a0a3c <loop+0x208>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80a0a30:	4618      	mov	r0, r3
 80a0a32:	4621      	mov	r1, r4
 80a0a34:	1b12      	subs	r2, r2, r4
 80a0a36:	f004 fc39 	bl	80a52ac <memmove>
 80a0a3a:	4603      	mov	r3, r0
      : _M_current(__i) { }
 80a0a3c:	686a      	ldr	r2, [r5, #4]

      // Re-assign the time-domain data after the FFT and remove the earliest data for the overlap.
      fft_window_data_copy.erase(fft_window_data_copy.begin(), fft_window_data_copy.begin() + fft_overlap_window_data_size);
      fft_window_data_real = fft_window_data_copy;
 80a0a3e:	4931      	ldr	r1, [pc, #196]	; (80a0b04 <loop+0x2d0>)
    { return __lhs.base() - __rhs.base(); }
 80a0a40:	1b14      	subs	r4, r2, r4
	  _M_erase_at_end(__first.base() + (end() - __last));
 80a0a42:	4423      	add	r3, r4
      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 80a0a44:	429a      	cmp	r2, r3
 80a0a46:	482d      	ldr	r0, [pc, #180]	; (80a0afc <loop+0x2c8>)
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    this->_M_impl._M_finish = __pos;
 80a0a48:	bf18      	it	ne
 80a0a4a:	606b      	strne	r3, [r5, #4]
 80a0a4c:	f7ff feae 	bl	80a07ac <_ZNSt6vectorIdSaIdEEaSERKS1_.isra.0>
    }
  }
 80a0a50:	e002      	b.n	80a0a58 <loop+0x224>
  if (samples_buffer != NULL) {
 80a0a52:	2c00      	cmp	r4, #0
 80a0a54:	f47f af08 	bne.w	80a0868 <loop+0x34>
 80a0a58:	b00d      	add	sp, #52	; 0x34
 80a0a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  _M_realloc_insert(end(), __x);
 80a0a5e:	4628      	mov	r0, r5
 80a0a60:	aa06      	add	r2, sp, #24
 80a0a62:	f7ff fe41 	bl	80a06e8 <_ZNSt6vectorIdSaIdEE17_M_realloc_insertIJRKdEEEvN9__gnu_cxx17__normal_iteratorIPdS1_EEDpOT_>
 80a0a66:	e74b      	b.n	80a0900 <loop+0xcc>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80a0a68:	6862      	ldr	r2, [r4, #4]
 80a0a6a:	1a12      	subs	r2, r2, r0
      else if (__n > size())
 80a0a6c:	f5b2 7f7e 	cmp.w	r2, #1016	; 0x3f8
 80a0a70:	d812      	bhi.n	80a0a98 <loop+0x264>
	*__first = __tmp;
 80a0a72:	2100      	movs	r1, #0
 80a0a74:	f004 fc34 	bl	80a52e0 <memset>
 80a0a78:	e9d4 2000 	ldrd	r2, r0, [r4]
 80a0a7c:	1a82      	subs	r2, r0, r2
 80a0a7e:	10d2      	asrs	r2, r2, #3
	       std::random_access_iterator_tag)
    {
#if __cplusplus >= 201103L
      static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
#endif
      if (__n <= 0)
 80a0a80:	f1d2 0280 	rsbs	r2, r2, #128	; 0x80
 80a0a84:	d006      	beq.n	80a0a94 <loop+0x260>
	return __first;

      __glibcxx_requires_can_increment(__first, __n);

      std::__fill_a(__first, __first + __n, __value);
 80a0a86:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
	*__first = __tmp;
 80a0a8a:	2100      	movs	r1, #0
 80a0a8c:	00d2      	lsls	r2, r2, #3
 80a0a8e:	f004 fc27 	bl	80a52e0 <memset>
 80a0a92:	4630      	mov	r0, r6
	  this->_M_impl._M_finish =
 80a0a94:	6060      	str	r0, [r4, #4]
 80a0a96:	e75f      	b.n	80a0958 <loop+0x124>
 80a0a98:	4632      	mov	r2, r6
 80a0a9a:	2100      	movs	r1, #0
      std::__fill_a(__first, __first + __n, __value);
 80a0a9c:	f500 6780 	add.w	r7, r0, #1024	; 0x400
	*__first = __tmp;
 80a0aa0:	f004 fc1e 	bl	80a52e0 <memset>
	if (size_type __n = this->_M_impl._M_finish - __pos)
 80a0aa4:	6863      	ldr	r3, [r4, #4]
 80a0aa6:	42bb      	cmp	r3, r7
	    this->_M_impl._M_finish = __pos;
 80a0aa8:	bf18      	it	ne
 80a0aaa:	6067      	strne	r7, [r4, #4]
 80a0aac:	e754      	b.n	80a0958 <loop+0x124>
          if (current_value_of_single_sided_spectrum > largest_peak) {
 80a0aae:	e9d7 8900 	ldrd	r8, r9, [r7]
 80a0ab2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a0ab6:	4640      	mov	r0, r8
 80a0ab8:	4649      	mov	r1, r9
 80a0aba:	f004 fb77 	bl	80a51ac <__aeabi_dcmpgt>
 80a0abe:	2800      	cmp	r0, #0
 80a0ac0:	d090      	beq.n	80a09e4 <loop+0x1b0>
            respiration_frequency = BIN_SIZE*i;
 80a0ac2:	4630      	mov	r0, r6
 80a0ac4:	f004 f868 	bl	80a4b98 <__aeabi_ui2d>
 80a0ac8:	2200      	movs	r2, #0
 80a0aca:	4b16      	ldr	r3, [pc, #88]	; (80a0b24 <loop+0x2f0>)
 80a0acc:	f004 f8de 	bl	80a4c8c <__aeabi_dmul>
            largest_peak = current_value_of_single_sided_spectrum;
 80a0ad0:	e9cd 8902 	strd	r8, r9, [sp, #8]
            respiration_frequency = BIN_SIZE*i;
 80a0ad4:	4682      	mov	sl, r0
 80a0ad6:	468b      	mov	fp, r1
 80a0ad8:	e784      	b.n	80a09e4 <loop+0x1b0>
 80a0ada:	bf00      	nop
 80a0adc:	10000010 	.word	0x10000010
 80a0ae0:	40026410 	.word	0x40026410
 80a0ae4:	200010f8 	.word	0x200010f8
 80a0ae8:	10000020 	.word	0x10000020
 80a0aec:	200018f6 	.word	0x200018f6
 80a0af0:	20000000 	.word	0x20000000
 80a0af4:	3fe00000 	.word	0x3fe00000
 80a0af8:	080a55e5 	.word	0x080a55e5
 80a0afc:	200010c8 	.word	0x200010c8
 80a0b00:	200010bc 	.word	0x200010bc
 80a0b04:	200010b0 	.word	0x200010b0
 80a0b08:	200010a8 	.word	0x200010a8
 80a0b0c:	080a55f7 	.word	0x080a55f7
 80a0b10:	3fb00000 	.word	0x3fb00000
 80a0b14:	404e0000 	.word	0x404e0000
 80a0b18:	20001018 	.word	0x20001018
 80a0b1c:	080a5613 	.word	0x080a5613
 80a0b20:	080a5624 	.word	0x080a5624
 80a0b24:	3fa00000 	.word	0x3fa00000

080a0b28 <_GLOBAL__sub_I_FILTER_COEFFS>:
	: _M_start(), _M_finish(), _M_end_of_storage()
 80a0b28:	2300      	movs	r3, #0
 80a0b2a:	4a23      	ldr	r2, [pc, #140]	; (80a0bb8 <_GLOBAL__sub_I_FILTER_COEFFS+0x90>)
 80a0b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0b2e:	e9c2 3300 	strd	r3, r3, [r2]
 80a0b32:	6093      	str	r3, [r2, #8]
 80a0b34:	4a21      	ldr	r2, [pc, #132]	; (80a0bbc <_GLOBAL__sub_I_FILTER_COEFFS+0x94>)
 80a0b36:	b089      	sub	sp, #36	; 0x24
 80a0b38:	e9c2 3300 	strd	r3, r3, [r2]
 80a0b3c:	6093      	str	r3, [r2, #8]
 80a0b3e:	4a20      	ldr	r2, [pc, #128]	; (80a0bc0 <_GLOBAL__sub_I_FILTER_COEFFS+0x98>)
ADCDMA_config adcDMA(SAMPLE_PIN, samples, SAMPLE_BUF_SIZE);
 80a0b40:	210a      	movs	r1, #10
 80a0b42:	e9c2 3300 	strd	r3, r3, [r2]
 80a0b46:	6093      	str	r3, [r2, #8]
 80a0b48:	481e      	ldr	r0, [pc, #120]	; (80a0bc4 <_GLOBAL__sub_I_FILTER_COEFFS+0x9c>)
 80a0b4a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80a0b4e:	4a1e      	ldr	r2, [pc, #120]	; (80a0bc8 <_GLOBAL__sub_I_FILTER_COEFFS+0xa0>)
 80a0b50:	f000 f852 	bl	80a0bf8 <_ZN13ADCDMA_configC1EiPtj>
Timer peltier_timer((default_period/4), switch_peltiers);
 80a0b54:	4b1d      	ldr	r3, [pc, #116]	; (80a0bcc <_GLOBAL__sub_I_FILTER_COEFFS+0xa4>)
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
 80a0b56:	4a1e      	ldr	r2, [pc, #120]	; (80a0bd0 <_GLOBAL__sub_I_FILTER_COEFFS+0xa8>)
 80a0b58:	681d      	ldr	r5, [r3, #0]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 80a0b5a:	4b1e      	ldr	r3, [pc, #120]	; (80a0bd4 <_GLOBAL__sub_I_FILTER_COEFFS+0xac>)
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0b5c:	ac04      	add	r4, sp, #16
 80a0b5e:	9304      	str	r3, [sp, #16]
 80a0b60:	4b1d      	ldr	r3, [pc, #116]	; (80a0bd8 <_GLOBAL__sub_I_FILTER_COEFFS+0xb0>)
 80a0b62:	af02      	add	r7, sp, #8
 80a0b64:	601a      	str	r2, [r3, #0]
 80a0b66:	2200      	movs	r2, #0
 80a0b68:	e894 0003 	ldmia.w	r4, {r0, r1}
 80a0b6c:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a0b70:	f103 060c 	add.w	r6, r3, #12
 80a0b74:	e896 0003 	ldmia.w	r6, {r0, r1}
 80a0b78:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a0b7c:	e897 0003 	ldmia.w	r7, {r0, r1}
 80a0b80:	e886 0003 	stmia.w	r6, {r0, r1}
 80a0b84:	4915      	ldr	r1, [pc, #84]	; (80a0bdc <_GLOBAL__sub_I_FILTER_COEFFS+0xb4>)
 80a0b86:	2d00      	cmp	r5, #0
 80a0b88:	6159      	str	r1, [r3, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a0b8a:	6999      	ldr	r1, [r3, #24]
 80a0b8c:	bfb8      	it	lt
 80a0b8e:	3503      	addlt	r5, #3
 80a0b90:	9107      	str	r1, [sp, #28]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0b92:	4913      	ldr	r1, [pc, #76]	; (80a0be0 <_GLOBAL__sub_I_FILTER_COEFFS+0xb8>)
 80a0b94:	711a      	strb	r2, [r3, #4]
 80a0b96:	609a      	str	r2, [r3, #8]
 80a0b98:	6199      	str	r1, [r3, #24]
      __a = _GLIBCXX_MOVE(__b);
 80a0b9a:	9206      	str	r2, [sp, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
 80a0b9c:	e9cd 2200 	strd	r2, r2, [sp]
 80a0ba0:	10a9      	asrs	r1, r5, #2
 80a0ba2:	4a10      	ldr	r2, [pc, #64]	; (80a0be4 <_GLOBAL__sub_I_FILTER_COEFFS+0xbc>)
 80a0ba4:	f103 0008 	add.w	r0, r3, #8
 80a0ba8:	f000 fb20 	bl	80a11ec <os_timer_create>
    class function<_Res(_ArgTypes...)>
 80a0bac:	4620      	mov	r0, r4
 80a0bae:	f7ff fcf5 	bl	80a059c <_ZNSt14_Function_baseD1Ev>
 80a0bb2:	b009      	add	sp, #36	; 0x24
 80a0bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0bb6:	bf00      	nop
 80a0bb8:	200010c8 	.word	0x200010c8
 80a0bbc:	200010bc 	.word	0x200010bc
 80a0bc0:	200010b0 	.word	0x200010b0
 80a0bc4:	20001090 	.word	0x20001090
 80a0bc8:	200010f8 	.word	0x200010f8
 80a0bcc:	20001008 	.word	0x20001008
 80a0bd0:	080a563c 	.word	0x080a563c
 80a0bd4:	080a0425 	.word	0x080a0425
 80a0bd8:	200010dc 	.word	0x200010dc
 80a0bdc:	080a0537 	.word	0x080a0537
 80a0be0:	080a054b 	.word	0x080a054b
 80a0be4:	080a04fd 	.word	0x080a04fd

080a0be8 <_ZN13ADCDMA_configD1Ev>:
ADCDMA_config::ADCDMA_config(int pin, uint16_t *buf, size_t bufSize) : pin(pin), buf(buf), bufSize(bufSize) {
}

//Class deconstrctor. Not used in this case.
ADCDMA_config::~ADCDMA_config() {
}
 80a0be8:	4770      	bx	lr

080a0bea <_ZN13ADCDMA_configD0Ev>:
ADCDMA_config::~ADCDMA_config() {
 80a0bea:	b510      	push	{r4, lr}
 80a0bec:	4604      	mov	r4, r0
}
 80a0bee:	2110      	movs	r1, #16
 80a0bf0:	f7ff fa57 	bl	80a00a2 <_ZdlPvj>
 80a0bf4:	4620      	mov	r0, r4
 80a0bf6:	bd10      	pop	{r4, pc}

080a0bf8 <_ZN13ADCDMA_configC1EiPtj>:
ADCDMA_config::ADCDMA_config(int pin, uint16_t *buf, size_t bufSize) : pin(pin), buf(buf), bufSize(bufSize) {
 80a0bf8:	b530      	push	{r4, r5, lr}
 80a0bfa:	4d03      	ldr	r5, [pc, #12]	; (80a0c08 <_ZN13ADCDMA_configC1EiPtj+0x10>)
 80a0bfc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80a0c00:	e9c0 5100 	strd	r5, r1, [r0]
}
 80a0c04:	bd30      	pop	{r4, r5, pc}
 80a0c06:	bf00      	nop
 80a0c08:	080a5650 	.word	0x080a5650

080a0c0c <_ZN13ADCDMA_config5startEj>:

void ADCDMA_config::start(size_t freqHZ) {
 80a0c0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a0c10:	4606      	mov	r6, r0
 80a0c12:	b09f      	sub	sp, #124	; 0x7c
 80a0c14:	460f      	mov	r7, r1
    // Using Dual ADC Regular Simultaneous DMA Mode 1

    // Using Timer3. To change timers, make sure you edit all of:
    // RCC_APB1Periph_TIM3, TIM3, ADC_ExternalTrigConv_T3_TRGO

    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);
 80a0c16:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80a0c1a:	2101      	movs	r1, #1
 80a0c1c:	f7ff fb80 	bl	80a0320 <RCC_AHB1PeriphClockCmd>
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
 80a0c20:	2101      	movs	r1, #1
 80a0c22:	f44f 7080 	mov.w	r0, #256	; 0x100
 80a0c26:	f7ff fb93 	bl	80a0350 <RCC_APB2PeriphClockCmd>
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC2, ENABLE);
 80a0c2a:	2101      	movs	r1, #1
 80a0c2c:	f44f 7000 	mov.w	r0, #512	; 0x200
 80a0c30:	f7ff fb8e 	bl	80a0350 <RCC_APB2PeriphClockCmd>
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 80a0c34:	2101      	movs	r1, #1
 80a0c36:	2002      	movs	r0, #2
 80a0c38:	f7ff fb7e 	bl	80a0338 <RCC_APB1PeriphClockCmd>

    // Set the pin as analog input
    // GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
    // GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    HAL_Pin_Mode(pin, AN_INPUT);
 80a0c3c:	2106      	movs	r1, #6
 80a0c3e:	88b0      	ldrh	r0, [r6, #4]

    // Enable the DMA Stream IRQ Channel
    NVIC_InitTypeDef NVIC_InitStructure;
    NVIC_InitStructure.NVIC_IRQChannel = DMA2_Stream0_IRQn;
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80a0c40:	2400      	movs	r4, #0
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80a0c42:	2501      	movs	r5, #1
    HAL_Pin_Mode(pin, AN_INPUT);
 80a0c44:	f000 fb2a 	bl	80a129c <HAL_Pin_Mode>
    NVIC_InitStructure.NVIC_IRQChannel = DMA2_Stream0_IRQn;
 80a0c48:	2338      	movs	r3, #56	; 0x38
    NVIC_Init(&NVIC_InitStructure);
 80a0c4a:	a801      	add	r0, sp, #4
    NVIC_InitStructure.NVIC_IRQChannel = DMA2_Stream0_IRQn;
 80a0c4c:	f88d 3004 	strb.w	r3, [sp, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80a0c50:	f88d 4005 	strb.w	r4, [sp, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 80a0c54:	f88d 4006 	strb.w	r4, [sp, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80a0c58:	f88d 5007 	strb.w	r5, [sp, #7]
    NVIC_Init(&NVIC_InitStructure);
 80a0c5c:	f7ff fa2c 	bl	80a00b8 <NVIC_Init>

    // 60000000UL = 60 MHz Timer Clock = HCLK / 2
    // Even low audio rates like 8000 Hz will fit in a 16-bit counter with no prescaler (period = 7500)
    TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
    TIM_TimeBaseStructInit(&TIM_TimeBaseStructure);
 80a0c60:	a802      	add	r0, sp, #8
 80a0c62:	f7ff fbbf 	bl	80a03e4 <TIM_TimeBaseStructInit>
    TIM_TimeBaseStructure.TIM_Period = (60000000UL / freqHZ) - 1;
 80a0c66:	4945      	ldr	r1, [pc, #276]	; (80a0d7c <_ZN13ADCDMA_config5startEj+0x170>)
    TIM_TimeBaseStructure.TIM_Prescaler = 0;
    TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 80a0c68:	f8ad 4010 	strh.w	r4, [sp, #16]
    TIM_TimeBaseStructure.TIM_Period = (60000000UL / freqHZ) - 1;
 80a0c6c:	fbb1 f1f7 	udiv	r1, r1, r7
    TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
    TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
 80a0c70:	4f43      	ldr	r7, [pc, #268]	; (80a0d80 <_ZN13ADCDMA_config5startEj+0x174>)
    TIM_TimeBaseStructure.TIM_Period = (60000000UL / freqHZ) - 1;
 80a0c72:	3901      	subs	r1, #1
    TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
 80a0c74:	4638      	mov	r0, r7
    TIM_TimeBaseStructure.TIM_Period = (60000000UL / freqHZ) - 1;
 80a0c76:	9103      	str	r1, [sp, #12]
    TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
 80a0c78:	a902      	add	r1, sp, #8
    TIM_TimeBaseStructure.TIM_Prescaler = 0;
 80a0c7a:	9402      	str	r4, [sp, #8]
    TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
 80a0c7c:	f7ff fb74 	bl	80a0368 <TIM_TimeBaseInit>
    TIM_SelectOutputTrigger(TIM3, TIM_TRGOSource_Update); // ADC_ExternalTrigConv_T3_TRGO
 80a0c80:	4638      	mov	r0, r7
 80a0c82:	2120      	movs	r1, #32
 80a0c84:	f7ff fbc3 	bl	80a040e <TIM_SelectOutputTrigger>
    TIM_Cmd(TIM3, ENABLE);
 80a0c88:	4629      	mov	r1, r5
 80a0c8a:	4638      	mov	r0, r7
 80a0c8c:	f7ff fbb3 	bl	80a03f6 <TIM_Cmd>
    ADC_InitTypeDef ADC_InitStructure;
    DMA_InitTypeDef DMA_InitStructure;

    // DMA2 Stream0 channel0 configuration
    DMA_InitStructure.DMA_Channel = DMA_Channel_0;
    DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)buf;
 80a0c90:	68b3      	ldr	r3, [r6, #8]
    DMA_InitStructure.DMA_PeripheralBaseAddr =  0x40012308; // CDR_ADDRESS; Packed ADC1, ADC2;
    DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
    DMA_InitStructure.DMA_BufferSize = bufSize;
    DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
    DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
    DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 80a0c92:	f44f 6700 	mov.w	r7, #2048	; 0x800
    DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)buf;
 80a0c96:	9311      	str	r3, [sp, #68]	; 0x44
    DMA_InitStructure.DMA_PeripheralBaseAddr =  0x40012308; // CDR_ADDRESS; Packed ADC1, ADC2;
 80a0c98:	4b3a      	ldr	r3, [pc, #232]	; (80a0d84 <_ZN13ADCDMA_config5startEj+0x178>)
    DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
    DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 80a0c9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    DMA_InitStructure.DMA_PeripheralBaseAddr =  0x40012308; // CDR_ADDRESS; Packed ADC1, ADC2;
 80a0c9e:	9310      	str	r3, [sp, #64]	; 0x40
    DMA_InitStructure.DMA_BufferSize = bufSize;
 80a0ca0:	68f3      	ldr	r3, [r6, #12]
    DMA_InitStructure.DMA_Priority = DMA_Priority_High;
    DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
 80a0ca2:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 80a0ca6:	e9cd 3413 	strd	r3, r4, [sp, #76]	; 0x4c
    DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 80a0caa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80a0cae:	e9cd 3715 	strd	r3, r7, [sp, #84]	; 0x54
    DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 80a0cb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80a0cb6:	e9cd 2317 	strd	r2, r3, [sp, #92]	; 0x5c
    DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
 80a0cba:	2304      	movs	r3, #4
    DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull;
    DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
    DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
    DMA_Init(DMA2_Stream0, &DMA_InitStructure);
 80a0cbc:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 80a0d88 <_ZN13ADCDMA_config5startEj+0x17c>
    DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
 80a0cc0:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    DMA_Init(DMA2_Stream0, &DMA_InitStructure);
 80a0cc4:	4640      	mov	r0, r8
 80a0cc6:	a90f      	add	r1, sp, #60	; 0x3c
    DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 80a0cc8:	e9cd 541b 	strd	r5, r4, [sp, #108]	; 0x6c
    DMA_InitStructure.DMA_Channel = DMA_Channel_0;
 80a0ccc:	940f      	str	r4, [sp, #60]	; 0x3c
    DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
 80a0cce:	9412      	str	r4, [sp, #72]	; 0x48
    DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 80a0cd0:	941d      	str	r4, [sp, #116]	; 0x74
    DMA_Init(DMA2_Stream0, &DMA_InitStructure);
 80a0cd2:	f7ff fabd 	bl	80a0250 <DMA_Init>
    // Since we want to write out of loop anyway, there's no real advantage to using the interrupt, and as
    // far as I can tell, you can't set the interrupt handler for DMA2_Stream0 without modifying
    // system firmware because there's no built-in handler for it.
    // DMA_ITConfig(DMA2_Stream0, DMA_IT_TC | DMA_IT_HT, ENABLE);

    DMA_Cmd(DMA2_Stream0, ENABLE);
 80a0cd6:	4629      	mov	r1, r5
 80a0cd8:	4640      	mov	r0, r8
 80a0cda:	f7ff fae3 	bl	80a02a4 <DMA_Cmd>

    // ADC Common Init
    ADC_CommonInitStructure.ADC_Mode = ADC_DualMode_RegSimult;
 80a0cde:	2306      	movs	r3, #6
    ADC_CommonInitStructure.ADC_Prescaler = ADC_Prescaler_Div2;
 80a0ce0:	e9cd 3405 	strd	r3, r4, [sp, #20]
    ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_1;
 80a0ce4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    ADC_CommonInitStructure.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
    ADC_CommonInit(&ADC_CommonInitStructure);
 80a0ce8:	a805      	add	r0, sp, #20
    ADC_CommonInitStructure.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 80a0cea:	e9cd 3407 	strd	r3, r4, [sp, #28]
    ADC_CommonInit(&ADC_CommonInitStructure);
 80a0cee:	f7ff fa3f 	bl	80a0170 <ADC_CommonInit>
    // ADC1 configuration
    ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
    ADC_InitStructure.ADC_ScanConvMode = DISABLE;
    ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
    ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_Rising;
    ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T3_TRGO;
 80a0cf2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a0cf6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Left;
 80a0cfa:	970d      	str	r7, [sp, #52]	; 0x34
    ADC_InitStructure.ADC_NbrOfConversion = 1;
    ADC_Init(ADC1, &ADC_InitStructure);
 80a0cfc:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80a0d00:	f507 378c 	add.w	r7, r7, #71680	; 0x11800

    // ADC2 configuration - same
    ADC_Init(ADC2, &ADC_InitStructure);
 80a0d04:	f5a8 38a1 	sub.w	r8, r8, #82432	; 0x14200
    ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T3_TRGO;
 80a0d08:	e9cd 030b 	strd	r0, r3, [sp, #44]	; 0x2c
    ADC_Init(ADC2, &ADC_InitStructure);
 80a0d0c:	f5a8 7888 	sub.w	r8, r8, #272	; 0x110
    ADC_Init(ADC1, &ADC_InitStructure);
 80a0d10:	4638      	mov	r0, r7
 80a0d12:	a909      	add	r1, sp, #36	; 0x24
    ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 80a0d14:	9409      	str	r4, [sp, #36]	; 0x24
    ADC_InitStructure.ADC_ScanConvMode = DISABLE;
 80a0d16:	f8ad 4028 	strh.w	r4, [sp, #40]	; 0x28
    ADC_InitStructure.ADC_NbrOfConversion = 1;
 80a0d1a:	f88d 5038 	strb.w	r5, [sp, #56]	; 0x38
    ADC_Init(ADC1, &ADC_InitStructure);
 80a0d1e:	f7ff fa01 	bl	80a0124 <ADC_Init>
    ADC_Init(ADC2, &ADC_InitStructure);
 80a0d22:	a909      	add	r1, sp, #36	; 0x24
 80a0d24:	4640      	mov	r0, r8
 80a0d26:	f7ff f9fd 	bl	80a0124 <ADC_Init>

    //
    Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0d2a:	f000 faa7 	bl	80a127c <HAL_Pin_Map>
    ADC_RegularChannelConfig(ADC1, PIN_MAP[pin].adc_channel, 1, ADC_SampleTime_15Cycles);
 80a0d2e:	f04f 091c 	mov.w	r9, #28
    Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0d32:	4604      	mov	r4, r0
    ADC_RegularChannelConfig(ADC1, PIN_MAP[pin].adc_channel, 1, ADC_SampleTime_15Cycles);
 80a0d34:	6873      	ldr	r3, [r6, #4]
 80a0d36:	462a      	mov	r2, r5
 80a0d38:	fb09 0103 	mla	r1, r9, r3, r0
 80a0d3c:	462b      	mov	r3, r5
 80a0d3e:	4638      	mov	r0, r7
 80a0d40:	79c9      	ldrb	r1, [r1, #7]
 80a0d42:	f7ff fa32 	bl	80a01aa <ADC_RegularChannelConfig>
    ADC_RegularChannelConfig(ADC2, PIN_MAP[pin].adc_channel, 1, ADC_SampleTime_15Cycles);
 80a0d46:	6870      	ldr	r0, [r6, #4]
 80a0d48:	462b      	mov	r3, r5
 80a0d4a:	fb09 4400 	mla	r4, r9, r0, r4
 80a0d4e:	462a      	mov	r2, r5
 80a0d50:	79e1      	ldrb	r1, [r4, #7]
 80a0d52:	4640      	mov	r0, r8
 80a0d54:	f7ff fa29 	bl	80a01aa <ADC_RegularChannelConfig>
    // Serial.printlnf("using pin %d ADC channel %u", pin, PIN_MAP[pin].adc_channel);

    // Enable DMA request after last transfer (Multi-ADC mode)
    ADC_MultiModeDMARequestAfterLastTransferCmd(ENABLE);
 80a0d58:	4628      	mov	r0, r5
 80a0d5a:	f7ff fa6d 	bl	80a0238 <ADC_MultiModeDMARequestAfterLastTransferCmd>

    // Enable ADCs
    ADC_Cmd(ADC1, ENABLE);
 80a0d5e:	4629      	mov	r1, r5
 80a0d60:	4638      	mov	r0, r7
 80a0d62:	f7ff fa19 	bl	80a0198 <ADC_Cmd>
    ADC_Cmd(ADC2, ENABLE);
 80a0d66:	4629      	mov	r1, r5
 80a0d68:	4640      	mov	r0, r8
 80a0d6a:	f7ff fa15 	bl	80a0198 <ADC_Cmd>

    ADC_SoftwareStartConv(ADC1);
 80a0d6e:	4638      	mov	r0, r7
 80a0d70:	f7ff fa5d 	bl	80a022e <ADC_SoftwareStartConv>
}
 80a0d74:	b01f      	add	sp, #124	; 0x7c
 80a0d76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a0d7a:	bf00      	nop
 80a0d7c:	03938700 	.word	0x03938700
 80a0d80:	40000400 	.word	0x40000400
 80a0d84:	40012308 	.word	0x40012308
 80a0d88:	40026410 	.word	0x40026410

080a0d8c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a0d8c:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a0d8e:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 80a0d90:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 80a0d92:	b17c      	cbz	r4, 80a0db4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 80a0d94:	6863      	ldr	r3, [r4, #4]
 80a0d96:	3b01      	subs	r3, #1
 80a0d98:	6063      	str	r3, [r4, #4]
 80a0d9a:	b95b      	cbnz	r3, 80a0db4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 80a0d9c:	6823      	ldr	r3, [r4, #0]
 80a0d9e:	4620      	mov	r0, r4
 80a0da0:	689b      	ldr	r3, [r3, #8]
 80a0da2:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a0da4:	68a3      	ldr	r3, [r4, #8]
 80a0da6:	3b01      	subs	r3, #1
 80a0da8:	60a3      	str	r3, [r4, #8]
 80a0daa:	b91b      	cbnz	r3, 80a0db4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a0dac:	6823      	ldr	r3, [r4, #0]
 80a0dae:	4620      	mov	r0, r4
 80a0db0:	68db      	ldr	r3, [r3, #12]
 80a0db2:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 80a0db4:	4628      	mov	r0, r5
 80a0db6:	bd38      	pop	{r3, r4, r5, pc}

080a0db8 <_ZNSt12_Vector_baseIdSaIdEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 80a0db8:	b538      	push	{r3, r4, r5, lr}
 80a0dba:	4604      	mov	r4, r0
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80a0dbc:	1e08      	subs	r0, r1, #0
 80a0dbe:	ea4f 05c0 	mov.w	r5, r0, lsl #3
 80a0dc2:	d007      	beq.n	80a0dd4 <_ZNSt12_Vector_baseIdSaIdEE17_M_create_storageEj+0x1c>
	if (__n > this->_M_max_size())
 80a0dc4:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 80a0dc8:	d301      	bcc.n	80a0dce <_ZNSt12_Vector_baseIdSaIdEE17_M_create_storageEj+0x16>
	  std::__throw_bad_alloc();
 80a0dca:	f002 fa9d 	bl	80a3308 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a0dce:	4628      	mov	r0, r5
 80a0dd0:	f7ff f963 	bl	80a009a <_Znwj>
	this->_M_impl._M_finish = this->_M_impl._M_start;
 80a0dd4:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80a0dd8:	4428      	add	r0, r5
 80a0dda:	60a0      	str	r0, [r4, #8]
      }
 80a0ddc:	bd38      	pop	{r3, r4, r5, pc}
	...

080a0de0 <_ZNSt6vectorIdSaIdEEC1EjRKS0_>:
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 80a0de0:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
      vector(size_type __n, const allocator_type& __a = allocator_type())
 80a0de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0de6:	4604      	mov	r4, r0
 80a0de8:	460d      	mov	r5, r1
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 80a0dea:	d302      	bcc.n	80a0df2 <_ZNSt6vectorIdSaIdEEC1EjRKS0_+0x12>
	  __throw_length_error(
 80a0dec:	480a      	ldr	r0, [pc, #40]	; (80a0e18 <_ZNSt6vectorIdSaIdEEC1EjRKS0_+0x38>)
 80a0dee:	f002 fa8e 	bl	80a330e <_ZSt20__throw_length_errorPKc>
	: _M_start(), _M_finish(), _M_end_of_storage()
 80a0df2:	2600      	movs	r6, #0
 80a0df4:	e9c0 6600 	strd	r6, r6, [r0]
 80a0df8:	6086      	str	r6, [r0, #8]
      { _M_create_storage(__n); }
 80a0dfa:	f7ff ffdd 	bl	80a0db8 <_ZNSt12_Vector_baseIdSaIdEE17_M_create_storageEj>
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
 80a0dfe:	6820      	ldr	r0, [r4, #0]
      if (__n <= 0)
 80a0e00:	b135      	cbz	r5, 80a0e10 <_ZNSt6vectorIdSaIdEEC1EjRKS0_+0x30>
      std::__fill_a(__first, __first + __n, __value);
 80a0e02:	eb00 07c5 	add.w	r7, r0, r5, lsl #3
	*__first = __tmp;
 80a0e06:	4631      	mov	r1, r6
 80a0e08:	00ea      	lsls	r2, r5, #3
 80a0e0a:	f004 fa69 	bl	80a52e0 <memset>
 80a0e0e:	4638      	mov	r0, r7
	this->_M_impl._M_finish =
 80a0e10:	6060      	str	r0, [r4, #4]
      { _M_default_initialize(__n); }
 80a0e12:	4620      	mov	r0, r4
 80a0e14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a0e16:	bf00      	nop
 80a0e18:	080a5658 	.word	0x080a5658
 80a0e1c:	00000000 	.word	0x00000000

080a0e20 <_ZN3Fft15transformRadix2ERSt6vectorIdSaIdEES3_>:
void Fft::inverseTransform(vector<double> &real, vector<double> &imag) {
	transform(imag, real);
}


void Fft::transformRadix2(vector<double> &real, vector<double> &imag) {
 80a0e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0e24:	4691      	mov	r9, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80a0e26:	e9d1 2300 	ldrd	r2, r3, [r1]
 80a0e2a:	468b      	mov	fp, r1
 80a0e2c:	1a9a      	subs	r2, r3, r2
 80a0e2e:	e9d9 1300 	ldrd	r1, r3, [r9]
 80a0e32:	1a5b      	subs	r3, r3, r1
	// Compute levels = floor(log2(n))
	if (real.size() != imag.size())
 80a0e34:	429a      	cmp	r2, r3
void Fft::transformRadix2(vector<double> &real, vector<double> &imag) {
 80a0e36:	b09d      	sub	sp, #116	; 0x74
	if (real.size() != imag.size())
 80a0e38:	d00c      	beq.n	80a0e54 <_ZN3Fft15transformRadix2ERSt6vectorIdSaIdEES3_+0x34>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 80a0e3a:	4bad      	ldr	r3, [pc, #692]	; (80a10f0 <_ZN3Fft15transformRadix2ERSt6vectorIdSaIdEES3_+0x2d0>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a0e3c:	a819      	add	r0, sp, #100	; 0x64
 80a0e3e:	781b      	ldrb	r3, [r3, #0]
 80a0e40:	4aac      	ldr	r2, [pc, #688]	; (80a10f4 <_ZN3Fft15transformRadix2ERSt6vectorIdSaIdEES3_+0x2d4>)
 80a0e42:	f88d 3000 	strb.w	r3, [sp]
 80a0e46:	49ac      	ldr	r1, [pc, #688]	; (80a10f8 <_ZN3Fft15transformRadix2ERSt6vectorIdSaIdEES3_+0x2d8>)
 80a0e48:	233c      	movs	r3, #60	; 0x3c
 80a0e4a:	f000 fded 	bl	80a1a28 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0e4e:	a81a      	add	r0, sp, #104	; 0x68
 80a0e50:	f7ff ff9c 	bl	80a0d8c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0e54:	e9db 2300 	ldrd	r2, r3, [fp]
 80a0e58:	1a9b      	subs	r3, r3, r2
 80a0e5a:	ea4f 0ae3 	mov.w	sl, r3, asr #3
 80a0e5e:	4653      	mov	r3, sl
		Spark.publish("err","Mismatched lengths",60,PRIVATE);
	size_t n = real.size();
	unsigned int levels;
	{
		size_t temp = n;
		levels = 0;
 80a0e60:	2500      	movs	r5, #0
		while (temp > 1) {
 80a0e62:	2b01      	cmp	r3, #1
 80a0e64:	d902      	bls.n	80a0e6c <_ZN3Fft15transformRadix2ERSt6vectorIdSaIdEES3_+0x4c>
			levels++;
 80a0e66:	3501      	adds	r5, #1
			temp >>= 1;
 80a0e68:	085b      	lsrs	r3, r3, #1
		while (temp > 1) {
 80a0e6a:	e7fa      	b.n	80a0e62 <_ZN3Fft15transformRadix2ERSt6vectorIdSaIdEES3_+0x42>
		}
		if (1u << levels != n)
 80a0e6c:	2301      	movs	r3, #1
 80a0e6e:	40ab      	lsls	r3, r5
 80a0e70:	4553      	cmp	r3, sl
 80a0e72:	d00c      	beq.n	80a0e8e <_ZN3Fft15transformRadix2ERSt6vectorIdSaIdEES3_+0x6e>
 80a0e74:	4b9e      	ldr	r3, [pc, #632]	; (80a10f0 <_ZN3Fft15transformRadix2ERSt6vectorIdSaIdEES3_+0x2d0>)
 80a0e76:	a819      	add	r0, sp, #100	; 0x64
 80a0e78:	781b      	ldrb	r3, [r3, #0]
 80a0e7a:	4aa0      	ldr	r2, [pc, #640]	; (80a10fc <_ZN3Fft15transformRadix2ERSt6vectorIdSaIdEES3_+0x2dc>)
 80a0e7c:	f88d 3000 	strb.w	r3, [sp]
 80a0e80:	499d      	ldr	r1, [pc, #628]	; (80a10f8 <_ZN3Fft15transformRadix2ERSt6vectorIdSaIdEES3_+0x2d8>)
 80a0e82:	233c      	movs	r3, #60	; 0x3c
 80a0e84:	f000 fdd0 	bl	80a1a28 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a0e88:	a81a      	add	r0, sp, #104	; 0x68
 80a0e8a:	f7ff ff7f 	bl	80a0d8c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
			Spark.publish("err","Length is not a power of 2",60,PRIVATE);
	}
	
	// Trignometric tables
	vector<double> cosTable(n / 2);
 80a0e8e:	ea4f 085a 	mov.w	r8, sl, lsr #1
 80a0e92:	4641      	mov	r1, r8
 80a0e94:	aa19      	add	r2, sp, #100	; 0x64
 80a0e96:	a816      	add	r0, sp, #88	; 0x58
 80a0e98:	f7ff ffa2 	bl	80a0de0 <_ZNSt6vectorIdSaIdEEC1EjRKS0_>
	vector<double> sinTable(n / 2);
 80a0e9c:	4641      	mov	r1, r8
 80a0e9e:	aa15      	add	r2, sp, #84	; 0x54
 80a0ea0:	a819      	add	r0, sp, #100	; 0x64
 80a0ea2:	f7ff ff9d 	bl	80a0de0 <_ZNSt6vectorIdSaIdEEC1EjRKS0_>
	for (size_t i = 0; i < n / 2; i++) {
 80a0ea6:	2400      	movs	r4, #0
 80a0ea8:	45a0      	cmp	r8, r4
 80a0eaa:	d028      	beq.n	80a0efe <_ZN3Fft15transformRadix2ERSt6vectorIdSaIdEES3_+0xde>
		cosTable[i] = cos(2 * M_PI * i / n);
 80a0eac:	4620      	mov	r0, r4
 80a0eae:	f003 fe73 	bl	80a4b98 <__aeabi_ui2d>
 80a0eb2:	a38d      	add	r3, pc, #564	; (adr r3, 80a10e8 <_ZN3Fft15transformRadix2ERSt6vectorIdSaIdEES3_+0x2c8>)
 80a0eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0eb8:	f003 fee8 	bl	80a4c8c <__aeabi_dmul>
 80a0ebc:	4606      	mov	r6, r0
 80a0ebe:	4650      	mov	r0, sl
 80a0ec0:	460f      	mov	r7, r1
 80a0ec2:	f003 fe69 	bl	80a4b98 <__aeabi_ui2d>
 80a0ec6:	4602      	mov	r2, r0
 80a0ec8:	460b      	mov	r3, r1
 80a0eca:	4630      	mov	r0, r6
 80a0ecc:	4639      	mov	r1, r7
 80a0ece:	f004 f807 	bl	80a4ee0 <__aeabi_ddiv>
 80a0ed2:	4606      	mov	r6, r0
 80a0ed4:	460f      	mov	r7, r1
 80a0ed6:	f002 fb35 	bl	80a3544 <cos>
 80a0eda:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80a0edc:	00e2      	lsls	r2, r4, #3
 80a0ede:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80a0ee2:	e9c3 0100 	strd	r0, r1, [r3]
		sinTable[i] = sin(2 * M_PI * i / n);
 80a0ee6:	4630      	mov	r0, r6
 80a0ee8:	4639      	mov	r1, r7
 80a0eea:	9203      	str	r2, [sp, #12]
 80a0eec:	f002 fb7c 	bl	80a35e8 <sin>
 80a0ef0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80a0ef2:	9a03      	ldr	r2, [sp, #12]
	for (size_t i = 0; i < n / 2; i++) {
 80a0ef4:	3401      	adds	r4, #1
		sinTable[i] = sin(2 * M_PI * i / n);
 80a0ef6:	4413      	add	r3, r2
 80a0ef8:	e9c3 0100 	strd	r0, r1, [r3]
	for (size_t i = 0; i < n / 2; i++) {
 80a0efc:	e7d4      	b.n	80a0ea8 <_ZN3Fft15transformRadix2ERSt6vectorIdSaIdEES3_+0x88>
	}
	
	// Bit-reversed addressing permutation
	for (size_t i = 0; i < n; i++) {
 80a0efe:	2400      	movs	r4, #0
 80a0f00:	4554      	cmp	r4, sl
 80a0f02:	d033      	beq.n	80a0f6c <_ZN3Fft15transformRadix2ERSt6vectorIdSaIdEES3_+0x14c>


static size_t reverseBits(size_t x, unsigned int n) {
	size_t result = 0;
	unsigned int i;
	for (i = 0; i < n; i++, x >>= 1)
 80a0f04:	2300      	movs	r3, #0
 80a0f06:	4622      	mov	r2, r4
	size_t result = 0;
 80a0f08:	461e      	mov	r6, r3
	for (i = 0; i < n; i++, x >>= 1)
 80a0f0a:	429d      	cmp	r5, r3
 80a0f0c:	d006      	beq.n	80a0f1c <_ZN3Fft15transformRadix2ERSt6vectorIdSaIdEES3_+0xfc>
		result = (result << 1) | (x & 1);
 80a0f0e:	f002 0101 	and.w	r1, r2, #1
 80a0f12:	ea41 0646 	orr.w	r6, r1, r6, lsl #1
	for (i = 0; i < n; i++, x >>= 1)
 80a0f16:	3301      	adds	r3, #1
 80a0f18:	0852      	lsrs	r2, r2, #1
 80a0f1a:	e7f6      	b.n	80a0f0a <_ZN3Fft15transformRadix2ERSt6vectorIdSaIdEES3_+0xea>
		if (j > i) {
 80a0f1c:	42b4      	cmp	r4, r6
 80a0f1e:	d223      	bcs.n	80a0f68 <_ZN3Fft15transformRadix2ERSt6vectorIdSaIdEES3_+0x148>
	return *(this->_M_impl._M_start + __n);
 80a0f20:	f8db 3000 	ldr.w	r3, [fp]
 80a0f24:	eb03 07c4 	add.w	r7, r3, r4, lsl #3
			real[i] = real[j];
 80a0f28:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
			double temp = real[i];
 80a0f2c:	e9d7 0100 	ldrd	r0, r1, [r7]
			real[i] = real[j];
 80a0f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0f34:	e9c7 2300 	strd	r2, r3, [r7]
			real[j] = temp;
 80a0f38:	f8db 3000 	ldr.w	r3, [fp]
 80a0f3c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80a0f40:	e9c3 0100 	strd	r0, r1, [r3]
 80a0f44:	f8d9 1000 	ldr.w	r1, [r9]
 80a0f48:	eb01 07c4 	add.w	r7, r1, r4, lsl #3
			imag[i] = imag[j];
 80a0f4c:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80a0f50:	e9d1 0100 	ldrd	r0, r1, [r1]
			temp = imag[i];
 80a0f54:	e9d7 2300 	ldrd	r2, r3, [r7]
			imag[i] = imag[j];
 80a0f58:	e9c7 0100 	strd	r0, r1, [r7]
			imag[j] = temp;
 80a0f5c:	f8d9 1000 	ldr.w	r1, [r9]
 80a0f60:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80a0f64:	e9c1 2300 	strd	r2, r3, [r1]
	for (size_t i = 0; i < n; i++) {
 80a0f68:	3401      	adds	r4, #1
 80a0f6a:	e7c9      	b.n	80a0f00 <_ZN3Fft15transformRadix2ERSt6vectorIdSaIdEES3_+0xe0>
	for (size_t size = 2; size <= n; size *= 2) {
 80a0f6c:	2602      	movs	r6, #2
 80a0f6e:	4556      	cmp	r6, sl
 80a0f70:	f200 80ae 	bhi.w	80a10d0 <_ZN3Fft15transformRadix2ERSt6vectorIdSaIdEES3_+0x2b0>
		size_t halfsize = size / 2;
 80a0f74:	0873      	lsrs	r3, r6, #1
 80a0f76:	9310      	str	r3, [sp, #64]	; 0x40
		size_t tablestep = n / size;
 80a0f78:	fbba f3f6 	udiv	r3, sl, r6
		for (size_t i = 0; i < n; i += size) {
 80a0f7c:	2500      	movs	r5, #0
 80a0f7e:	00db      	lsls	r3, r3, #3
 80a0f80:	9312      	str	r3, [sp, #72]	; 0x48
 80a0f82:	00b3      	lsls	r3, r6, #2
 80a0f84:	9311      	str	r3, [sp, #68]	; 0x44
 80a0f86:	4555      	cmp	r5, sl
 80a0f88:	f080 809e 	bcs.w	80a10c8 <_ZN3Fft15transformRadix2ERSt6vectorIdSaIdEES3_+0x2a8>
 80a0f8c:	2300      	movs	r3, #0
 80a0f8e:	9305      	str	r3, [sp, #20]
			for (size_t j = i, k = 0; j < i + halfsize; j++, k += tablestep) {
 80a0f90:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80a0f92:	9503      	str	r5, [sp, #12]
 80a0f94:	18eb      	adds	r3, r5, r3
 80a0f96:	9313      	str	r3, [sp, #76]	; 0x4c
 80a0f98:	9b03      	ldr	r3, [sp, #12]
 80a0f9a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80a0f9c:	4293      	cmp	r3, r2
 80a0f9e:	f080 8091 	bcs.w	80a10c4 <_ZN3Fft15transformRadix2ERSt6vectorIdSaIdEES3_+0x2a4>
 80a0fa2:	f8db 3000 	ldr.w	r3, [fp]
 80a0fa6:	9a03      	ldr	r2, [sp, #12]
 80a0fa8:	930c      	str	r3, [sp, #48]	; 0x30
 80a0faa:	9b03      	ldr	r3, [sp, #12]
 80a0fac:	00dc      	lsls	r4, r3, #3
 80a0fae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80a0fb0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80a0fb4:	9304      	str	r3, [sp, #16]
 80a0fb6:	9a04      	ldr	r2, [sp, #16]
 80a0fb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a0fba:	4413      	add	r3, r2
 80a0fbc:	930d      	str	r3, [sp, #52]	; 0x34
				double tpre =  real[j+halfsize] * cosTable[k] + imag[j+halfsize] * sinTable[k];
 80a0fbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a0fc0:	f853 8002 	ldr.w	r8, [r3, r2]
 80a0fc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80a0fc6:	9a05      	ldr	r2, [sp, #20]
 80a0fc8:	685f      	ldr	r7, [r3, #4]
 80a0fca:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80a0fcc:	4640      	mov	r0, r8
 80a0fce:	4413      	add	r3, r2
 80a0fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0fd4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80a0fd8:	9a04      	ldr	r2, [sp, #16]
 80a0fda:	f8d9 3000 	ldr.w	r3, [r9]
 80a0fde:	4639      	mov	r1, r7
 80a0fe0:	4413      	add	r3, r2
 80a0fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0fe6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a0fea:	9a05      	ldr	r2, [sp, #20]
 80a0fec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80a0fee:	4413      	add	r3, r2
 80a0ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0ff4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80a0ff8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a0ffc:	f003 fe46 	bl	80a4c8c <__aeabi_dmul>
 80a1000:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80a1004:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80a1008:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80a100c:	f003 fe3e 	bl	80a4c8c <__aeabi_dmul>
 80a1010:	4602      	mov	r2, r0
 80a1012:	460b      	mov	r3, r1
 80a1014:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80a1018:	f003 fc82 	bl	80a4920 <__adddf3>
				double tpim = -real[j+halfsize] * sinTable[k] + imag[j+halfsize] * cosTable[k];
 80a101c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
				double tpre =  real[j+halfsize] * cosTable[k] + imag[j+halfsize] * sinTable[k];
 80a1020:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
				double tpim = -real[j+halfsize] * sinTable[k] + imag[j+halfsize] * cosTable[k];
 80a1024:	4640      	mov	r0, r8
 80a1026:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 80a102a:	f003 fe2f 	bl	80a4c8c <__aeabi_dmul>
 80a102e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a1032:	4607      	mov	r7, r0
 80a1034:	4688      	mov	r8, r1
 80a1036:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a103a:	f003 fe27 	bl	80a4c8c <__aeabi_dmul>
 80a103e:	4602      	mov	r2, r0
 80a1040:	460b      	mov	r3, r1
 80a1042:	4638      	mov	r0, r7
 80a1044:	4641      	mov	r1, r8
 80a1046:	f003 fc6b 	bl	80a4920 <__adddf3>
				real[j + halfsize] = real[j] - tpre;
 80a104a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
				double tpim = -real[j+halfsize] * sinTable[k] + imag[j+halfsize] * cosTable[k];
 80a104c:	4688      	mov	r8, r1
				real[j + halfsize] = real[j] - tpre;
 80a104e:	1919      	adds	r1, r3, r4
				double tpim = -real[j+halfsize] * sinTable[k] + imag[j+halfsize] * cosTable[k];
 80a1050:	4607      	mov	r7, r0
				real[j + halfsize] = real[j] - tpre;
 80a1052:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80a1056:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a105a:	f003 fc5f 	bl	80a491c <__aeabi_dsub>
 80a105e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
				imag[j + halfsize] = imag[j] - tpim;
 80a1060:	463a      	mov	r2, r7
				real[j + halfsize] = real[j] - tpre;
 80a1062:	e9c3 0100 	strd	r0, r1, [r3]
				imag[j + halfsize] = imag[j] - tpim;
 80a1066:	9b04      	ldr	r3, [sp, #16]
 80a1068:	f8d9 1000 	ldr.w	r1, [r9]
 80a106c:	18cb      	adds	r3, r1, r3
 80a106e:	4421      	add	r1, r4
 80a1070:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a1074:	9304      	str	r3, [sp, #16]
 80a1076:	4643      	mov	r3, r8
 80a1078:	f003 fc50 	bl	80a491c <__aeabi_dsub>
 80a107c:	9b04      	ldr	r3, [sp, #16]
 80a107e:	e9c3 0100 	strd	r0, r1, [r3]
 80a1082:	f8db 3000 	ldr.w	r3, [fp]
 80a1086:	4423      	add	r3, r4
 80a1088:	9304      	str	r3, [sp, #16]
				real[j] += tpre;
 80a108a:	9904      	ldr	r1, [sp, #16]
 80a108c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80a1090:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a1094:	f003 fc44 	bl	80a4920 <__adddf3>
 80a1098:	9b04      	ldr	r3, [sp, #16]
				imag[j] += tpim;
 80a109a:	463a      	mov	r2, r7
				real[j] += tpre;
 80a109c:	e9c3 0100 	strd	r0, r1, [r3]
 80a10a0:	f8d9 3000 	ldr.w	r3, [r9]
 80a10a4:	441c      	add	r4, r3
				imag[j] += tpim;
 80a10a6:	e9d4 0100 	ldrd	r0, r1, [r4]
 80a10aa:	4643      	mov	r3, r8
 80a10ac:	f003 fc38 	bl	80a4920 <__adddf3>
			for (size_t j = i, k = 0; j < i + halfsize; j++, k += tablestep) {
 80a10b0:	9b03      	ldr	r3, [sp, #12]
 80a10b2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80a10b4:	3301      	adds	r3, #1
 80a10b6:	9303      	str	r3, [sp, #12]
 80a10b8:	9b05      	ldr	r3, [sp, #20]
				imag[j] += tpim;
 80a10ba:	e9c4 0100 	strd	r0, r1, [r4]
			for (size_t j = i, k = 0; j < i + halfsize; j++, k += tablestep) {
 80a10be:	4413      	add	r3, r2
 80a10c0:	9305      	str	r3, [sp, #20]
 80a10c2:	e769      	b.n	80a0f98 <_ZN3Fft15transformRadix2ERSt6vectorIdSaIdEES3_+0x178>
		for (size_t i = 0; i < n; i += size) {
 80a10c4:	4435      	add	r5, r6
 80a10c6:	e75e      	b.n	80a0f86 <_ZN3Fft15transformRadix2ERSt6vectorIdSaIdEES3_+0x166>
		if (size == n)  // Prevent overflow in 'size *= 2'
 80a10c8:	4556      	cmp	r6, sl
 80a10ca:	d001      	beq.n	80a10d0 <_ZN3Fft15transformRadix2ERSt6vectorIdSaIdEES3_+0x2b0>
	for (size_t size = 2; size <= n; size *= 2) {
 80a10cc:	0076      	lsls	r6, r6, #1
 80a10ce:	e74e      	b.n	80a0f6e <_ZN3Fft15transformRadix2ERSt6vectorIdSaIdEES3_+0x14e>
      }
 80a10d0:	a819      	add	r0, sp, #100	; 0x64
 80a10d2:	f7ff faff 	bl	80a06d4 <_ZNSt12_Vector_baseIdSaIdEED1Ev>
 80a10d6:	a816      	add	r0, sp, #88	; 0x58
 80a10d8:	f7ff fafc 	bl	80a06d4 <_ZNSt12_Vector_baseIdSaIdEED1Ev>
}
 80a10dc:	b01d      	add	sp, #116	; 0x74
 80a10de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a10e2:	bf00      	nop
 80a10e4:	f3af 8000 	nop.w
 80a10e8:	54442d18 	.word	0x54442d18
 80a10ec:	401921fb 	.word	0x401921fb
 80a10f0:	200020f8 	.word	0x200020f8
 80a10f4:	080a5689 	.word	0x080a5689
 80a10f8:	080a569c 	.word	0x080a569c
 80a10fc:	080a56a0 	.word	0x080a56a0

080a1100 <_GLOBAL__sub_I__ZN3Fft9transformERSt6vectorIdSaIdEES3_>:
        val_(val) {
 80a1100:	2201      	movs	r2, #1
 80a1102:	4b01      	ldr	r3, [pc, #4]	; (80a1108 <_GLOBAL__sub_I__ZN3Fft9transformERSt6vectorIdSaIdEES3_+0x8>)
 80a1104:	701a      	strb	r2, [r3, #0]
	return result;
}
 80a1106:	4770      	bx	lr
 80a1108:	200020f8 	.word	0x200020f8

080a110c <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 80a110c:	b538      	push	{r3, r4, r5, lr}
 80a110e:	4b0b      	ldr	r3, [pc, #44]	; (80a113c <_ZN9TCPClientD1Ev+0x30>)
	if (_M_pi != nullptr)
 80a1110:	6984      	ldr	r4, [r0, #24]
 80a1112:	4605      	mov	r5, r0
 80a1114:	6003      	str	r3, [r0, #0]
 80a1116:	b17c      	cbz	r4, 80a1138 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
 80a1118:	6863      	ldr	r3, [r4, #4]
 80a111a:	3b01      	subs	r3, #1
 80a111c:	6063      	str	r3, [r4, #4]
 80a111e:	b95b      	cbnz	r3, 80a1138 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
 80a1120:	6823      	ldr	r3, [r4, #0]
 80a1122:	4620      	mov	r0, r4
 80a1124:	689b      	ldr	r3, [r3, #8]
 80a1126:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a1128:	68a3      	ldr	r3, [r4, #8]
 80a112a:	3b01      	subs	r3, #1
 80a112c:	60a3      	str	r3, [r4, #8]
 80a112e:	b91b      	cbnz	r3, 80a1138 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
 80a1130:	6823      	ldr	r3, [r4, #0]
 80a1132:	4620      	mov	r0, r4
 80a1134:	68db      	ldr	r3, [r3, #12]
 80a1136:	4798      	blx	r3
 80a1138:	4628      	mov	r0, r5
 80a113a:	bd38      	pop	{r3, r4, r5, pc}
 80a113c:	080a57ac 	.word	0x080a57ac

080a1140 <_ZN9TCPClientD0Ev>:
 80a1140:	b510      	push	{r4, lr}
 80a1142:	4604      	mov	r4, r0
 80a1144:	f7ff ffe2 	bl	80a110c <_ZN9TCPClientD1Ev>
 80a1148:	4620      	mov	r0, r4
 80a114a:	211c      	movs	r1, #28
 80a114c:	f7fe ffa9 	bl	80a00a2 <_ZdlPvj>
 80a1150:	4620      	mov	r0, r4
 80a1152:	bd10      	pop	{r4, pc}

080a1154 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol>:
}

UbiProtocol* builderParticle() {
  UbiProtocol* particleInstance = new UbiParticle(_host, NULL, NULL, _token);
  return particleInstance;
}
 80a1154:	b508      	push	{r3, lr}
#define _UbiHttp_H_

#include "UbiConstants.h"
#include "UbiProtocol.h"

static TCPClient _client_http_ubi;
 80a1156:	4805      	ldr	r0, [pc, #20]	; (80a116c <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x18>)
 80a1158:	f001 fadc 	bl	80a2714 <_ZN9TCPClientC1Ev>
#include <map>

#include "UbiConstants.h"
#include "UbiProtocol.h"

static TCPClient _client_tcp_ubi;
 80a115c:	4804      	ldr	r0, [pc, #16]	; (80a1170 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x1c>)
 80a115e:	f001 fad9 	bl	80a2714 <_ZN9TCPClientC1Ev>
 80a1162:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#define _UbiUdp_H_

#include "UbiConstants.h"
#include "UbiProtocol.h"

static UDP _client_udp_ubi;
 80a1166:	4803      	ldr	r0, [pc, #12]	; (80a1174 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x20>)
 80a1168:	f001 bcc0 	b.w	80a2aec <_ZN3UDPC1Ev>
 80a116c:	20002164 	.word	0x20002164
 80a1170:	200020fc 	.word	0x200020fc
 80a1174:	20002118 	.word	0x20002118

080a1178 <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_>:
 80a1178:	4801      	ldr	r0, [pc, #4]	; (80a1180 <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_+0x8>)
 80a117a:	f001 bacb 	b.w	80a2714 <_ZN9TCPClientC1Ev>
 80a117e:	bf00      	nop
 80a1180:	20002180 	.word	0x20002180

080a1184 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol>:
 80a1184:	2200      	movs	r2, #0
      str_value[k] = temp_arr[j];
      break;
    }
    j++;
  }
}
 80a1186:	b508      	push	{r3, lr}
 80a1188:	4b06      	ldr	r3, [pc, #24]	; (80a11a4 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x20>)
 80a118a:	4807      	ldr	r0, [pc, #28]	; (80a11a8 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x24>)
 80a118c:	701a      	strb	r2, [r3, #0]
 80a118e:	f001 fac1 	bl	80a2714 <_ZN9TCPClientC1Ev>
 80a1192:	4806      	ldr	r0, [pc, #24]	; (80a11ac <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x28>)
 80a1194:	f001 fabe 	bl	80a2714 <_ZN9TCPClientC1Ev>
 80a1198:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80a119c:	4804      	ldr	r0, [pc, #16]	; (80a11b0 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x2c>)
 80a119e:	f001 bca5 	b.w	80a2aec <_ZN3UDPC1Ev>
 80a11a2:	bf00      	nop
 80a11a4:	20002220 	.word	0x20002220
 80a11a8:	20002204 	.word	0x20002204
 80a11ac:	2000219c 	.word	0x2000219c
 80a11b0:	200021b8 	.word	0x200021b8

080a11b4 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_>:
 80a11b4:	4801      	ldr	r0, [pc, #4]	; (80a11bc <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_+0x8>)
 80a11b6:	f001 baad 	b.w	80a2714 <_ZN9TCPClientC1Ev>
 80a11ba:	bf00      	nop
 80a11bc:	20002224 	.word	0x20002224

080a11c0 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_>:
 80a11c0:	4801      	ldr	r0, [pc, #4]	; (80a11c8 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_+0x8>)
 80a11c2:	f001 bc93 	b.w	80a2aec <_ZN3UDPC1Ev>
 80a11c6:	bf00      	nop
 80a11c8:	20002240 	.word	0x20002240

080a11cc <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
 80a11cc:	b508      	push	{r3, lr}
 80a11ce:	4b02      	ldr	r3, [pc, #8]	; (80a11d8 <os_thread_yield+0xc>)
 80a11d0:	681b      	ldr	r3, [r3, #0]
 80a11d2:	68db      	ldr	r3, [r3, #12]
 80a11d4:	9301      	str	r3, [sp, #4]
 80a11d6:	bd08      	pop	{r3, pc}
 80a11d8:	080601d0 	.word	0x080601d0

080a11dc <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
 80a11dc:	b508      	push	{r3, lr}
 80a11de:	4b02      	ldr	r3, [pc, #8]	; (80a11e8 <os_thread_scheduling+0xc>)
 80a11e0:	681b      	ldr	r3, [r3, #0]
 80a11e2:	69db      	ldr	r3, [r3, #28]
 80a11e4:	9301      	str	r3, [sp, #4]
 80a11e6:	bd08      	pop	{r3, pc}
 80a11e8:	080601d0 	.word	0x080601d0

080a11ec <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
 80a11ec:	b508      	push	{r3, lr}
 80a11ee:	4b02      	ldr	r3, [pc, #8]	; (80a11f8 <os_timer_create+0xc>)
 80a11f0:	681b      	ldr	r3, [r3, #0]
 80a11f2:	6a1b      	ldr	r3, [r3, #32]
 80a11f4:	9301      	str	r3, [sp, #4]
 80a11f6:	bd08      	pop	{r3, pc}
 80a11f8:	080601d0 	.word	0x080601d0

080a11fc <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
 80a11fc:	b508      	push	{r3, lr}
 80a11fe:	4b02      	ldr	r3, [pc, #8]	; (80a1208 <os_timer_destroy+0xc>)
 80a1200:	681b      	ldr	r3, [r3, #0]
 80a1202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1204:	9301      	str	r3, [sp, #4]
 80a1206:	bd08      	pop	{r3, pc}
 80a1208:	080601d0 	.word	0x080601d0

080a120c <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
 80a120c:	b508      	push	{r3, lr}
 80a120e:	4b02      	ldr	r3, [pc, #8]	; (80a1218 <os_timer_get_id+0xc>)
 80a1210:	681b      	ldr	r3, [r3, #0]
 80a1212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a1214:	9301      	str	r3, [sp, #4]
 80a1216:	bd08      	pop	{r3, pc}
 80a1218:	080601d0 	.word	0x080601d0

080a121c <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
 80a121c:	b508      	push	{r3, lr}
 80a121e:	4b02      	ldr	r3, [pc, #8]	; (80a1228 <os_timer_change+0xc>)
 80a1220:	681b      	ldr	r3, [r3, #0]
 80a1222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1224:	9301      	str	r3, [sp, #4]
 80a1226:	bd08      	pop	{r3, pc}
 80a1228:	080601d0 	.word	0x080601d0

080a122c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a122c:	b508      	push	{r3, lr}
 80a122e:	4b02      	ldr	r3, [pc, #8]	; (80a1238 <os_mutex_recursive_create+0xc>)
 80a1230:	681b      	ldr	r3, [r3, #0]
 80a1232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1234:	9301      	str	r3, [sp, #4]
 80a1236:	bd08      	pop	{r3, pc}
 80a1238:	080601d0 	.word	0x080601d0

080a123c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a123c:	b508      	push	{r3, lr}
 80a123e:	4b02      	ldr	r3, [pc, #8]	; (80a1248 <os_mutex_recursive_destroy+0xc>)
 80a1240:	681b      	ldr	r3, [r3, #0]
 80a1242:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1244:	9301      	str	r3, [sp, #4]
 80a1246:	bd08      	pop	{r3, pc}
 80a1248:	080601d0 	.word	0x080601d0

080a124c <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
 80a124c:	b508      	push	{r3, lr}
 80a124e:	4b02      	ldr	r3, [pc, #8]	; (80a1258 <os_timer_set_id+0xc>)
 80a1250:	681b      	ldr	r3, [r3, #0]
 80a1252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a1254:	9301      	str	r3, [sp, #4]
 80a1256:	bd08      	pop	{r3, pc}
 80a1258:	080601d0 	.word	0x080601d0

080a125c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a125c:	b508      	push	{r3, lr}
 80a125e:	4b02      	ldr	r3, [pc, #8]	; (80a1268 <HAL_RNG_GetRandomNumber+0xc>)
 80a1260:	681b      	ldr	r3, [r3, #0]
 80a1262:	685b      	ldr	r3, [r3, #4]
 80a1264:	9301      	str	r3, [sp, #4]
 80a1266:	bd08      	pop	{r3, pc}
 80a1268:	0806019c 	.word	0x0806019c

080a126c <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a126c:	b508      	push	{r3, lr}
 80a126e:	4b02      	ldr	r3, [pc, #8]	; (80a1278 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a1270:	681b      	ldr	r3, [r3, #0]
 80a1272:	695b      	ldr	r3, [r3, #20]
 80a1274:	9301      	str	r3, [sp, #4]
 80a1276:	bd08      	pop	{r3, pc}
 80a1278:	0806019c 	.word	0x0806019c

080a127c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a127c:	b508      	push	{r3, lr}
 80a127e:	4b02      	ldr	r3, [pc, #8]	; (80a1288 <HAL_Pin_Map+0xc>)
 80a1280:	681b      	ldr	r3, [r3, #0]
 80a1282:	681b      	ldr	r3, [r3, #0]
 80a1284:	9301      	str	r3, [sp, #4]
 80a1286:	bd08      	pop	{r3, pc}
 80a1288:	080601b0 	.word	0x080601b0

080a128c <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a128c:	b508      	push	{r3, lr}
 80a128e:	4b02      	ldr	r3, [pc, #8]	; (80a1298 <HAL_Validate_Pin_Function+0xc>)
 80a1290:	681b      	ldr	r3, [r3, #0]
 80a1292:	685b      	ldr	r3, [r3, #4]
 80a1294:	9301      	str	r3, [sp, #4]
 80a1296:	bd08      	pop	{r3, pc}
 80a1298:	080601b0 	.word	0x080601b0

080a129c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a129c:	b508      	push	{r3, lr}
 80a129e:	4b02      	ldr	r3, [pc, #8]	; (80a12a8 <HAL_Pin_Mode+0xc>)
 80a12a0:	681b      	ldr	r3, [r3, #0]
 80a12a2:	689b      	ldr	r3, [r3, #8]
 80a12a4:	9301      	str	r3, [sp, #4]
 80a12a6:	bd08      	pop	{r3, pc}
 80a12a8:	080601b0 	.word	0x080601b0

080a12ac <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a12ac:	b508      	push	{r3, lr}
 80a12ae:	4b02      	ldr	r3, [pc, #8]	; (80a12b8 <HAL_Get_Pin_Mode+0xc>)
 80a12b0:	681b      	ldr	r3, [r3, #0]
 80a12b2:	68db      	ldr	r3, [r3, #12]
 80a12b4:	9301      	str	r3, [sp, #4]
 80a12b6:	bd08      	pop	{r3, pc}
 80a12b8:	080601b0 	.word	0x080601b0

080a12bc <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a12bc:	b508      	push	{r3, lr}
 80a12be:	4b02      	ldr	r3, [pc, #8]	; (80a12c8 <HAL_GPIO_Write+0xc>)
 80a12c0:	681b      	ldr	r3, [r3, #0]
 80a12c2:	691b      	ldr	r3, [r3, #16]
 80a12c4:	9301      	str	r3, [sp, #4]
 80a12c6:	bd08      	pop	{r3, pc}
 80a12c8:	080601b0 	.word	0x080601b0

080a12cc <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
 80a12cc:	b508      	push	{r3, lr}
 80a12ce:	4b02      	ldr	r3, [pc, #8]	; (80a12d8 <HAL_DAC_Write+0xc>)
 80a12d0:	681b      	ldr	r3, [r3, #0]
 80a12d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a12d4:	9301      	str	r3, [sp, #4]
 80a12d6:	bd08      	pop	{r3, pc}
 80a12d8:	080601b0 	.word	0x080601b0

080a12dc <hal_pwm_write_ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
 80a12dc:	b508      	push	{r3, lr}
 80a12de:	4b02      	ldr	r3, [pc, #8]	; (80a12e8 <hal_pwm_write_ext+0xc>)
 80a12e0:	681b      	ldr	r3, [r3, #0]
 80a12e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80a12e4:	9301      	str	r3, [sp, #4]
 80a12e6:	bd08      	pop	{r3, pc}
 80a12e8:	080601b0 	.word	0x080601b0

080a12ec <hal_pwm_write_with_frequency_ext>:
DYNALIB_FN(31, hal_gpio, hal_pwm_write_with_frequency_ext, void(uint16_t, uint32_t, uint32_t))
 80a12ec:	b508      	push	{r3, lr}
 80a12ee:	4b02      	ldr	r3, [pc, #8]	; (80a12f8 <hal_pwm_write_with_frequency_ext+0xc>)
 80a12f0:	681b      	ldr	r3, [r3, #0]
 80a12f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80a12f4:	9301      	str	r3, [sp, #4]
 80a12f6:	bd08      	pop	{r3, pc}
 80a12f8:	080601b0 	.word	0x080601b0

080a12fc <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a12fc:	b508      	push	{r3, lr}
 80a12fe:	4b02      	ldr	r3, [pc, #8]	; (80a1308 <hal_i2c_write+0xc>)
 80a1300:	681b      	ldr	r3, [r3, #0]
 80a1302:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a1304:	9301      	str	r3, [sp, #4]
 80a1306:	bd08      	pop	{r3, pc}
 80a1308:	080601ac 	.word	0x080601ac

080a130c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a130c:	b508      	push	{r3, lr}
 80a130e:	4b02      	ldr	r3, [pc, #8]	; (80a1318 <hal_i2c_available+0xc>)
 80a1310:	681b      	ldr	r3, [r3, #0]
 80a1312:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a1314:	9301      	str	r3, [sp, #4]
 80a1316:	bd08      	pop	{r3, pc}
 80a1318:	080601ac 	.word	0x080601ac

080a131c <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a131c:	b508      	push	{r3, lr}
 80a131e:	4b02      	ldr	r3, [pc, #8]	; (80a1328 <hal_i2c_read+0xc>)
 80a1320:	681b      	ldr	r3, [r3, #0]
 80a1322:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a1324:	9301      	str	r3, [sp, #4]
 80a1326:	bd08      	pop	{r3, pc}
 80a1328:	080601ac 	.word	0x080601ac

080a132c <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a132c:	b508      	push	{r3, lr}
 80a132e:	4b02      	ldr	r3, [pc, #8]	; (80a1338 <hal_i2c_peek+0xc>)
 80a1330:	681b      	ldr	r3, [r3, #0]
 80a1332:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a1334:	9301      	str	r3, [sp, #4]
 80a1336:	bd08      	pop	{r3, pc}
 80a1338:	080601ac 	.word	0x080601ac

080a133c <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a133c:	b508      	push	{r3, lr}
 80a133e:	4b02      	ldr	r3, [pc, #8]	; (80a1348 <hal_i2c_flush+0xc>)
 80a1340:	681b      	ldr	r3, [r3, #0]
 80a1342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a1344:	9301      	str	r3, [sp, #4]
 80a1346:	bd08      	pop	{r3, pc}
 80a1348:	080601ac 	.word	0x080601ac

080a134c <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a134c:	b508      	push	{r3, lr}
 80a134e:	4b02      	ldr	r3, [pc, #8]	; (80a1358 <hal_i2c_is_enabled+0xc>)
 80a1350:	681b      	ldr	r3, [r3, #0]
 80a1352:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a1354:	9301      	str	r3, [sp, #4]
 80a1356:	bd08      	pop	{r3, pc}
 80a1358:	080601ac 	.word	0x080601ac

080a135c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a135c:	b508      	push	{r3, lr}
 80a135e:	4b03      	ldr	r3, [pc, #12]	; (80a136c <hal_i2c_init+0x10>)
 80a1360:	681b      	ldr	r3, [r3, #0]
 80a1362:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a1366:	9301      	str	r3, [sp, #4]
 80a1368:	bd08      	pop	{r3, pc}
 80a136a:	0000      	.short	0x0000
 80a136c:	080601ac 	.word	0x080601ac

080a1370 <socket_active_status>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
 80a1370:	b508      	push	{r3, lr}
 80a1372:	4b02      	ldr	r3, [pc, #8]	; (80a137c <socket_active_status+0xc>)
 80a1374:	681b      	ldr	r3, [r3, #0]
 80a1376:	681b      	ldr	r3, [r3, #0]
 80a1378:	9301      	str	r3, [sp, #4]
 80a137a:	bd08      	pop	{r3, pc}
 80a137c:	080601bc 	.word	0x080601bc

080a1380 <socket_handle_valid>:
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a1380:	b508      	push	{r3, lr}
 80a1382:	4b02      	ldr	r3, [pc, #8]	; (80a138c <socket_handle_valid+0xc>)
 80a1384:	681b      	ldr	r3, [r3, #0]
 80a1386:	685b      	ldr	r3, [r3, #4]
 80a1388:	9301      	str	r3, [sp, #4]
 80a138a:	bd08      	pop	{r3, pc}
 80a138c:	080601bc 	.word	0x080601bc

080a1390 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a1390:	b508      	push	{r3, lr}
 80a1392:	4b02      	ldr	r3, [pc, #8]	; (80a139c <socket_create+0xc>)
 80a1394:	681b      	ldr	r3, [r3, #0]
 80a1396:	689b      	ldr	r3, [r3, #8]
 80a1398:	9301      	str	r3, [sp, #4]
 80a139a:	bd08      	pop	{r3, pc}
 80a139c:	080601bc 	.word	0x080601bc

080a13a0 <socket_connect>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
 80a13a0:	b508      	push	{r3, lr}
 80a13a2:	4b02      	ldr	r3, [pc, #8]	; (80a13ac <socket_connect+0xc>)
 80a13a4:	681b      	ldr	r3, [r3, #0]
 80a13a6:	68db      	ldr	r3, [r3, #12]
 80a13a8:	9301      	str	r3, [sp, #4]
 80a13aa:	bd08      	pop	{r3, pc}
 80a13ac:	080601bc 	.word	0x080601bc

080a13b0 <socket_receive>:
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
 80a13b0:	b508      	push	{r3, lr}
 80a13b2:	4b02      	ldr	r3, [pc, #8]	; (80a13bc <socket_receive+0xc>)
 80a13b4:	681b      	ldr	r3, [r3, #0]
 80a13b6:	691b      	ldr	r3, [r3, #16]
 80a13b8:	9301      	str	r3, [sp, #4]
 80a13ba:	bd08      	pop	{r3, pc}
 80a13bc:	080601bc 	.word	0x080601bc

080a13c0 <socket_sendto>:
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
 80a13c0:	b508      	push	{r3, lr}
 80a13c2:	4b02      	ldr	r3, [pc, #8]	; (80a13cc <socket_sendto+0xc>)
 80a13c4:	681b      	ldr	r3, [r3, #0]
 80a13c6:	69db      	ldr	r3, [r3, #28]
 80a13c8:	9301      	str	r3, [sp, #4]
 80a13ca:	bd08      	pop	{r3, pc}
 80a13cc:	080601bc 	.word	0x080601bc

080a13d0 <socket_close>:
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a13d0:	b508      	push	{r3, lr}
 80a13d2:	4b02      	ldr	r3, [pc, #8]	; (80a13dc <socket_close+0xc>)
 80a13d4:	681b      	ldr	r3, [r3, #0]
 80a13d6:	6a1b      	ldr	r3, [r3, #32]
 80a13d8:	9301      	str	r3, [sp, #4]
 80a13da:	bd08      	pop	{r3, pc}
 80a13dc:	080601bc 	.word	0x080601bc

080a13e0 <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a13e0:	b508      	push	{r3, lr}
 80a13e2:	4b02      	ldr	r3, [pc, #8]	; (80a13ec <socket_handle_invalid+0xc>)
 80a13e4:	681b      	ldr	r3, [r3, #0]
 80a13e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a13e8:	9301      	str	r3, [sp, #4]
 80a13ea:	bd08      	pop	{r3, pc}
 80a13ec:	080601bc 	.word	0x080601bc

080a13f0 <socket_send_ex>:
DYNALIB_FN(13, hal_socket, socket_join_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(14, hal_socket, socket_leave_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(15, hal_socket, socket_peer, sock_result_t(sock_handle_t, sock_peer_t*, void*))
DYNALIB_FN(16, hal_socket, socket_shutdown, sock_result_t(sock_handle_t, int))
DYNALIB_FN(17, hal_socket, socket_send_ex, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, system_tick_t, void*))
 80a13f0:	b508      	push	{r3, lr}
 80a13f2:	4b02      	ldr	r3, [pc, #8]	; (80a13fc <socket_send_ex+0xc>)
 80a13f4:	681b      	ldr	r3, [r3, #0]
 80a13f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a13f8:	9301      	str	r3, [sp, #4]
 80a13fa:	bd08      	pop	{r3, pc}
 80a13fc:	080601bc 	.word	0x080601bc

080a1400 <socket_receivefrom_ex>:
DYNALIB_FN(18, hal_socket, socket_receivefrom_ex, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*, system_tick_t, void*))
 80a1400:	b508      	push	{r3, lr}
 80a1402:	4b02      	ldr	r3, [pc, #8]	; (80a140c <socket_receivefrom_ex+0xc>)
 80a1404:	681b      	ldr	r3, [r3, #0]
 80a1406:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1408:	9301      	str	r3, [sp, #4]
 80a140a:	bd08      	pop	{r3, pc}
 80a140c:	080601bc 	.word	0x080601bc

080a1410 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a1410:	b508      	push	{r3, lr}
 80a1412:	4b02      	ldr	r3, [pc, #8]	; (80a141c <hal_spi_init+0xc>)
 80a1414:	681b      	ldr	r3, [r3, #0]
 80a1416:	69db      	ldr	r3, [r3, #28]
 80a1418:	9301      	str	r3, [sp, #4]
 80a141a:	bd08      	pop	{r3, pc}
 80a141c:	080601b4 	.word	0x080601b4

080a1420 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a1420:	b508      	push	{r3, lr}
 80a1422:	4b02      	ldr	r3, [pc, #8]	; (80a142c <hal_spi_is_enabled+0xc>)
 80a1424:	681b      	ldr	r3, [r3, #0]
 80a1426:	6a1b      	ldr	r3, [r3, #32]
 80a1428:	9301      	str	r3, [sp, #4]
 80a142a:	bd08      	pop	{r3, pc}
 80a142c:	080601b4 	.word	0x080601b4

080a1430 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a1430:	b508      	push	{r3, lr}
 80a1432:	4b02      	ldr	r3, [pc, #8]	; (80a143c <hal_usart_write+0xc>)
 80a1434:	681b      	ldr	r3, [r3, #0]
 80a1436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1438:	9301      	str	r3, [sp, #4]
 80a143a:	bd08      	pop	{r3, pc}
 80a143c:	080601c4 	.word	0x080601c4

080a1440 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a1440:	b508      	push	{r3, lr}
 80a1442:	4b02      	ldr	r3, [pc, #8]	; (80a144c <hal_usart_available+0xc>)
 80a1444:	681b      	ldr	r3, [r3, #0]
 80a1446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a1448:	9301      	str	r3, [sp, #4]
 80a144a:	bd08      	pop	{r3, pc}
 80a144c:	080601c4 	.word	0x080601c4

080a1450 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a1450:	b508      	push	{r3, lr}
 80a1452:	4b02      	ldr	r3, [pc, #8]	; (80a145c <hal_usart_read+0xc>)
 80a1454:	681b      	ldr	r3, [r3, #0]
 80a1456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1458:	9301      	str	r3, [sp, #4]
 80a145a:	bd08      	pop	{r3, pc}
 80a145c:	080601c4 	.word	0x080601c4

080a1460 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a1460:	b508      	push	{r3, lr}
 80a1462:	4b02      	ldr	r3, [pc, #8]	; (80a146c <hal_usart_peek+0xc>)
 80a1464:	681b      	ldr	r3, [r3, #0]
 80a1466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1468:	9301      	str	r3, [sp, #4]
 80a146a:	bd08      	pop	{r3, pc}
 80a146c:	080601c4 	.word	0x080601c4

080a1470 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a1470:	b508      	push	{r3, lr}
 80a1472:	4b02      	ldr	r3, [pc, #8]	; (80a147c <hal_usart_flush+0xc>)
 80a1474:	681b      	ldr	r3, [r3, #0]
 80a1476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1478:	9301      	str	r3, [sp, #4]
 80a147a:	bd08      	pop	{r3, pc}
 80a147c:	080601c4 	.word	0x080601c4

080a1480 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a1480:	b508      	push	{r3, lr}
 80a1482:	4b02      	ldr	r3, [pc, #8]	; (80a148c <hal_usart_is_enabled+0xc>)
 80a1484:	681b      	ldr	r3, [r3, #0]
 80a1486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a1488:	9301      	str	r3, [sp, #4]
 80a148a:	bd08      	pop	{r3, pc}
 80a148c:	080601c4 	.word	0x080601c4

080a1490 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a1490:	b508      	push	{r3, lr}
 80a1492:	4b02      	ldr	r3, [pc, #8]	; (80a149c <hal_usart_available_data_for_write+0xc>)
 80a1494:	681b      	ldr	r3, [r3, #0]
 80a1496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1498:	9301      	str	r3, [sp, #4]
 80a149a:	bd08      	pop	{r3, pc}
 80a149c:	080601c4 	.word	0x080601c4

080a14a0 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 80a14a0:	b508      	push	{r3, lr}
 80a14a2:	4b02      	ldr	r3, [pc, #8]	; (80a14ac <hal_usart_init_ex+0xc>)
 80a14a4:	681b      	ldr	r3, [r3, #0]
 80a14a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a14a8:	9301      	str	r3, [sp, #4]
 80a14aa:	bd08      	pop	{r3, pc}
 80a14ac:	080601c4 	.word	0x080601c4

080a14b0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a14b0:	b508      	push	{r3, lr}
 80a14b2:	4b02      	ldr	r3, [pc, #8]	; (80a14bc <HAL_USB_USART_Init+0xc>)
 80a14b4:	681b      	ldr	r3, [r3, #0]
 80a14b6:	681b      	ldr	r3, [r3, #0]
 80a14b8:	9301      	str	r3, [sp, #4]
 80a14ba:	bd08      	pop	{r3, pc}
 80a14bc:	080601d8 	.word	0x080601d8

080a14c0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a14c0:	b508      	push	{r3, lr}
 80a14c2:	4b02      	ldr	r3, [pc, #8]	; (80a14cc <HAL_USB_USART_Begin+0xc>)
 80a14c4:	681b      	ldr	r3, [r3, #0]
 80a14c6:	685b      	ldr	r3, [r3, #4]
 80a14c8:	9301      	str	r3, [sp, #4]
 80a14ca:	bd08      	pop	{r3, pc}
 80a14cc:	080601d8 	.word	0x080601d8

080a14d0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a14d0:	b508      	push	{r3, lr}
 80a14d2:	4b02      	ldr	r3, [pc, #8]	; (80a14dc <HAL_USB_USART_Available_Data+0xc>)
 80a14d4:	681b      	ldr	r3, [r3, #0]
 80a14d6:	691b      	ldr	r3, [r3, #16]
 80a14d8:	9301      	str	r3, [sp, #4]
 80a14da:	bd08      	pop	{r3, pc}
 80a14dc:	080601d8 	.word	0x080601d8

080a14e0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a14e0:	b508      	push	{r3, lr}
 80a14e2:	4b02      	ldr	r3, [pc, #8]	; (80a14ec <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a14e4:	681b      	ldr	r3, [r3, #0]
 80a14e6:	695b      	ldr	r3, [r3, #20]
 80a14e8:	9301      	str	r3, [sp, #4]
 80a14ea:	bd08      	pop	{r3, pc}
 80a14ec:	080601d8 	.word	0x080601d8

080a14f0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a14f0:	b508      	push	{r3, lr}
 80a14f2:	4b02      	ldr	r3, [pc, #8]	; (80a14fc <HAL_USB_USART_Receive_Data+0xc>)
 80a14f4:	681b      	ldr	r3, [r3, #0]
 80a14f6:	699b      	ldr	r3, [r3, #24]
 80a14f8:	9301      	str	r3, [sp, #4]
 80a14fa:	bd08      	pop	{r3, pc}
 80a14fc:	080601d8 	.word	0x080601d8

080a1500 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1500:	b508      	push	{r3, lr}
 80a1502:	4b02      	ldr	r3, [pc, #8]	; (80a150c <HAL_USB_USART_Send_Data+0xc>)
 80a1504:	681b      	ldr	r3, [r3, #0]
 80a1506:	69db      	ldr	r3, [r3, #28]
 80a1508:	9301      	str	r3, [sp, #4]
 80a150a:	bd08      	pop	{r3, pc}
 80a150c:	080601d8 	.word	0x080601d8

080a1510 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a1510:	b508      	push	{r3, lr}
 80a1512:	4b02      	ldr	r3, [pc, #8]	; (80a151c <HAL_USB_USART_Flush_Data+0xc>)
 80a1514:	681b      	ldr	r3, [r3, #0]
 80a1516:	6a1b      	ldr	r3, [r3, #32]
 80a1518:	9301      	str	r3, [sp, #4]
 80a151a:	bd08      	pop	{r3, pc}
 80a151c:	080601d8 	.word	0x080601d8

080a1520 <HAL_NET_SetNetWatchDog>:

DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
 80a1520:	b508      	push	{r3, lr}
 80a1522:	4b02      	ldr	r3, [pc, #8]	; (80a152c <HAL_NET_SetNetWatchDog+0xc>)
 80a1524:	681b      	ldr	r3, [r3, #0]
 80a1526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1528:	9301      	str	r3, [sp, #4]
 80a152a:	bd08      	pop	{r3, pc}
 80a152c:	080601c0 	.word	0x080601c0

080a1530 <inet_gethostbyname>:
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a1530:	b508      	push	{r3, lr}
 80a1532:	4b02      	ldr	r3, [pc, #8]	; (80a153c <inet_gethostbyname+0xc>)
 80a1534:	681b      	ldr	r3, [r3, #0]
 80a1536:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1538:	9301      	str	r3, [sp, #4]
 80a153a:	bd08      	pop	{r3, pc}
 80a153c:	080601c0 	.word	0x080601c0

080a1540 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 80a1540:	b508      	push	{r3, lr}
 80a1542:	4b02      	ldr	r3, [pc, #8]	; (80a154c <log_message+0xc>)
 80a1544:	681b      	ldr	r3, [r3, #0]
 80a1546:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80a1548:	9301      	str	r3, [sp, #4]
 80a154a:	bd08      	pop	{r3, pc}
 80a154c:	080201a8 	.word	0x080201a8

080a1550 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a1550:	b508      	push	{r3, lr}
 80a1552:	4b02      	ldr	r3, [pc, #8]	; (80a155c <set_system_mode+0xc>)
 80a1554:	681b      	ldr	r3, [r3, #0]
 80a1556:	685b      	ldr	r3, [r3, #4]
 80a1558:	9301      	str	r3, [sp, #4]
 80a155a:	bd08      	pop	{r3, pc}
 80a155c:	080601a4 	.word	0x080601a4

080a1560 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a1560:	b508      	push	{r3, lr}
 80a1562:	4b02      	ldr	r3, [pc, #8]	; (80a156c <application_thread_current+0xc>)
 80a1564:	681b      	ldr	r3, [r3, #0]
 80a1566:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a1568:	9301      	str	r3, [sp, #4]
 80a156a:	bd08      	pop	{r3, pc}
 80a156c:	080601a4 	.word	0x080601a4

080a1570 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a1570:	b508      	push	{r3, lr}
 80a1572:	4b02      	ldr	r3, [pc, #8]	; (80a157c <application_thread_invoke+0xc>)
 80a1574:	681b      	ldr	r3, [r3, #0]
 80a1576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a1578:	9301      	str	r3, [sp, #4]
 80a157a:	bd08      	pop	{r3, pc}
 80a157c:	080601a4 	.word	0x080601a4

080a1580 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a1580:	b508      	push	{r3, lr}
 80a1582:	4b03      	ldr	r3, [pc, #12]	; (80a1590 <system_ctrl_set_app_request_handler+0x10>)
 80a1584:	681b      	ldr	r3, [r3, #0]
 80a1586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a158a:	9301      	str	r3, [sp, #4]
 80a158c:	bd08      	pop	{r3, pc}
 80a158e:	0000      	.short	0x0000
 80a1590:	080601a4 	.word	0x080601a4

080a1594 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a1594:	b508      	push	{r3, lr}
 80a1596:	4b03      	ldr	r3, [pc, #12]	; (80a15a4 <system_ctrl_set_result+0x10>)
 80a1598:	681b      	ldr	r3, [r3, #0]
 80a159a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a159e:	9301      	str	r3, [sp, #4]
 80a15a0:	bd08      	pop	{r3, pc}
 80a15a2:	0000      	.short	0x0000
 80a15a4:	080601a4 	.word	0x080601a4

080a15a8 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 80a15a8:	b508      	push	{r3, lr}
 80a15aa:	4b02      	ldr	r3, [pc, #8]	; (80a15b4 <spark_variable+0xc>)
 80a15ac:	681b      	ldr	r3, [r3, #0]
 80a15ae:	681b      	ldr	r3, [r3, #0]
 80a15b0:	9301      	str	r3, [sp, #4]
 80a15b2:	bd08      	pop	{r3, pc}
 80a15b4:	080601cc 	.word	0x080601cc

080a15b8 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 80a15b8:	b508      	push	{r3, lr}
 80a15ba:	4b02      	ldr	r3, [pc, #8]	; (80a15c4 <spark_function+0xc>)
 80a15bc:	681b      	ldr	r3, [r3, #0]
 80a15be:	685b      	ldr	r3, [r3, #4]
 80a15c0:	9301      	str	r3, [sp, #4]
 80a15c2:	bd08      	pop	{r3, pc}
 80a15c4:	080601cc 	.word	0x080601cc

080a15c8 <spark_cloud_flag_connected>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a15c8:	b508      	push	{r3, lr}
 80a15ca:	4b02      	ldr	r3, [pc, #8]	; (80a15d4 <spark_cloud_flag_connected+0xc>)
 80a15cc:	681b      	ldr	r3, [r3, #0]
 80a15ce:	695b      	ldr	r3, [r3, #20]
 80a15d0:	9301      	str	r3, [sp, #4]
 80a15d2:	bd08      	pop	{r3, pc}
 80a15d4:	080601cc 	.word	0x080601cc

080a15d8 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a15d8:	b508      	push	{r3, lr}
 80a15da:	4b02      	ldr	r3, [pc, #8]	; (80a15e4 <spark_send_event+0xc>)
 80a15dc:	681b      	ldr	r3, [r3, #0]
 80a15de:	6a1b      	ldr	r3, [r3, #32]
 80a15e0:	9301      	str	r3, [sp, #4]
 80a15e2:	bd08      	pop	{r3, pc}
 80a15e4:	080601cc 	.word	0x080601cc

080a15e8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a15e8:	b508      	push	{r3, lr}
 80a15ea:	4b02      	ldr	r3, [pc, #8]	; (80a15f4 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a15ec:	681b      	ldr	r3, [r3, #0]
 80a15ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a15f0:	9301      	str	r3, [sp, #4]
 80a15f2:	bd08      	pop	{r3, pc}
 80a15f4:	080601cc 	.word	0x080601cc

080a15f8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a15f8:	b508      	push	{r3, lr}
 80a15fa:	4b02      	ldr	r3, [pc, #8]	; (80a1604 <network_connect+0xc>)
 80a15fc:	681b      	ldr	r3, [r3, #0]
 80a15fe:	685b      	ldr	r3, [r3, #4]
 80a1600:	9301      	str	r3, [sp, #4]
 80a1602:	bd08      	pop	{r3, pc}
 80a1604:	080601c8 	.word	0x080601c8

080a1608 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a1608:	b508      	push	{r3, lr}
 80a160a:	4b02      	ldr	r3, [pc, #8]	; (80a1614 <network_connecting+0xc>)
 80a160c:	681b      	ldr	r3, [r3, #0]
 80a160e:	689b      	ldr	r3, [r3, #8]
 80a1610:	9301      	str	r3, [sp, #4]
 80a1612:	bd08      	pop	{r3, pc}
 80a1614:	080601c8 	.word	0x080601c8

080a1618 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a1618:	b508      	push	{r3, lr}
 80a161a:	4b02      	ldr	r3, [pc, #8]	; (80a1624 <network_disconnect+0xc>)
 80a161c:	681b      	ldr	r3, [r3, #0]
 80a161e:	68db      	ldr	r3, [r3, #12]
 80a1620:	9301      	str	r3, [sp, #4]
 80a1622:	bd08      	pop	{r3, pc}
 80a1624:	080601c8 	.word	0x080601c8

080a1628 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a1628:	b508      	push	{r3, lr}
 80a162a:	4b02      	ldr	r3, [pc, #8]	; (80a1634 <network_ready+0xc>)
 80a162c:	681b      	ldr	r3, [r3, #0]
 80a162e:	691b      	ldr	r3, [r3, #16]
 80a1630:	9301      	str	r3, [sp, #4]
 80a1632:	bd08      	pop	{r3, pc}
 80a1634:	080601c8 	.word	0x080601c8

080a1638 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1638:	b508      	push	{r3, lr}
 80a163a:	4b02      	ldr	r3, [pc, #8]	; (80a1644 <network_on+0xc>)
 80a163c:	681b      	ldr	r3, [r3, #0]
 80a163e:	695b      	ldr	r3, [r3, #20]
 80a1640:	9301      	str	r3, [sp, #4]
 80a1642:	bd08      	pop	{r3, pc}
 80a1644:	080601c8 	.word	0x080601c8

080a1648 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1648:	b508      	push	{r3, lr}
 80a164a:	4b02      	ldr	r3, [pc, #8]	; (80a1654 <network_off+0xc>)
 80a164c:	681b      	ldr	r3, [r3, #0]
 80a164e:	699b      	ldr	r3, [r3, #24]
 80a1650:	9301      	str	r3, [sp, #4]
 80a1652:	bd08      	pop	{r3, pc}
 80a1654:	080601c8 	.word	0x080601c8

080a1658 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a1658:	b508      	push	{r3, lr}
 80a165a:	4b02      	ldr	r3, [pc, #8]	; (80a1664 <network_listen+0xc>)
 80a165c:	681b      	ldr	r3, [r3, #0]
 80a165e:	69db      	ldr	r3, [r3, #28]
 80a1660:	9301      	str	r3, [sp, #4]
 80a1662:	bd08      	pop	{r3, pc}
 80a1664:	080601c8 	.word	0x080601c8

080a1668 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a1668:	b508      	push	{r3, lr}
 80a166a:	4b02      	ldr	r3, [pc, #8]	; (80a1674 <network_listening+0xc>)
 80a166c:	681b      	ldr	r3, [r3, #0]
 80a166e:	6a1b      	ldr	r3, [r3, #32]
 80a1670:	9301      	str	r3, [sp, #4]
 80a1672:	bd08      	pop	{r3, pc}
 80a1674:	080601c8 	.word	0x080601c8

080a1678 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a1678:	b508      	push	{r3, lr}
 80a167a:	4b02      	ldr	r3, [pc, #8]	; (80a1684 <network_set_listen_timeout+0xc>)
 80a167c:	681b      	ldr	r3, [r3, #0]
 80a167e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1680:	9301      	str	r3, [sp, #4]
 80a1682:	bd08      	pop	{r3, pc}
 80a1684:	080601c8 	.word	0x080601c8

080a1688 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a1688:	b508      	push	{r3, lr}
 80a168a:	4b02      	ldr	r3, [pc, #8]	; (80a1694 <network_get_listen_timeout+0xc>)
 80a168c:	681b      	ldr	r3, [r3, #0]
 80a168e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1690:	9301      	str	r3, [sp, #4]
 80a1692:	bd08      	pop	{r3, pc}
 80a1694:	080601c8 	.word	0x080601c8

080a1698 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a1698:	b508      	push	{r3, lr}
 80a169a:	4b02      	ldr	r3, [pc, #8]	; (80a16a4 <network_is_on+0xc>)
 80a169c:	681b      	ldr	r3, [r3, #0]
 80a169e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a16a0:	9301      	str	r3, [sp, #4]
 80a16a2:	bd08      	pop	{r3, pc}
 80a16a4:	080601c8 	.word	0x080601c8

080a16a8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a16a8:	b508      	push	{r3, lr}
 80a16aa:	4b02      	ldr	r3, [pc, #8]	; (80a16b4 <network_is_off+0xc>)
 80a16ac:	681b      	ldr	r3, [r3, #0]
 80a16ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a16b0:	9301      	str	r3, [sp, #4]
 80a16b2:	bd08      	pop	{r3, pc}
 80a16b4:	080601c8 	.word	0x080601c8

080a16b8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a16b8:	b508      	push	{r3, lr}
 80a16ba:	4b02      	ldr	r3, [pc, #8]	; (80a16c4 <malloc+0xc>)
 80a16bc:	681b      	ldr	r3, [r3, #0]
 80a16be:	681b      	ldr	r3, [r3, #0]
 80a16c0:	9301      	str	r3, [sp, #4]
 80a16c2:	bd08      	pop	{r3, pc}
 80a16c4:	080601a0 	.word	0x080601a0

080a16c8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a16c8:	b508      	push	{r3, lr}
 80a16ca:	4b02      	ldr	r3, [pc, #8]	; (80a16d4 <free+0xc>)
 80a16cc:	681b      	ldr	r3, [r3, #0]
 80a16ce:	685b      	ldr	r3, [r3, #4]
 80a16d0:	9301      	str	r3, [sp, #4]
 80a16d2:	bd08      	pop	{r3, pc}
 80a16d4:	080601a0 	.word	0x080601a0

080a16d8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a16d8:	b508      	push	{r3, lr}
 80a16da:	4b02      	ldr	r3, [pc, #8]	; (80a16e4 <realloc+0xc>)
 80a16dc:	681b      	ldr	r3, [r3, #0]
 80a16de:	689b      	ldr	r3, [r3, #8]
 80a16e0:	9301      	str	r3, [sp, #4]
 80a16e2:	bd08      	pop	{r3, pc}
 80a16e4:	080601a0 	.word	0x080601a0

080a16e8 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a16e8:	b508      	push	{r3, lr}
 80a16ea:	4b02      	ldr	r3, [pc, #8]	; (80a16f4 <abort+0xc>)
 80a16ec:	681b      	ldr	r3, [r3, #0]
 80a16ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a16f0:	9301      	str	r3, [sp, #4]
 80a16f2:	bd08      	pop	{r3, pc}
 80a16f4:	080601a0 	.word	0x080601a0

080a16f8 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a16f8:	b508      	push	{r3, lr}
 80a16fa:	4b02      	ldr	r3, [pc, #8]	; (80a1704 <_malloc_r+0xc>)
 80a16fc:	681b      	ldr	r3, [r3, #0]
 80a16fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1700:	9301      	str	r3, [sp, #4]
 80a1702:	bd08      	pop	{r3, pc}
 80a1704:	080601a0 	.word	0x080601a0

080a1708 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 80a1708:	b508      	push	{r3, lr}
 80a170a:	4b02      	ldr	r3, [pc, #8]	; (80a1714 <__errno+0xc>)
 80a170c:	681b      	ldr	r3, [r3, #0]
 80a170e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1710:	9301      	str	r3, [sp, #4]
 80a1712:	bd08      	pop	{r3, pc}
 80a1714:	080601a0 	.word	0x080601a0

080a1718 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 80a1718:	b508      	push	{r3, lr}
 80a171a:	4b02      	ldr	r3, [pc, #8]	; (80a1724 <__assert_func+0xc>)
 80a171c:	681b      	ldr	r3, [r3, #0]
 80a171e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1720:	9301      	str	r3, [sp, #4]
 80a1722:	bd08      	pop	{r3, pc}
 80a1724:	080601a0 	.word	0x080601a0

080a1728 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a1728:	b508      	push	{r3, lr}
 80a172a:	4b02      	ldr	r3, [pc, #8]	; (80a1734 <newlib_impure_ptr_callback+0xc>)
 80a172c:	681b      	ldr	r3, [r3, #0]
 80a172e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1730:	9301      	str	r3, [sp, #4]
 80a1732:	bd08      	pop	{r3, pc}
 80a1734:	080601a0 	.word	0x080601a0

080a1738 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a1738:	b510      	push	{r4, lr}
      if (_M_empty())
 80a173a:	6883      	ldr	r3, [r0, #8]
 80a173c:	4604      	mov	r4, r0
 80a173e:	b90b      	cbnz	r3, 80a1744 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a1740:	f001 fde8 	bl	80a3314 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1744:	68c3      	ldr	r3, [r0, #12]
 80a1746:	4798      	blx	r3
      if (_M_manager)
 80a1748:	68a3      	ldr	r3, [r4, #8]
 80a174a:	b11b      	cbz	r3, 80a1754 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a174c:	2203      	movs	r2, #3
 80a174e:	4621      	mov	r1, r4
 80a1750:	4620      	mov	r0, r4
 80a1752:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a1754:	4620      	mov	r0, r4
}
 80a1756:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 80a175a:	2110      	movs	r1, #16
 80a175c:	f7fe bca1 	b.w	80a00a2 <_ZdlPvj>

080a1760 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a1760:	4770      	bx	lr

080a1762 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 80a1762:	2000      	movs	r0, #0
 80a1764:	4770      	bx	lr

080a1766 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a1766:	b510      	push	{r4, lr}
 80a1768:	4604      	mov	r4, r0
 80a176a:	2110      	movs	r1, #16
 80a176c:	f7fe fc99 	bl	80a00a2 <_ZdlPvj>
 80a1770:	4620      	mov	r0, r4
 80a1772:	bd10      	pop	{r4, pc}

080a1774 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 80a1774:	b508      	push	{r3, lr}
      { delete this; }
 80a1776:	f7ff fff6 	bl	80a1766 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a177a:	bd08      	pop	{r3, pc}

080a177c <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a177c:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a177e:	b530      	push	{r4, r5, lr}
        type_(type) {
 80a1780:	f64f 749c 	movw	r4, #65436	; 0xff9c
 80a1784:	6002      	str	r2, [r0, #0]
 80a1786:	8084      	strh	r4, [r0, #4]
 80a1788:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a178a:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a178c:	680c      	ldr	r4, [r1, #0]
 80a178e:	8085      	strh	r5, [r0, #4]
 80a1790:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1792:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a1794:	bd30      	pop	{r4, r5, pc}

080a1796 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a1796:	b510      	push	{r4, lr}
 80a1798:	4604      	mov	r4, r0
    free((void*)msg_);
 80a179a:	6800      	ldr	r0, [r0, #0]
 80a179c:	f7ff ff94 	bl	80a16c8 <free>
}
 80a17a0:	4620      	mov	r0, r4
 80a17a2:	bd10      	pop	{r4, pc}

080a17a4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 80a17a4:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a17a6:	68c4      	ldr	r4, [r0, #12]
 80a17a8:	b1f4      	cbz	r4, 80a17e8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 80a17aa:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a17ac:	2b02      	cmp	r3, #2
 80a17ae:	d103      	bne.n	80a17b8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a17b0:	f104 000c 	add.w	r0, r4, #12
 80a17b4:	f7ff ffef 	bl	80a1796 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 80a17b8:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
 80a17ba:	b135      	cbz	r5, 80a17ca <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
 80a17bc:	4628      	mov	r0, r5
 80a17be:	f7fe feed 	bl	80a059c <_ZNSt14_Function_baseD1Ev>
 80a17c2:	2110      	movs	r1, #16
 80a17c4:	4628      	mov	r0, r5
 80a17c6:	f7fe fc6c 	bl	80a00a2 <_ZdlPvj>
 80a17ca:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a17cc:	b135      	cbz	r5, 80a17dc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a17ce:	4628      	mov	r0, r5
 80a17d0:	f7fe fee4 	bl	80a059c <_ZNSt14_Function_baseD1Ev>
 80a17d4:	2110      	movs	r1, #16
 80a17d6:	4628      	mov	r0, r5
 80a17d8:	f7fe fc63 	bl	80a00a2 <_ZdlPvj>
 80a17dc:	4620      	mov	r0, r4
 80a17de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a17e2:	2114      	movs	r1, #20
 80a17e4:	f7fe bc5d 	b.w	80a00a2 <_ZdlPvj>
 80a17e8:	bd38      	pop	{r3, r4, r5, pc}

080a17ea <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 80a17ea:	b510      	push	{r4, lr}
 80a17ec:	b088      	sub	sp, #32
 80a17ee:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a17f0:	4668      	mov	r0, sp
 80a17f2:	f000 fd42 	bl	80a227a <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 80a17f6:	4669      	mov	r1, sp
 80a17f8:	a804      	add	r0, sp, #16
 80a17fa:	f000 fd60 	bl	80a22be <_ZN6StringC1ERKS_>
 80a17fe:	a804      	add	r0, sp, #16
 80a1800:	47a0      	blx	r4
 80a1802:	4604      	mov	r4, r0
 80a1804:	a804      	add	r0, sp, #16
 80a1806:	f000 fcee 	bl	80a21e6 <_ZN6StringD1Ev>
    String p(param);
 80a180a:	4668      	mov	r0, sp
 80a180c:	f000 fceb 	bl	80a21e6 <_ZN6StringD1Ev>
}
 80a1810:	4620      	mov	r0, r4
 80a1812:	b008      	add	sp, #32
 80a1814:	bd10      	pop	{r4, pc}

080a1816 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 80a1816:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 80a1818:	2300      	movs	r3, #0
         size = sizeof(*this);
 80a181a:	2410      	movs	r4, #16
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
 80a181c:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
 80a1820:	9201      	str	r2, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a1822:	4669      	mov	r1, sp
 80a1824:	461a      	mov	r2, r3
 80a1826:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
 80a1828:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
 80a182c:	f8ad 4000 	strh.w	r4, [sp]
 80a1830:	f7ff fec2 	bl	80a15b8 <spark_function>
}
 80a1834:	b004      	add	sp, #16
 80a1836:	bd10      	pop	{r4, pc}

080a1838 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1838:	680b      	ldr	r3, [r1, #0]
 80a183a:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 80a183c:	684b      	ldr	r3, [r1, #4]
 80a183e:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 80a1840:	b113      	cbz	r3, 80a1848 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
 80a1842:	685a      	ldr	r2, [r3, #4]
 80a1844:	3201      	adds	r2, #1
 80a1846:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1848:	4770      	bx	lr

080a184a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a184a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a184c:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 80a184e:	4668      	mov	r0, sp
 80a1850:	460d      	mov	r5, r1
 80a1852:	f7ff fff1 	bl	80a1838 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a1856:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a1858:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a185a:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 80a185c:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a185e:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 80a1860:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 80a1862:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a1864:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 80a1866:	f7ff fa91 	bl	80a0d8c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 80a186a:	b135      	cbz	r5, 80a187a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
 80a186c:	1d28      	adds	r0, r5, #4
 80a186e:	f7ff fa8d 	bl	80a0d8c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1872:	2108      	movs	r1, #8
 80a1874:	4628      	mov	r0, r5
 80a1876:	f7fe fc14 	bl	80a00a2 <_ZdlPvj>
        return p;
    }
 80a187a:	4620      	mov	r0, r4
 80a187c:	b003      	add	sp, #12
 80a187e:	bd30      	pop	{r4, r5, pc}

080a1880 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
 80a1880:	b513      	push	{r0, r1, r4, lr}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1882:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 80a1884:	460b      	mov	r3, r1
 80a1886:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1888:	c803      	ldmia	r0, {r0, r1}
 80a188a:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a188e:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a1892:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a1896:	e894 0003 	ldmia.w	r4, {r0, r1}
 80a189a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a189e:	b002      	add	sp, #8
 80a18a0:	bd10      	pop	{r4, pc}

080a18a2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
 80a18a2:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a18a4:	b510      	push	{r4, lr}
      if (_M_empty())
 80a18a6:	b90a      	cbnz	r2, 80a18ac <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a18a8:	f001 fd34 	bl	80a3314 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a18ac:	68c3      	ldr	r3, [r0, #12]
    }
 80a18ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a18b2:	4718      	bx	r3

080a18b4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a18b4:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a18b6:	6800      	ldr	r0, [r0, #0]
 80a18b8:	f100 0110 	add.w	r1, r0, #16
 80a18bc:	f7ff fff1 	bl	80a18a2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 80a18c0:	bd08      	pop	{r3, pc}

080a18c2 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 80a18c2:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a18c4:	b510      	push	{r4, lr}
      if (_M_empty())
 80a18c6:	b90a      	cbnz	r2, 80a18cc <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a18c8:	f001 fd24 	bl	80a3314 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a18cc:	68c3      	ldr	r3, [r0, #12]
    }
 80a18ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a18d2:	4718      	bx	r3

080a18d4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a18d4:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a18d6:	6800      	ldr	r0, [r0, #0]
 80a18d8:	f100 0110 	add.w	r1, r0, #16
 80a18dc:	f7ff fff1 	bl	80a18c2 <_ZNKSt8functionIFvRKbEEclES1_>
      }
 80a18e0:	bd08      	pop	{r3, pc}
	...

080a18e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 80a18e4:	b538      	push	{r3, r4, r5, lr}
 80a18e6:	2300      	movs	r3, #0
 80a18e8:	4604      	mov	r4, r0
 80a18ea:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a18ec:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 80a18ee:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a18f0:	f7fe fbd3 	bl	80a009a <_Znwj>
 80a18f4:	b128      	cbz	r0, 80a1902 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 80a18f6:	2301      	movs	r3, #1
 80a18f8:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 80a18fc:	4b02      	ldr	r3, [pc, #8]	; (80a1908 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a18fe:	60c5      	str	r5, [r0, #12]
 80a1900:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a1902:	6020      	str	r0, [r4, #0]
	}
 80a1904:	4620      	mov	r0, r4
 80a1906:	bd38      	pop	{r3, r4, r5, pc}
 80a1908:	080a56c4 	.word	0x080a56c4

080a190c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 80a190c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a190e:	2300      	movs	r3, #0
 80a1910:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 80a1912:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a1914:	4604      	mov	r4, r0
 80a1916:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a1918:	b12b      	cbz	r3, 80a1926 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a191a:	2202      	movs	r2, #2
 80a191c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a191e:	68eb      	ldr	r3, [r5, #12]
 80a1920:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a1922:	68ab      	ldr	r3, [r5, #8]
 80a1924:	60a3      	str	r3, [r4, #8]
    }
 80a1926:	4620      	mov	r0, r4
 80a1928:	bd38      	pop	{r3, r4, r5, pc}
	...

080a192c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 80a192c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a192e:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
 80a1930:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a1932:	4668      	mov	r0, sp
 80a1934:	f7ff ff22 	bl	80a177c <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a1938:	f04f 0302 	mov.w	r3, #2
 80a193c:	e8d4 2f4f 	ldrexb	r2, [r4]
 80a1940:	2a00      	cmp	r2, #0
 80a1942:	d103      	bne.n	80a194c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 80a1944:	e8c4 3f41 	strexb	r1, r3, [r4]
 80a1948:	2900      	cmp	r1, #0
 80a194a:	d1f7      	bne.n	80a193c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 80a194c:	d125      	bne.n	80a199a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
 80a194e:	f104 050c 	add.w	r5, r4, #12
 80a1952:	4669      	mov	r1, sp
 80a1954:	4628      	mov	r0, r5
 80a1956:	f7ff ff11 	bl	80a177c <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 80a195a:	2301      	movs	r3, #1
 80a195c:	f3bf 8f5b 	dmb	ish
 80a1960:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a1962:	2000      	movs	r0, #0
 80a1964:	f3bf 8f5b 	dmb	ish
 80a1968:	f104 0308 	add.w	r3, r4, #8
 80a196c:	e853 6f00 	ldrex	r6, [r3]
 80a1970:	e843 0200 	strex	r2, r0, [r3]
 80a1974:	2a00      	cmp	r2, #0
 80a1976:	d1f9      	bne.n	80a196c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
 80a1978:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a197c:	b16e      	cbz	r6, 80a199a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
 80a197e:	f7ff fdef 	bl	80a1560 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a1982:	b178      	cbz	r0, 80a19a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a1984:	4629      	mov	r1, r5
 80a1986:	4630      	mov	r0, r6
 80a1988:	f7ff ff8b 	bl	80a18a2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 80a198c:	4630      	mov	r0, r6
 80a198e:	f7fe fe05 	bl	80a059c <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a1992:	2110      	movs	r1, #16
 80a1994:	4630      	mov	r0, r6
 80a1996:	f7fe fb84 	bl	80a00a2 <_ZdlPvj>
        p_->setError(std::move(error));
 80a199a:	4668      	mov	r0, sp
 80a199c:	f7ff fefb 	bl	80a1796 <_ZN8particle5ErrorD1Ev>
    }
 80a19a0:	b009      	add	sp, #36	; 0x24
 80a19a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a19a4:	4631      	mov	r1, r6
 80a19a6:	a802      	add	r0, sp, #8
 80a19a8:	f7ff ffb0 	bl	80a190c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a19ac:	68e0      	ldr	r0, [r4, #12]
 80a19ae:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a19b2:	b108      	cbz	r0, 80a19b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
 80a19b4:	f003 fcd4 	bl	80a5360 <strdup>
        type_(type) {
 80a19b8:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a19ba:	2010      	movs	r0, #16
 80a19bc:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a19c0:	f7fe fb6b 	bl	80a009a <_Znwj>
 80a19c4:	4605      	mov	r5, r0
 80a19c6:	b1e8      	cbz	r0, 80a1a04 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
 80a19c8:	2700      	movs	r7, #0
 80a19ca:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a19cc:	2018      	movs	r0, #24
 80a19ce:	f7fe fb64 	bl	80a009a <_Znwj>
 80a19d2:	4604      	mov	r4, r0
 80a19d4:	b188      	cbz	r0, 80a19fa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
 80a19d6:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a19d8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a19da:	a802      	add	r0, sp, #8
 80a19dc:	f7ff ff50 	bl	80a1880 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a19e0:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a19e2:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a19e4:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a19e6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a19e8:	9204      	str	r2, [sp, #16]
 80a19ea:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a19ec:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a19ee:	60e3      	str	r3, [r4, #12]
 80a19f0:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 80a19f4:	9205      	str	r2, [sp, #20]
 80a19f6:	f7ff fec1 	bl	80a177c <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 80a19fa:	4b08      	ldr	r3, [pc, #32]	; (80a1a1c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a19fc:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a19fe:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a1a00:	4b07      	ldr	r3, [pc, #28]	; (80a1a20 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
 80a1a02:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 80a1a04:	a806      	add	r0, sp, #24
 80a1a06:	f7ff fec6 	bl	80a1796 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a1a0a:	a802      	add	r0, sp, #8
 80a1a0c:	f7fe fdc6 	bl	80a059c <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a1a10:	2200      	movs	r2, #0
 80a1a12:	4629      	mov	r1, r5
 80a1a14:	4803      	ldr	r0, [pc, #12]	; (80a1a24 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
 80a1a16:	f7ff fdab 	bl	80a1570 <application_thread_invoke>
 80a1a1a:	e7b7      	b.n	80a198c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
 80a1a1c:	080a18b5 	.word	0x080a18b5
 80a1a20:	080a1b41 	.word	0x080a1b41
 80a1a24:	080a1739 	.word	0x080a1739

080a1a28 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a1a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a1a2c:	b08a      	sub	sp, #40	; 0x28
 80a1a2e:	4605      	mov	r5, r0
 80a1a30:	460c      	mov	r4, r1
 80a1a32:	4617      	mov	r7, r2
 80a1a34:	4698      	mov	r8, r3
 80a1a36:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a1a3a:	f7ff fdc5 	bl	80a15c8 <spark_cloud_flag_connected>
 80a1a3e:	ae07      	add	r6, sp, #28
    if (!connected()) {
 80a1a40:	4682      	mov	sl, r0
 80a1a42:	bb38      	cbnz	r0, 80a1a94 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 80a1a44:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a1a48:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a1a4a:	a905      	add	r1, sp, #20
 80a1a4c:	4630      	mov	r0, r6
 80a1a4e:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a1a52:	f7ff fe93 	bl	80a177c <_ZN8particle5ErrorC1EOS0_>
 80a1a56:	2014      	movs	r0, #20
 80a1a58:	f7fe fb1f 	bl	80a009a <_Znwj>
 80a1a5c:	4604      	mov	r4, r0
 80a1a5e:	b148      	cbz	r0, 80a1a74 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a1a60:	2302      	movs	r3, #2
 80a1a62:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a1a64:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a1a66:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a1a6a:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 80a1a6c:	4631      	mov	r1, r6
 80a1a6e:	300c      	adds	r0, #12
 80a1a70:	f7ff fe84 	bl	80a177c <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a1a74:	4628      	mov	r0, r5
	: __shared_count(__p)
 80a1a76:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a1a78:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 80a1a7c:	f7ff ff32 	bl	80a18e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a1a80:	4630      	mov	r0, r6
 80a1a82:	f7ff fe88 	bl	80a1796 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a1a86:	a805      	add	r0, sp, #20
 80a1a88:	f7ff fe85 	bl	80a1796 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
 80a1a8c:	4628      	mov	r0, r5
 80a1a8e:	b00a      	add	sp, #40	; 0x28
 80a1a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d.size = sizeof(spark_send_event_data);
 80a1a94:	230c      	movs	r3, #12
    spark_send_event_data d = {};
 80a1a96:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a1a9a:	2014      	movs	r0, #20
 80a1a9c:	e9cd aa08 	strd	sl, sl, [sp, #32]
    d.size = sizeof(spark_send_event_data);
 80a1aa0:	9307      	str	r3, [sp, #28]
 80a1aa2:	f7fe fafa 	bl	80a009a <_Znwj>
 80a1aa6:	4601      	mov	r1, r0
 80a1aa8:	b128      	cbz	r0, 80a1ab6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a1aaa:	e9c0 aa01 	strd	sl, sl, [r0, #4]
 80a1aae:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a1ab2:	f880 a001 	strb.w	sl, [r0, #1]
 80a1ab6:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a1ab8:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 80a1aba:	f7ff ff13 	bl	80a18e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 80a1abe:	4b1f      	ldr	r3, [pc, #124]	; (80a1b3c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x114>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a1ac0:	2008      	movs	r0, #8
 80a1ac2:	9308      	str	r3, [sp, #32]
 80a1ac4:	f7fe fae9 	bl	80a009a <_Znwj>
 80a1ac8:	4682      	mov	sl, r0
 80a1aca:	b110      	cbz	r0, 80a1ad2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xaa>
 80a1acc:	a903      	add	r1, sp, #12
 80a1ace:	f7ff feb3 	bl	80a1838 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a1ad2:	4642      	mov	r2, r8
 80a1ad4:	4639      	mov	r1, r7
 80a1ad6:	4620      	mov	r0, r4
 80a1ad8:	9600      	str	r6, [sp, #0]
 80a1ada:	fa5f f389 	uxtb.w	r3, r9
    d.handler_data = p.dataPtr();
 80a1ade:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a1ae2:	f7ff fd79 	bl	80a15d8 <spark_send_event>
 80a1ae6:	b9b8      	cbnz	r0, 80a1b18 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf0>
	return __atomic_load_n(&_M_i, int(__m));
 80a1ae8:	9b03      	ldr	r3, [sp, #12]
 80a1aea:	785b      	ldrb	r3, [r3, #1]
 80a1aec:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a1af0:	b993      	cbnz	r3, 80a1b18 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf0>
 80a1af2:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 80a1af6:	a905      	add	r1, sp, #20
 80a1af8:	a803      	add	r0, sp, #12
 80a1afa:	9205      	str	r2, [sp, #20]
 80a1afc:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a1b00:	f7ff ff14 	bl	80a192c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a1b04:	a805      	add	r0, sp, #20
 80a1b06:	f7ff fe46 	bl	80a1796 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a1b0a:	a805      	add	r0, sp, #20
 80a1b0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a1b0e:	f7ff fe9c 	bl	80a184a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 80a1b12:	a806      	add	r0, sp, #24
 80a1b14:	f7ff f93a 	bl	80a0d8c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1b18:	a903      	add	r1, sp, #12
 80a1b1a:	a805      	add	r0, sp, #20
 80a1b1c:	f7ff fe8c 	bl	80a1838 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a1b20:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a1b22:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a1b24:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 80a1b26:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a1b28:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 80a1b2a:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 80a1b2c:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 80a1b2e:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 80a1b30:	f7ff f92c 	bl	80a0d8c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1b34:	a804      	add	r0, sp, #16
 80a1b36:	f7ff f929 	bl	80a0d8c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 80a1b3a:	e7a7      	b.n	80a1a8c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 80a1b3c:	080a1bbd 	.word	0x080a1bbd

080a1b40 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
 80a1b40:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80a1b42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1b44:	4605      	mov	r5, r0
	switch (__op)
 80a1b46:	d103      	bne.n	80a1b50 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 80a1b48:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80a1b4a:	6003      	str	r3, [r0, #0]
      }
 80a1b4c:	2000      	movs	r0, #0
 80a1b4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
 80a1b50:	2a02      	cmp	r2, #2
 80a1b52:	d010      	beq.n	80a1b76 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 80a1b54:	2a03      	cmp	r2, #3
 80a1b56:	d1f9      	bne.n	80a1b4c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 80a1b58:	6804      	ldr	r4, [r0, #0]
 80a1b5a:	2c00      	cmp	r4, #0
 80a1b5c:	d0f6      	beq.n	80a1b4c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
 80a1b5e:	f104 0010 	add.w	r0, r4, #16
 80a1b62:	f7ff fe18 	bl	80a1796 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a1b66:	4620      	mov	r0, r4
 80a1b68:	f7fe fd18 	bl	80a059c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a1b6c:	2118      	movs	r1, #24
 80a1b6e:	4620      	mov	r0, r4
 80a1b70:	f7fe fa97 	bl	80a00a2 <_ZdlPvj>
 80a1b74:	e7ea      	b.n	80a1b4c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 80a1b76:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 80a1b78:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a1b7a:	f7fe fa8e 	bl	80a009a <_Znwj>
 80a1b7e:	4604      	mov	r4, r0
 80a1b80:	b150      	cbz	r0, 80a1b98 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a1b82:	4631      	mov	r1, r6
 80a1b84:	f7ff fec2 	bl	80a190c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a1b88:	6930      	ldr	r0, [r6, #16]
 80a1b8a:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a1b8e:	b108      	cbz	r0, 80a1b94 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
 80a1b90:	f003 fbe6 	bl	80a5360 <strdup>
        type_(type) {
 80a1b94:	6120      	str	r0, [r4, #16]
 80a1b96:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 80a1b98:	602c      	str	r4, [r5, #0]
	}
 80a1b9a:	e7d7      	b.n	80a1b4c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

080a1b9c <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 80a1b9c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a1b9e:	2300      	movs	r3, #0
 80a1ba0:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 80a1ba2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a1ba4:	4604      	mov	r4, r0
 80a1ba6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a1ba8:	b12b      	cbz	r3, 80a1bb6 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a1baa:	2202      	movs	r2, #2
 80a1bac:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a1bae:	68eb      	ldr	r3, [r5, #12]
 80a1bb0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a1bb2:	68ab      	ldr	r3, [r5, #8]
 80a1bb4:	60a3      	str	r3, [r4, #8]
    }
 80a1bb6:	4620      	mov	r0, r4
 80a1bb8:	bd38      	pop	{r3, r4, r5, pc}
	...

080a1bbc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a1bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1bbe:	4604      	mov	r4, r0
 80a1bc0:	b089      	sub	sp, #36	; 0x24
 80a1bc2:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a1bc4:	a801      	add	r0, sp, #4
 80a1bc6:	4611      	mov	r1, r2
 80a1bc8:	f7ff fe3f 	bl	80a184a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a1bcc:	b1a4      	cbz	r4, 80a1bf8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a1bce:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a1bd0:	b11d      	cbz	r5, 80a1bda <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 80a1bd2:	4628      	mov	r0, r5
 80a1bd4:	f003 fbc4 	bl	80a5360 <strdup>
 80a1bd8:	4605      	mov	r5, r0
 80a1bda:	a801      	add	r0, sp, #4
 80a1bdc:	a903      	add	r1, sp, #12
        type_(type) {
 80a1bde:	9503      	str	r5, [sp, #12]
 80a1be0:	f8ad 4010 	strh.w	r4, [sp, #16]
 80a1be4:	f7ff fea2 	bl	80a192c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a1be8:	a803      	add	r0, sp, #12
 80a1bea:	f7ff fdd4 	bl	80a1796 <_ZN8particle5ErrorD1Ev>
 80a1bee:	a802      	add	r0, sp, #8
 80a1bf0:	f7ff f8cc 	bl	80a0d8c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a1bf4:	b009      	add	sp, #36	; 0x24
 80a1bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a1bf8:	2301      	movs	r3, #1
      { return _M_ptr; }
 80a1bfa:	9d01      	ldr	r5, [sp, #4]
 80a1bfc:	e8d5 2f4f 	ldrexb	r2, [r5]
 80a1c00:	2a00      	cmp	r2, #0
 80a1c02:	d103      	bne.n	80a1c0c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 80a1c04:	e8c5 3f41 	strexb	r1, r3, [r5]
 80a1c08:	2900      	cmp	r1, #0
 80a1c0a:	d1f7      	bne.n	80a1bfc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 80a1c0c:	d1ef      	bne.n	80a1bee <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 80a1c0e:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 80a1c10:	f3bf 8f5b 	dmb	ish
 80a1c14:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a1c16:	f3bf 8f5b 	dmb	ish
 80a1c1a:	1d2b      	adds	r3, r5, #4
 80a1c1c:	e853 6f00 	ldrex	r6, [r3]
 80a1c20:	e843 4200 	strex	r2, r4, [r3]
 80a1c24:	2a00      	cmp	r2, #0
 80a1c26:	d1f9      	bne.n	80a1c1c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
 80a1c28:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a1c2c:	2e00      	cmp	r6, #0
 80a1c2e:	d0de      	beq.n	80a1bee <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 80a1c30:	4620      	mov	r0, r4
 80a1c32:	f7ff fc95 	bl	80a1560 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a1c36:	4607      	mov	r7, r0
 80a1c38:	b160      	cbz	r0, 80a1c54 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a1c3a:	4630      	mov	r0, r6
 80a1c3c:	f105 010c 	add.w	r1, r5, #12
 80a1c40:	f7ff fe3f 	bl	80a18c2 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 80a1c44:	4630      	mov	r0, r6
 80a1c46:	f7fe fca9 	bl	80a059c <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a1c4a:	2110      	movs	r1, #16
 80a1c4c:	4630      	mov	r0, r6
 80a1c4e:	f7fe fa28 	bl	80a00a2 <_ZdlPvj>
 80a1c52:	e7cc      	b.n	80a1bee <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a1c54:	4631      	mov	r1, r6
 80a1c56:	a803      	add	r0, sp, #12
 80a1c58:	f7ff ffa0 	bl	80a1b9c <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a1c5c:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a1c5e:	2010      	movs	r0, #16
 80a1c60:	f88d 301c 	strb.w	r3, [sp, #28]
 80a1c64:	f7fe fa19 	bl	80a009a <_Znwj>
 80a1c68:	4605      	mov	r5, r0
 80a1c6a:	b1d0      	cbz	r0, 80a1ca2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
 80a1c6c:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1c6e:	2014      	movs	r0, #20
 80a1c70:	f7fe fa13 	bl	80a009a <_Znwj>
 80a1c74:	4604      	mov	r4, r0
 80a1c76:	b178      	cbz	r0, 80a1c98 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
	std::swap(_M_functor, __x._M_functor);
 80a1c78:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a1c7a:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a1c7c:	a803      	add	r0, sp, #12
 80a1c7e:	f7ff fdff 	bl	80a1880 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1c82:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a1c84:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1c86:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1c88:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 80a1c8a:	9205      	str	r2, [sp, #20]
 80a1c8c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1c8e:	60e3      	str	r3, [r4, #12]
 80a1c90:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 80a1c94:	9206      	str	r2, [sp, #24]
 80a1c96:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 80a1c98:	4b06      	ldr	r3, [pc, #24]	; (80a1cb4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1c9a:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a1c9c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a1c9e:	4b06      	ldr	r3, [pc, #24]	; (80a1cb8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 80a1ca0:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 80a1ca2:	a803      	add	r0, sp, #12
 80a1ca4:	f7fe fc7a 	bl	80a059c <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a1ca8:	2200      	movs	r2, #0
 80a1caa:	4629      	mov	r1, r5
 80a1cac:	4803      	ldr	r0, [pc, #12]	; (80a1cbc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
 80a1cae:	f7ff fc5f 	bl	80a1570 <application_thread_invoke>
 80a1cb2:	e7c7      	b.n	80a1c44 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
 80a1cb4:	080a18d5 	.word	0x080a18d5
 80a1cb8:	080a1cc1 	.word	0x080a1cc1
 80a1cbc:	080a1739 	.word	0x080a1739

080a1cc0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
 80a1cc0:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80a1cc2:	b570      	push	{r4, r5, r6, lr}
 80a1cc4:	4604      	mov	r4, r0
	switch (__op)
 80a1cc6:	d103      	bne.n	80a1cd0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 80a1cc8:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80a1cca:	6003      	str	r3, [r0, #0]
      }
 80a1ccc:	2000      	movs	r0, #0
 80a1cce:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
 80a1cd0:	2a02      	cmp	r2, #2
 80a1cd2:	d00c      	beq.n	80a1cee <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 80a1cd4:	2a03      	cmp	r2, #3
 80a1cd6:	d1f9      	bne.n	80a1ccc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 80a1cd8:	6804      	ldr	r4, [r0, #0]
 80a1cda:	2c00      	cmp	r4, #0
 80a1cdc:	d0f6      	beq.n	80a1ccc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
 80a1cde:	4620      	mov	r0, r4
 80a1ce0:	f7fe fc5c 	bl	80a059c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a1ce4:	2114      	movs	r1, #20
 80a1ce6:	4620      	mov	r0, r4
 80a1ce8:	f7fe f9db 	bl	80a00a2 <_ZdlPvj>
 80a1cec:	e7ee      	b.n	80a1ccc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 80a1cee:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 80a1cf0:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a1cf2:	f7fe f9d2 	bl	80a009a <_Znwj>
 80a1cf6:	4605      	mov	r5, r0
 80a1cf8:	b120      	cbz	r0, 80a1d04 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
 80a1cfa:	4631      	mov	r1, r6
 80a1cfc:	f7ff ff4e 	bl	80a1b9c <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a1d00:	7c33      	ldrb	r3, [r6, #16]
 80a1d02:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 80a1d04:	6025      	str	r5, [r4, #0]
	}
 80a1d06:	e7e1      	b.n	80a1ccc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

080a1d08 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a1d08:	4770      	bx	lr

080a1d0a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a1d0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1d0c:	4606      	mov	r6, r0
 80a1d0e:	4615      	mov	r5, r2
 80a1d10:	460c      	mov	r4, r1
 80a1d12:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1d14:	42bc      	cmp	r4, r7
 80a1d16:	d006      	beq.n	80a1d26 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a1d18:	6833      	ldr	r3, [r6, #0]
 80a1d1a:	4630      	mov	r0, r6
 80a1d1c:	689b      	ldr	r3, [r3, #8]
 80a1d1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a1d22:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a1d24:	e7f6      	b.n	80a1d14 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a1d26:	4628      	mov	r0, r5
 80a1d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1d2a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a1d2a:	2200      	movs	r2, #0
 80a1d2c:	7c00      	ldrb	r0, [r0, #16]
 80a1d2e:	f7ff bae5 	b.w	80a12fc <hal_i2c_write>

080a1d32 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a1d32:	2100      	movs	r1, #0
 80a1d34:	7c00      	ldrb	r0, [r0, #16]
 80a1d36:	f7ff bae9 	b.w	80a130c <hal_i2c_available>

080a1d3a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a1d3a:	2100      	movs	r1, #0
 80a1d3c:	7c00      	ldrb	r0, [r0, #16]
 80a1d3e:	f7ff baed 	b.w	80a131c <hal_i2c_read>

080a1d42 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a1d42:	2100      	movs	r1, #0
 80a1d44:	7c00      	ldrb	r0, [r0, #16]
 80a1d46:	f7ff baf1 	b.w	80a132c <hal_i2c_peek>

080a1d4a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a1d4a:	2100      	movs	r1, #0
 80a1d4c:	7c00      	ldrb	r0, [r0, #16]
 80a1d4e:	f7ff baf5 	b.w	80a133c <hal_i2c_flush>

080a1d52 <_ZN7TwoWireD0Ev>:
 80a1d52:	b510      	push	{r4, lr}
 80a1d54:	4604      	mov	r4, r0
 80a1d56:	2114      	movs	r1, #20
 80a1d58:	f7fe f9a3 	bl	80a00a2 <_ZdlPvj>
 80a1d5c:	4620      	mov	r0, r4
 80a1d5e:	bd10      	pop	{r4, pc}

080a1d60 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a1d60:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a1d62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1d66:	4604      	mov	r4, r0
 80a1d68:	4608      	mov	r0, r1
 80a1d6a:	2100      	movs	r1, #0
 80a1d6c:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a1d70:	4b03      	ldr	r3, [pc, #12]	; (80a1d80 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a1d72:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a1d74:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a1d76:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a1d78:	f7ff faf0 	bl	80a135c <hal_i2c_init>
}
 80a1d7c:	4620      	mov	r0, r4
 80a1d7e:	bd10      	pop	{r4, pc}
 80a1d80:	080a56e0 	.word	0x080a56e0

080a1d84 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a1d84:	4770      	bx	lr

080a1d86 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a1d86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1d88:	460e      	mov	r6, r1
 80a1d8a:	2400      	movs	r4, #0
 80a1d8c:	f100 0708 	add.w	r7, r0, #8
 80a1d90:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a1d92:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a1d96:	220a      	movs	r2, #10
 80a1d98:	4630      	mov	r0, r6
 80a1d9a:	f000 f922 	bl	80a1fe2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1d9e:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1da0:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a1da2:	d101      	bne.n	80a1da8 <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a1da4:	4620      	mov	r0, r4
 80a1da6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a1da8:	2c00      	cmp	r4, #0
 80a1daa:	d0f2      	beq.n	80a1d92 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a1dac:	212e      	movs	r1, #46	; 0x2e
 80a1dae:	4630      	mov	r0, r6
 80a1db0:	f000 f908 	bl	80a1fc4 <_ZN5Print5printEc>
 80a1db4:	4404      	add	r4, r0
 80a1db6:	e7ec      	b.n	80a1d92 <_ZNK9IPAddress7printToER5Print+0xc>

080a1db8 <_ZN9IPAddressD0Ev>:
 80a1db8:	b510      	push	{r4, lr}
 80a1dba:	4604      	mov	r4, r0
 80a1dbc:	2118      	movs	r1, #24
 80a1dbe:	f7fe f970 	bl	80a00a2 <_ZdlPvj>
 80a1dc2:	4620      	mov	r0, r4
 80a1dc4:	bd10      	pop	{r4, pc}
	...

080a1dc8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a1dc8:	b510      	push	{r4, lr}
 80a1dca:	4604      	mov	r4, r0
 80a1dcc:	4b04      	ldr	r3, [pc, #16]	; (80a1de0 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a1dce:	2211      	movs	r2, #17
 80a1dd0:	2100      	movs	r1, #0
 80a1dd2:	f840 3b04 	str.w	r3, [r0], #4
 80a1dd6:	f003 fa83 	bl	80a52e0 <memset>
}
 80a1dda:	4620      	mov	r0, r4
 80a1ddc:	bd10      	pop	{r4, pc}
 80a1dde:	bf00      	nop
 80a1de0:	080a5708 	.word	0x080a5708

080a1de4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a1de4:	4603      	mov	r3, r0
 80a1de6:	4a07      	ldr	r2, [pc, #28]	; (80a1e04 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a1de8:	b510      	push	{r4, lr}
 80a1dea:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a1dee:	f101 0210 	add.w	r2, r1, #16
 80a1df2:	f851 4b04 	ldr.w	r4, [r1], #4
 80a1df6:	4291      	cmp	r1, r2
 80a1df8:	f843 4b04 	str.w	r4, [r3], #4
 80a1dfc:	d1f9      	bne.n	80a1df2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a1dfe:	780a      	ldrb	r2, [r1, #0]
 80a1e00:	701a      	strb	r2, [r3, #0]
}
 80a1e02:	bd10      	pop	{r4, pc}
 80a1e04:	080a5708 	.word	0x080a5708

080a1e08 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t addr)
 80a1e08:	4a02      	ldr	r2, [pc, #8]	; (80a1e14 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = addr;
 80a1e0a:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a1e0e:	2204      	movs	r2, #4
 80a1e10:	7502      	strb	r2, [r0, #20]
}
 80a1e12:	4770      	bx	lr
 80a1e14:	080a5708 	.word	0x080a5708

080a1e18 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a1e18:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a1e1a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a1e1e:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a1e22:	2304      	movs	r3, #4
 80a1e24:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a1e28:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a1e2c:	6044      	str	r4, [r0, #4]
 80a1e2e:	7503      	strb	r3, [r0, #20]
}
 80a1e30:	bd10      	pop	{r4, pc}
	...

080a1e34 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a1e34:	b513      	push	{r0, r1, r4, lr}
 80a1e36:	4c04      	ldr	r4, [pc, #16]	; (80a1e48 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a1e38:	6004      	str	r4, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a1e3a:	f89d 4010 	ldrb.w	r4, [sp, #16]
 80a1e3e:	9400      	str	r4, [sp, #0]
 80a1e40:	f7ff ffea 	bl	80a1e18 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1e44:	b002      	add	sp, #8
 80a1e46:	bd10      	pop	{r4, pc}
 80a1e48:	080a5708 	.word	0x080a5708

080a1e4c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
 80a1e4c:	b507      	push	{r0, r1, r2, lr}
 80a1e4e:	4b06      	ldr	r3, [pc, #24]	; (80a1e68 <_ZN9IPAddressC1EPKh+0x1c>)
 80a1e50:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
 80a1e52:	78cb      	ldrb	r3, [r1, #3]
 80a1e54:	9300      	str	r3, [sp, #0]
 80a1e56:	788b      	ldrb	r3, [r1, #2]
 80a1e58:	784a      	ldrb	r2, [r1, #1]
 80a1e5a:	7809      	ldrb	r1, [r1, #0]
 80a1e5c:	f7ff ffdc 	bl	80a1e18 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1e60:	b003      	add	sp, #12
 80a1e62:	f85d fb04 	ldr.w	pc, [sp], #4
 80a1e66:	bf00      	nop
 80a1e68:	080a5708 	.word	0x080a5708

080a1e6c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a1e6c:	4b01      	ldr	r3, [pc, #4]	; (80a1e74 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a1e6e:	4a02      	ldr	r2, [pc, #8]	; (80a1e78 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a1e70:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a1e72:	4770      	bx	lr
 80a1e74:	2000228c 	.word	0x2000228c
 80a1e78:	080a5714 	.word	0x080a5714

080a1e7c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a1e7c:	2300      	movs	r3, #0
 80a1e7e:	6840      	ldr	r0, [r0, #4]
 80a1e80:	461a      	mov	r2, r3
 80a1e82:	f7ff bbb9 	b.w	80a15f8 <network_connect>

080a1e86 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a1e86:	2200      	movs	r2, #0
 80a1e88:	2102      	movs	r1, #2
 80a1e8a:	6840      	ldr	r0, [r0, #4]
 80a1e8c:	f7ff bbc4 	b.w	80a1618 <network_disconnect>

080a1e90 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a1e90:	2200      	movs	r2, #0
 80a1e92:	6840      	ldr	r0, [r0, #4]
 80a1e94:	4611      	mov	r1, r2
 80a1e96:	f7ff bbb7 	b.w	80a1608 <network_connecting>

080a1e9a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a1e9a:	2200      	movs	r2, #0
 80a1e9c:	6840      	ldr	r0, [r0, #4]
 80a1e9e:	4611      	mov	r1, r2
 80a1ea0:	f7ff bbc2 	b.w	80a1628 <network_ready>

080a1ea4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a1ea4:	2300      	movs	r3, #0
 80a1ea6:	6840      	ldr	r0, [r0, #4]
 80a1ea8:	461a      	mov	r2, r3
 80a1eaa:	4619      	mov	r1, r3
 80a1eac:	f7ff bbc4 	b.w	80a1638 <network_on>

080a1eb0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a1eb0:	2300      	movs	r3, #0
 80a1eb2:	6840      	ldr	r0, [r0, #4]
 80a1eb4:	461a      	mov	r2, r3
 80a1eb6:	4619      	mov	r1, r3
 80a1eb8:	f7ff bbc6 	b.w	80a1648 <network_off>

080a1ebc <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a1ebc:	2100      	movs	r1, #0
 80a1ebe:	6840      	ldr	r0, [r0, #4]
 80a1ec0:	f7ff bbea 	b.w	80a1698 <network_is_on>

080a1ec4 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a1ec4:	2100      	movs	r1, #0
 80a1ec6:	6840      	ldr	r0, [r0, #4]
 80a1ec8:	f7ff bbee 	b.w	80a16a8 <network_is_off>

080a1ecc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a1ecc:	2200      	movs	r2, #0
 80a1ece:	6840      	ldr	r0, [r0, #4]
 80a1ed0:	f081 0101 	eor.w	r1, r1, #1
 80a1ed4:	f7ff bbc0 	b.w	80a1658 <network_listen>

080a1ed8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a1ed8:	2200      	movs	r2, #0
 80a1eda:	6840      	ldr	r0, [r0, #4]
 80a1edc:	f7ff bbcc 	b.w	80a1678 <network_set_listen_timeout>

080a1ee0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a1ee0:	2200      	movs	r2, #0
 80a1ee2:	6840      	ldr	r0, [r0, #4]
 80a1ee4:	4611      	mov	r1, r2
 80a1ee6:	f7ff bbcf 	b.w	80a1688 <network_get_listen_timeout>

080a1eea <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a1eea:	2200      	movs	r2, #0
 80a1eec:	6840      	ldr	r0, [r0, #4]
 80a1eee:	4611      	mov	r1, r2
 80a1ef0:	f7ff bbba 	b.w	80a1668 <network_listening>

080a1ef4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a1ef4:	b570      	push	{r4, r5, r6, lr}
 80a1ef6:	4615      	mov	r5, r2
 80a1ef8:	b08e      	sub	sp, #56	; 0x38
 80a1efa:	4604      	mov	r4, r0
    IPAddress addr;
 80a1efc:	a808      	add	r0, sp, #32
 80a1efe:	f7ff ff63 	bl	80a1dc8 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a1f02:	2211      	movs	r2, #17
 80a1f04:	2100      	movs	r1, #0
 80a1f06:	a803      	add	r0, sp, #12
 80a1f08:	f003 f9ea 	bl	80a52e0 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1f0c:	2600      	movs	r6, #0
 80a1f0e:	4628      	mov	r0, r5
 80a1f10:	f003 fa41 	bl	80a5396 <strlen>
 80a1f14:	4b0a      	ldr	r3, [pc, #40]	; (80a1f40 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a1f16:	9600      	str	r6, [sp, #0]
 80a1f18:	b281      	uxth	r1, r0
 80a1f1a:	685b      	ldr	r3, [r3, #4]
 80a1f1c:	4628      	mov	r0, r5
 80a1f1e:	aa03      	add	r2, sp, #12
 80a1f20:	f7ff fb06 	bl	80a1530 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1f24:	b130      	cbz	r0, 80a1f34 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a1f26:	4631      	mov	r1, r6
 80a1f28:	4620      	mov	r0, r4
 80a1f2a:	f7ff ff6d 	bl	80a1e08 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a1f2e:	4620      	mov	r0, r4
 80a1f30:	b00e      	add	sp, #56	; 0x38
 80a1f32:	bd70      	pop	{r4, r5, r6, pc}
 80a1f34:	4620      	mov	r0, r4
 80a1f36:	a903      	add	r1, sp, #12
 80a1f38:	f7ff ff54 	bl	80a1de4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a1f3c:	e7f7      	b.n	80a1f2e <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a1f3e:	bf00      	nop
 80a1f40:	200025f0 	.word	0x200025f0

080a1f44 <_ZN5spark12NetworkClass4fromEm>:
}
 80a1f44:	4a03      	ldr	r2, [pc, #12]	; (80a1f54 <_ZN5spark12NetworkClass4fromEm+0x10>)
 80a1f46:	4b04      	ldr	r3, [pc, #16]	; (80a1f58 <_ZN5spark12NetworkClass4fromEm+0x14>)
 80a1f48:	2804      	cmp	r0, #4
 80a1f4a:	bf14      	ite	ne
 80a1f4c:	4610      	movne	r0, r2
 80a1f4e:	4618      	moveq	r0, r3
 80a1f50:	4770      	bx	lr
 80a1f52:	bf00      	nop
 80a1f54:	20002290 	.word	0x20002290
 80a1f58:	200025f0 	.word	0x200025f0

080a1f5c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a1f5c:	4b02      	ldr	r3, [pc, #8]	; (80a1f68 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a1f5e:	4a03      	ldr	r2, [pc, #12]	; (80a1f6c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a1f60:	601a      	str	r2, [r3, #0]
 80a1f62:	2200      	movs	r2, #0
 80a1f64:	605a      	str	r2, [r3, #4]

} // spark
 80a1f66:	4770      	bx	lr
 80a1f68:	20002290 	.word	0x20002290
 80a1f6c:	080a5720 	.word	0x080a5720

080a1f70 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a1f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1f72:	4606      	mov	r6, r0
 80a1f74:	460d      	mov	r5, r1
  size_t n = 0;
 80a1f76:	2400      	movs	r4, #0
 80a1f78:	188f      	adds	r7, r1, r2
  while (size--) {
 80a1f7a:	42bd      	cmp	r5, r7
 80a1f7c:	d00c      	beq.n	80a1f98 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a1f7e:	6833      	ldr	r3, [r6, #0]
 80a1f80:	4630      	mov	r0, r6
 80a1f82:	689b      	ldr	r3, [r3, #8]
 80a1f84:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a1f88:	4798      	blx	r3
     if (chunk>=0)
 80a1f8a:	1e03      	subs	r3, r0, #0
 80a1f8c:	db01      	blt.n	80a1f92 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a1f8e:	441c      	add	r4, r3
  while (size--) {
 80a1f90:	e7f3      	b.n	80a1f7a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a1f92:	2c00      	cmp	r4, #0
 80a1f94:	bf08      	it	eq
 80a1f96:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a1f98:	4620      	mov	r0, r4
 80a1f9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1f9c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 80a1f9c:	b570      	push	{r4, r5, r6, lr}
 80a1f9e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a1fa0:	460c      	mov	r4, r1
    }
 80a1fa2:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a1fa4:	b149      	cbz	r1, 80a1fba <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a1fa6:	f003 f9f6 	bl	80a5396 <strlen>
 80a1faa:	682b      	ldr	r3, [r5, #0]
 80a1fac:	4602      	mov	r2, r0
 80a1fae:	4621      	mov	r1, r4
 80a1fb0:	4628      	mov	r0, r5
    }
 80a1fb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a1fb6:	68db      	ldr	r3, [r3, #12]
 80a1fb8:	4718      	bx	r3
    }
 80a1fba:	bd70      	pop	{r4, r5, r6, pc}

080a1fbc <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 80a1fbc:	b508      	push	{r3, lr}
  return write(str);
 80a1fbe:	f7ff ffed 	bl	80a1f9c <_ZN5Print5writeEPKc>
}
 80a1fc2:	bd08      	pop	{r3, pc}

080a1fc4 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 80a1fc4:	6803      	ldr	r3, [r0, #0]
 80a1fc6:	689b      	ldr	r3, [r3, #8]
 80a1fc8:	4718      	bx	r3

080a1fca <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1fca:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a1fcc:	210d      	movs	r1, #13
{
 80a1fce:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a1fd0:	f7ff fff8 	bl	80a1fc4 <_ZN5Print5printEc>
  n += print('\n');
 80a1fd4:	210a      	movs	r1, #10
  size_t n = print('\r');
 80a1fd6:	4604      	mov	r4, r0
  n += print('\n');
 80a1fd8:	4628      	mov	r0, r5
 80a1fda:	f7ff fff3 	bl	80a1fc4 <_ZN5Print5printEc>
  return n;
}
 80a1fde:	4420      	add	r0, r4
 80a1fe0:	bd38      	pop	{r3, r4, r5, pc}

080a1fe2 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a1fe2:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a1fe4:	2a01      	cmp	r2, #1
 80a1fe6:	bf98      	it	ls
 80a1fe8:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a1fea:	b530      	push	{r4, r5, lr}
 80a1fec:	b08b      	sub	sp, #44	; 0x2c
 80a1fee:	460c      	mov	r4, r1
  *str = '\0';
 80a1ff0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a1ff4:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a1ff6:	4625      	mov	r5, r4
 80a1ff8:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a1ffc:	fb04 5312 	mls	r3, r4, r2, r5
 80a2000:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a2002:	2b09      	cmp	r3, #9
 80a2004:	bf94      	ite	ls
 80a2006:	3330      	addls	r3, #48	; 0x30
 80a2008:	3337      	addhi	r3, #55	; 0x37
 80a200a:	b2db      	uxtb	r3, r3
  } while(n);
 80a200c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a200e:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a2012:	d9f0      	bls.n	80a1ff6 <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a2014:	f7ff ffc2 	bl	80a1f9c <_ZN5Print5writeEPKc>
}
 80a2018:	b00b      	add	sp, #44	; 0x2c
 80a201a:	bd30      	pop	{r4, r5, pc}

080a201c <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a201c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a2020:	4605      	mov	r5, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a2022:	4619      	mov	r1, r3
 80a2024:	4610      	mov	r0, r2
{
 80a2026:	4692      	mov	sl, r2
 80a2028:	461f      	mov	r7, r3
 80a202a:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
  if (isnan(number)) return print("nan");
 80a202e:	f003 f8c7 	bl	80a51c0 <__aeabi_dcmpun>
 80a2032:	b140      	cbz	r0, 80a2046 <_ZN5Print10printFloatEdh+0x2a>
  return write(str);
 80a2034:	4951      	ldr	r1, [pc, #324]	; (80a217c <_ZN5Print10printFloatEdh+0x160>)
 80a2036:	4628      	mov	r0, r5
 80a2038:	f7ff ffb0 	bl	80a1f9c <_ZN5Print5writeEPKc>
 80a203c:	4604      	mov	r4, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
 80a203e:	4620      	mov	r0, r4
 80a2040:	b003      	add	sp, #12
 80a2042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 80a2046:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
 80a204a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80a204e:	4650      	mov	r0, sl
 80a2050:	4621      	mov	r1, r4
 80a2052:	4b4b      	ldr	r3, [pc, #300]	; (80a2180 <_ZN5Print10printFloatEdh+0x164>)
 80a2054:	f003 f8b4 	bl	80a51c0 <__aeabi_dcmpun>
 80a2058:	b948      	cbnz	r0, 80a206e <_ZN5Print10printFloatEdh+0x52>
 80a205a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80a205e:	4650      	mov	r0, sl
 80a2060:	4621      	mov	r1, r4
 80a2062:	4b47      	ldr	r3, [pc, #284]	; (80a2180 <_ZN5Print10printFloatEdh+0x164>)
 80a2064:	f003 f88e 	bl	80a5184 <__aeabi_dcmple>
 80a2068:	b908      	cbnz	r0, 80a206e <_ZN5Print10printFloatEdh+0x52>
  return write(str);
 80a206a:	4946      	ldr	r1, [pc, #280]	; (80a2184 <_ZN5Print10printFloatEdh+0x168>)
 80a206c:	e7e3      	b.n	80a2036 <_ZN5Print10printFloatEdh+0x1a>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 80a206e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a2072:	4650      	mov	r0, sl
 80a2074:	4639      	mov	r1, r7
 80a2076:	4b44      	ldr	r3, [pc, #272]	; (80a2188 <_ZN5Print10printFloatEdh+0x16c>)
 80a2078:	f003 f898 	bl	80a51ac <__aeabi_dcmpgt>
 80a207c:	b108      	cbz	r0, 80a2082 <_ZN5Print10printFloatEdh+0x66>
  return write(str);
 80a207e:	4943      	ldr	r1, [pc, #268]	; (80a218c <_ZN5Print10printFloatEdh+0x170>)
 80a2080:	e7d9      	b.n	80a2036 <_ZN5Print10printFloatEdh+0x1a>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 80a2082:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a2086:	4650      	mov	r0, sl
 80a2088:	4639      	mov	r1, r7
 80a208a:	4b41      	ldr	r3, [pc, #260]	; (80a2190 <_ZN5Print10printFloatEdh+0x174>)
 80a208c:	f003 f870 	bl	80a5170 <__aeabi_dcmplt>
 80a2090:	2800      	cmp	r0, #0
 80a2092:	d1f4      	bne.n	80a207e <_ZN5Print10printFloatEdh+0x62>
  if (number < 0.0)
 80a2094:	2200      	movs	r2, #0
 80a2096:	2300      	movs	r3, #0
 80a2098:	4650      	mov	r0, sl
 80a209a:	4639      	mov	r1, r7
 80a209c:	f003 f868 	bl	80a5170 <__aeabi_dcmplt>
 80a20a0:	4604      	mov	r4, r0
 80a20a2:	b130      	cbz	r0, 80a20b2 <_ZN5Print10printFloatEdh+0x96>
     n += print('-');
 80a20a4:	212d      	movs	r1, #45	; 0x2d
 80a20a6:	4628      	mov	r0, r5
 80a20a8:	f7ff ff8c 	bl	80a1fc4 <_ZN5Print5printEc>
 80a20ac:	4604      	mov	r4, r0
     number = -number;
 80a20ae:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
  size_t n = 0;
 80a20b2:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
 80a20b6:	2000      	movs	r0, #0
    rounding /= 10.0;
 80a20b8:	f04f 0800 	mov.w	r8, #0
  double rounding = 0.5;
 80a20bc:	4935      	ldr	r1, [pc, #212]	; (80a2194 <_ZN5Print10printFloatEdh+0x178>)
    rounding /= 10.0;
 80a20be:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 80a2198 <_ZN5Print10printFloatEdh+0x17c>
  for (uint8_t i=0; i<digits; ++i)
 80a20c2:	fa5f f38b 	uxtb.w	r3, fp
 80a20c6:	429e      	cmp	r6, r3
 80a20c8:	d906      	bls.n	80a20d8 <_ZN5Print10printFloatEdh+0xbc>
    rounding /= 10.0;
 80a20ca:	4642      	mov	r2, r8
 80a20cc:	464b      	mov	r3, r9
 80a20ce:	f002 ff07 	bl	80a4ee0 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
 80a20d2:	f10b 0b01 	add.w	fp, fp, #1
 80a20d6:	e7f4      	b.n	80a20c2 <_ZN5Print10printFloatEdh+0xa6>
  number += rounding;
 80a20d8:	463b      	mov	r3, r7
 80a20da:	4652      	mov	r2, sl
 80a20dc:	f002 fc20 	bl	80a4920 <__adddf3>
 80a20e0:	4689      	mov	r9, r1
 80a20e2:	4680      	mov	r8, r0
  unsigned long int_part = (unsigned long)number;
 80a20e4:	f003 f8aa 	bl	80a523c <__aeabi_d2uiz>
 80a20e8:	4607      	mov	r7, r0
  double remainder = number - (double)int_part;
 80a20ea:	f002 fd55 	bl	80a4b98 <__aeabi_ui2d>
 80a20ee:	4602      	mov	r2, r0
 80a20f0:	460b      	mov	r3, r1
 80a20f2:	4640      	mov	r0, r8
 80a20f4:	4649      	mov	r1, r9
 80a20f6:	f002 fc11 	bl	80a491c <__aeabi_dsub>
        return printNumber(val, base) + t;
 80a20fa:	220a      	movs	r2, #10
 80a20fc:	4680      	mov	r8, r0
 80a20fe:	4689      	mov	r9, r1
 80a2100:	4628      	mov	r0, r5
 80a2102:	4639      	mov	r1, r7
 80a2104:	f7ff ff6d 	bl	80a1fe2 <_ZN5Print11printNumberEmh>
  n += print(int_part);
 80a2108:	4404      	add	r4, r0
  if (digits > 0) {
 80a210a:	2e00      	cmp	r6, #0
 80a210c:	d097      	beq.n	80a203e <_ZN5Print10printFloatEdh+0x22>
  return write(str);
 80a210e:	4628      	mov	r0, r5
 80a2110:	4922      	ldr	r1, [pc, #136]	; (80a219c <_ZN5Print10printFloatEdh+0x180>)
 80a2112:	f7ff ff43 	bl	80a1f9c <_ZN5Print5writeEPKc>
    remainder *= 10.0;
 80a2116:	f04f 0a00 	mov.w	sl, #0
 80a211a:	f8df b07c 	ldr.w	fp, [pc, #124]	; 80a2198 <_ZN5Print10printFloatEdh+0x17c>
    n += print(".");
 80a211e:	4404      	add	r4, r0
  while (digits-- > 0)
 80a2120:	2e00      	cmp	r6, #0
 80a2122:	d08c      	beq.n	80a203e <_ZN5Print10printFloatEdh+0x22>
    remainder *= 10.0;
 80a2124:	4652      	mov	r2, sl
 80a2126:	465b      	mov	r3, fp
 80a2128:	4640      	mov	r0, r8
 80a212a:	4649      	mov	r1, r9
 80a212c:	f002 fdae 	bl	80a4c8c <__aeabi_dmul>
 80a2130:	4680      	mov	r8, r0
 80a2132:	4689      	mov	r9, r1
    int toPrint = int(remainder);
 80a2134:	f003 f85a 	bl	80a51ec <__aeabi_d2iz>
        if (n < 0 && base == 10) {
 80a2138:	1e07      	subs	r7, r0, #0
 80a213a:	da1b      	bge.n	80a2174 <_ZN5Print10printFloatEdh+0x158>
            t = print('-');
 80a213c:	212d      	movs	r1, #45	; 0x2d
 80a213e:	4628      	mov	r0, r5
 80a2140:	f7ff ff40 	bl	80a1fc4 <_ZN5Print5printEc>
 80a2144:	4603      	mov	r3, r0
            val = -n;
 80a2146:	4279      	negs	r1, r7
        return printNumber(val, base) + t;
 80a2148:	220a      	movs	r2, #10
 80a214a:	4628      	mov	r0, r5
 80a214c:	9301      	str	r3, [sp, #4]
 80a214e:	f7ff ff48 	bl	80a1fe2 <_ZN5Print11printNumberEmh>
 80a2152:	9b01      	ldr	r3, [sp, #4]
 80a2154:	3e01      	subs	r6, #1
 80a2156:	4403      	add	r3, r0
    remainder -= toPrint;
 80a2158:	4638      	mov	r0, r7
    n += print(toPrint);
 80a215a:	441c      	add	r4, r3
    remainder -= toPrint;
 80a215c:	f002 fd2c 	bl	80a4bb8 <__aeabi_i2d>
 80a2160:	4602      	mov	r2, r0
 80a2162:	460b      	mov	r3, r1
 80a2164:	4640      	mov	r0, r8
 80a2166:	4649      	mov	r1, r9
 80a2168:	f002 fbd8 	bl	80a491c <__aeabi_dsub>
 80a216c:	b2f6      	uxtb	r6, r6
 80a216e:	4680      	mov	r8, r0
 80a2170:	4689      	mov	r9, r1
  while (digits-- > 0)
 80a2172:	e7d5      	b.n	80a2120 <_ZN5Print10printFloatEdh+0x104>
            val = n;
 80a2174:	4639      	mov	r1, r7
        size_t t = 0;
 80a2176:	2300      	movs	r3, #0
 80a2178:	e7e6      	b.n	80a2148 <_ZN5Print10printFloatEdh+0x12c>
 80a217a:	bf00      	nop
 80a217c:	080a5754 	.word	0x080a5754
 80a2180:	7fefffff 	.word	0x7fefffff
 80a2184:	080a5758 	.word	0x080a5758
 80a2188:	41efffff 	.word	0x41efffff
 80a218c:	080a575c 	.word	0x080a575c
 80a2190:	c1efffff 	.word	0xc1efffff
 80a2194:	3fe00000 	.word	0x3fe00000
 80a2198:	40240000 	.word	0x40240000
 80a219c:	080a5760 	.word	0x080a5760

080a21a0 <_ZN5Print7printlnEdi>:
{
 80a21a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return printFloat(n, digits);
 80a21a2:	f89d 1018 	ldrb.w	r1, [sp, #24]
{
 80a21a6:	4605      	mov	r5, r0
  return printFloat(n, digits);
 80a21a8:	9100      	str	r1, [sp, #0]
 80a21aa:	f7ff ff37 	bl	80a201c <_ZN5Print10printFloatEdh>
 80a21ae:	4604      	mov	r4, r0
  n += println();
 80a21b0:	4628      	mov	r0, r5
 80a21b2:	f7ff ff0a 	bl	80a1fca <_ZN5Print7printlnEv>
}
 80a21b6:	4420      	add	r0, r4
 80a21b8:	b003      	add	sp, #12
 80a21ba:	bd30      	pop	{r4, r5, pc}

080a21bc <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 80a21bc:	2200      	movs	r2, #0
 80a21be:	4b01      	ldr	r3, [pc, #4]	; (80a21c4 <_GLOBAL__sub_I_RGB+0x8>)
 80a21c0:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 80a21c2:	4770      	bx	lr
 80a21c4:	20002298 	.word	0x20002298

080a21c8 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a21c8:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a21ca:	2600      	movs	r6, #0
 80a21cc:	4604      	mov	r4, r0
 80a21ce:	460d      	mov	r5, r1
 80a21d0:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a21d4:	f7ff f82a 	bl	80a122c <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a21d8:	4628      	mov	r0, r5
    _spi = spi;
 80a21da:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a21dc:	f7ff f918 	bl	80a1410 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a21e0:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a21e2:	6066      	str	r6, [r4, #4]
}
 80a21e4:	bd70      	pop	{r4, r5, r6, pc}

080a21e6 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a21e6:	b510      	push	{r4, lr}
 80a21e8:	4604      	mov	r4, r0
{
	free(buffer);
 80a21ea:	6800      	ldr	r0, [r0, #0]
 80a21ec:	f7ff fa6c 	bl	80a16c8 <free>
}
 80a21f0:	4620      	mov	r0, r4
 80a21f2:	bd10      	pop	{r4, pc}

080a21f4 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a21f4:	b510      	push	{r4, lr}
 80a21f6:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a21f8:	6800      	ldr	r0, [r0, #0]
 80a21fa:	b108      	cbz	r0, 80a2200 <_ZN6String10invalidateEv+0xc>
 80a21fc:	f7ff fa64 	bl	80a16c8 <free>
	buffer = NULL;
 80a2200:	2300      	movs	r3, #0
	capacity = len = 0;
 80a2202:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 80a2206:	6023      	str	r3, [r4, #0]
}
 80a2208:	bd10      	pop	{r4, pc}

080a220a <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a220a:	b538      	push	{r3, r4, r5, lr}
 80a220c:	4604      	mov	r4, r0
 80a220e:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a2210:	6800      	ldr	r0, [r0, #0]
 80a2212:	3101      	adds	r1, #1
 80a2214:	f7ff fa60 	bl	80a16d8 <realloc>
	if (newbuffer) {
 80a2218:	b110      	cbz	r0, 80a2220 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a221a:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 80a221e:	2001      	movs	r0, #1
	}
	return 0;
}
 80a2220:	bd38      	pop	{r3, r4, r5, pc}

080a2222 <_ZN6String7reserveEj>:
{
 80a2222:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a2224:	6803      	ldr	r3, [r0, #0]
{
 80a2226:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a2228:	b123      	cbz	r3, 80a2234 <_ZN6String7reserveEj+0x12>
 80a222a:	6843      	ldr	r3, [r0, #4]
 80a222c:	428b      	cmp	r3, r1
 80a222e:	d301      	bcc.n	80a2234 <_ZN6String7reserveEj+0x12>
 80a2230:	2001      	movs	r0, #1
}
 80a2232:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80a2234:	4620      	mov	r0, r4
 80a2236:	f7ff ffe8 	bl	80a220a <_ZN6String12changeBufferEj>
 80a223a:	2800      	cmp	r0, #0
 80a223c:	d0f9      	beq.n	80a2232 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 80a223e:	68a3      	ldr	r3, [r4, #8]
 80a2240:	2b00      	cmp	r3, #0
 80a2242:	d1f5      	bne.n	80a2230 <_ZN6String7reserveEj+0xe>
 80a2244:	6822      	ldr	r2, [r4, #0]
 80a2246:	7013      	strb	r3, [r2, #0]
 80a2248:	e7f2      	b.n	80a2230 <_ZN6String7reserveEj+0xe>

080a224a <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a224a:	b570      	push	{r4, r5, r6, lr}
 80a224c:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a224e:	4611      	mov	r1, r2
{
 80a2250:	4604      	mov	r4, r0
 80a2252:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a2254:	f7ff ffe5 	bl	80a2222 <_ZN6String7reserveEj>
 80a2258:	b920      	cbnz	r0, 80a2264 <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 80a225a:	4620      	mov	r0, r4
 80a225c:	f7ff ffca 	bl	80a21f4 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 80a2260:	4620      	mov	r0, r4
 80a2262:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 80a2264:	462a      	mov	r2, r5
 80a2266:	4631      	mov	r1, r6
 80a2268:	6820      	ldr	r0, [r4, #0]
	len = length;
 80a226a:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a226c:	f003 f810 	bl	80a5290 <memcpy>
	buffer[len] = 0;
 80a2270:	2100      	movs	r1, #0
 80a2272:	6822      	ldr	r2, [r4, #0]
 80a2274:	68a3      	ldr	r3, [r4, #8]
 80a2276:	54d1      	strb	r1, [r2, r3]
	return *this;
 80a2278:	e7f2      	b.n	80a2260 <_ZN6String4copyEPKcj+0x16>

080a227a <_ZN6StringC1EPK19__FlashStringHelper>:
String::String(const __FlashStringHelper *pstr)
 80a227a:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 80a227c:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
 80a227e:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a2280:	460d      	mov	r5, r1
	capacity = 0;
 80a2282:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a2286:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a2288:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 80a228a:	b139      	cbz	r1, 80a229c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
 80a228c:	4608      	mov	r0, r1
 80a228e:	f003 f882 	bl	80a5396 <strlen>
 80a2292:	4629      	mov	r1, r5
 80a2294:	4602      	mov	r2, r0
 80a2296:	4620      	mov	r0, r4
 80a2298:	f7ff ffd7 	bl	80a224a <_ZN6String4copyEPKcj>
}
 80a229c:	4620      	mov	r0, r4
 80a229e:	bd38      	pop	{r3, r4, r5, pc}

080a22a0 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a22a0:	4288      	cmp	r0, r1
{
 80a22a2:	b510      	push	{r4, lr}
 80a22a4:	460b      	mov	r3, r1
 80a22a6:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a22a8:	d004      	beq.n	80a22b4 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a22aa:	6809      	ldr	r1, [r1, #0]
 80a22ac:	b121      	cbz	r1, 80a22b8 <_ZN6StringaSERKS_+0x18>
 80a22ae:	689a      	ldr	r2, [r3, #8]
 80a22b0:	f7ff ffcb 	bl	80a224a <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a22b4:	4620      	mov	r0, r4
 80a22b6:	bd10      	pop	{r4, pc}
	else invalidate();
 80a22b8:	f7ff ff9c 	bl	80a21f4 <_ZN6String10invalidateEv>
 80a22bc:	e7fa      	b.n	80a22b4 <_ZN6StringaSERKS_+0x14>

080a22be <_ZN6StringC1ERKS_>:
	buffer = NULL;
 80a22be:	2300      	movs	r3, #0
String::String(const String &value)
 80a22c0:	b510      	push	{r4, lr}
 80a22c2:	4604      	mov	r4, r0
	capacity = 0;
 80a22c4:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a22c8:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a22ca:	7303      	strb	r3, [r0, #12]
	*this = value;
 80a22cc:	f7ff ffe8 	bl	80a22a0 <_ZN6StringaSERKS_>
}
 80a22d0:	4620      	mov	r0, r4
 80a22d2:	bd10      	pop	{r4, pc}

080a22d4 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a22d4:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a22d6:	2000      	movs	r0, #0
 80a22d8:	4b04      	ldr	r3, [pc, #16]	; (80a22ec <_GLOBAL__sub_I_System+0x18>)
 80a22da:	601a      	str	r2, [r3, #0]
 80a22dc:	4b04      	ldr	r3, [pc, #16]	; (80a22f0 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 80a22de:	4a05      	ldr	r2, [pc, #20]	; (80a22f4 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 80a22e0:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 80a22e4:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a22e6:	f7ff b933 	b.w	80a1550 <set_system_mode>
 80a22ea:	bf00      	nop
 80a22ec:	200022b4 	.word	0x200022b4
 80a22f0:	200022a8 	.word	0x200022a8
 80a22f4:	ffff0000 	.word	0xffff0000

080a22f8 <_ZN9TCPClient5writeEh>:
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a22f8:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a22fa:	6803      	ldr	r3, [r0, #0]
{
 80a22fc:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a2300:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a2302:	2201      	movs	r2, #1
 80a2304:	f247 5330 	movw	r3, #30000	; 0x7530
 80a2308:	f10d 0107 	add.w	r1, sp, #7
 80a230c:	47a0      	blx	r4
}
 80a230e:	b002      	add	sp, #8
 80a2310:	bd10      	pop	{r4, pc}

080a2312 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
 80a2312:	b410      	push	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a2314:	6803      	ldr	r3, [r0, #0]
 80a2316:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a2318:	f247 5330 	movw	r3, #30000	; 0x7530
 80a231c:	46a4      	mov	ip, r4
}
 80a231e:	bc10      	pop	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a2320:	4760      	bx	ip

080a2322 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a2322:	b513      	push	{r0, r1, r4, lr}
 80a2324:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
 80a2326:	6802      	ldr	r2, [r0, #0]
{
 80a2328:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
 80a232c:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 80a232e:	f10d 0107 	add.w	r1, sp, #7
 80a2332:	2201      	movs	r2, #1
 80a2334:	47a0      	blx	r4
}
 80a2336:	b002      	add	sp, #8
 80a2338:	bd10      	pop	{r4, pc}

080a233a <_ZN9TCPClient4readEv>:
    avail = bufferCount();
    return avail;
}

int TCPClient::read()
{
 80a233a:	b510      	push	{r4, lr}
 80a233c:	6943      	ldr	r3, [r0, #20]
 80a233e:	4604      	mov	r4, r0
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80a2340:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a2344:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a2348:	429a      	cmp	r2, r3
 80a234a:	d008      	beq.n	80a235e <_ZN9TCPClient4readEv+0x24>
 80a234c:	6963      	ldr	r3, [r4, #20]
 80a234e:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a2352:	1c51      	adds	r1, r2, #1
 80a2354:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
 80a2358:	4413      	add	r3, r2
 80a235a:	7918      	ldrb	r0, [r3, #4]
}
 80a235c:	bd10      	pop	{r4, pc}
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80a235e:	6803      	ldr	r3, [r0, #0]
 80a2360:	691b      	ldr	r3, [r3, #16]
 80a2362:	4798      	blx	r3
 80a2364:	2800      	cmp	r0, #0
 80a2366:	d1f1      	bne.n	80a234c <_ZN9TCPClient4readEv+0x12>
 80a2368:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a236c:	e7f6      	b.n	80a235c <_ZN9TCPClient4readEv+0x22>

080a236e <_ZN9TCPClient5flushEv>:
  d_->total = 0;
}

void TCPClient::flush()
{
}
 80a236e:	4770      	bx	lr

080a2370 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 80a2370:	4770      	bx	lr
	...

080a2374 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
 80a2374:	b510      	push	{r4, lr}
 80a2376:	4604      	mov	r4, r0
	    ||
 80a2378:	4b06      	ldr	r3, [pc, #24]	; (80a2394 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x20>)
      _M_get_deleter(const std::type_info& __ti) noexcept override
 80a237a:	4608      	mov	r0, r1
	    ||
 80a237c:	4299      	cmp	r1, r3
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
 80a237e:	f104 040c 	add.w	r4, r4, #12
 80a2382:	d004      	beq.n	80a238e <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1a>
	    _Sp_make_shared_tag::_S_eq(__ti)
 80a2384:	f000 ffca 	bl	80a331c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
 80a2388:	2800      	cmp	r0, #0
 80a238a:	bf08      	it	eq
 80a238c:	2400      	moveq	r4, #0
      }
 80a238e:	4620      	mov	r0, r4
 80a2390:	bd10      	pop	{r4, pc}
 80a2392:	bf00      	nop
 80a2394:	080a579c 	.word	0x080a579c

080a2398 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 80a2398:	b510      	push	{r4, lr}
 80a239a:	4604      	mov	r4, r0
 80a239c:	21ac      	movs	r1, #172	; 0xac
 80a239e:	f7fd fe80 	bl	80a00a2 <_ZdlPvj>
 80a23a2:	4620      	mov	r0, r4
 80a23a4:	bd10      	pop	{r4, pc}

080a23a6 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p
 80a23a6:	21ac      	movs	r1, #172	; 0xac
 80a23a8:	f7fd be7b 	b.w	80a00a2 <_ZdlPvj>

080a23ac <_ZN9TCPClient8remoteIPEv>:
{
   return (status()!=0);
}

IPAddress TCPClient::remoteIP()
{
 80a23ac:	b570      	push	{r4, r5, r6, lr}
class IPAddress : public Printable {
 80a23ae:	4604      	mov	r4, r0
 80a23b0:	4606      	mov	r6, r0
      { return _M_ptr; }
 80a23b2:	694d      	ldr	r5, [r1, #20]
 80a23b4:	4b04      	ldr	r3, [pc, #16]	; (80a23c8 <_ZN9TCPClient8remoteIPEv+0x1c>)
 80a23b6:	358c      	adds	r5, #140	; 0x8c
 80a23b8:	f844 3b04 	str.w	r3, [r4], #4
 80a23bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a23be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a23c0:	682b      	ldr	r3, [r5, #0]
    return d_->remoteIP;
}
 80a23c2:	4630      	mov	r0, r6
 80a23c4:	7023      	strb	r3, [r4, #0]
 80a23c6:	bd70      	pop	{r4, r5, r6, pc}
 80a23c8:	080a5708 	.word	0x080a5708

080a23cc <_ZN9TCPClient4peekEv>:
{
 80a23cc:	b510      	push	{r4, lr}
 80a23ce:	6943      	ldr	r3, [r0, #20]
 80a23d0:	4604      	mov	r4, r0
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80a23d2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a23d6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a23da:	429a      	cmp	r2, r3
 80a23dc:	d005      	beq.n	80a23ea <_ZN9TCPClient4peekEv+0x1e>
 80a23de:	6963      	ldr	r3, [r4, #20]
 80a23e0:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a23e4:	4413      	add	r3, r2
 80a23e6:	7918      	ldrb	r0, [r3, #4]
}
 80a23e8:	bd10      	pop	{r4, pc}
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80a23ea:	6803      	ldr	r3, [r0, #0]
 80a23ec:	691b      	ldr	r3, [r3, #16]
 80a23ee:	4798      	blx	r3
 80a23f0:	2800      	cmp	r0, #0
 80a23f2:	d1f4      	bne.n	80a23de <_ZN9TCPClient4peekEv+0x12>
 80a23f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a23f8:	e7f6      	b.n	80a23e8 <_ZN9TCPClient4peekEv+0x1c>

080a23fa <_ZN9TCPClient4readEPhj>:
{
 80a23fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a23fc:	6943      	ldr	r3, [r0, #20]
 80a23fe:	4617      	mov	r7, r2
        if (bufferCount() || available())
 80a2400:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a2404:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
{
 80a2408:	4605      	mov	r5, r0
        if (bufferCount() || available())
 80a240a:	429a      	cmp	r2, r3
{
 80a240c:	460e      	mov	r6, r1
        if (bufferCount() || available())
 80a240e:	d016      	beq.n	80a243e <_ZN9TCPClient4readEPhj+0x44>
 80a2410:	6969      	ldr	r1, [r5, #20]
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a2412:	4630      	mov	r0, r6
  return d_->total - d_->offset;
 80a2414:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
 80a2418:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
 80a241c:	1ae4      	subs	r4, r4, r3
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
 80a241e:	42bc      	cmp	r4, r7
 80a2420:	bf28      	it	cs
 80a2422:	463c      	movcs	r4, r7
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a2424:	3304      	adds	r3, #4
 80a2426:	4622      	mov	r2, r4
 80a2428:	4419      	add	r1, r3
 80a242a:	f002 ff31 	bl	80a5290 <memcpy>
 80a242e:	696a      	ldr	r2, [r5, #20]
          d_->offset += read;
 80a2430:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a2434:	4423      	add	r3, r4
 80a2436:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
 80a243a:	4620      	mov	r0, r4
 80a243c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (bufferCount() || available())
 80a243e:	6803      	ldr	r3, [r0, #0]
 80a2440:	691b      	ldr	r3, [r3, #16]
 80a2442:	4798      	blx	r3
 80a2444:	2800      	cmp	r0, #0
 80a2446:	d1e3      	bne.n	80a2410 <_ZN9TCPClient4readEPhj+0x16>
        int read = -1;
 80a2448:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80a244c:	e7f5      	b.n	80a243a <_ZN9TCPClient4readEPhj+0x40>

080a244e <_ZN9TCPClient12flush_bufferEv>:
  d_->offset = 0;
 80a244e:	2300      	movs	r3, #0
 80a2450:	6942      	ldr	r2, [r0, #20]
 80a2452:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 80a2456:	6942      	ldr	r2, [r0, #20]
  d_->total = 0;
 80a2458:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
 80a245c:	4770      	bx	lr
	...

080a2460 <_ZN9TCPClient7connectE9IPAddresstm>:
{
 80a2460:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a2464:	461f      	mov	r7, r3
    stop();
 80a2466:	6803      	ldr	r3, [r0, #0]
{
 80a2468:	b08b      	sub	sp, #44	; 0x2c
    stop();
 80a246a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
 80a246c:	4605      	mov	r5, r0
 80a246e:	460c      	mov	r4, r1
 80a2470:	4616      	mov	r6, r2
    stop();
 80a2472:	4798      	blx	r3
        if(Network.from(nif).ready())
 80a2474:	4638      	mov	r0, r7
 80a2476:	f7ff fd65 	bl	80a1f44 <_ZN5spark12NetworkClass4fromEm>
 80a247a:	6803      	ldr	r3, [r0, #0]
 80a247c:	68db      	ldr	r3, [r3, #12]
 80a247e:	4798      	blx	r3
 80a2480:	2800      	cmp	r0, #0
 80a2482:	d054      	beq.n	80a252e <_ZN9TCPClient7connectE9IPAddresstm+0xce>
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a2484:	4633      	mov	r3, r6
 80a2486:	2206      	movs	r2, #6
 80a2488:	2101      	movs	r1, #1
 80a248a:	2002      	movs	r0, #2
 80a248c:	9700      	str	r7, [sp, #0]
 80a248e:	f8d5 8014 	ldr.w	r8, [r5, #20]
 80a2492:	f7fe ff7d 	bl	80a1390 <socket_create>
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a2496:	2320      	movs	r3, #32
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a2498:	f8c8 0000 	str.w	r0, [r8]
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a249c:	f04f 0800 	mov.w	r8, #0
 80a24a0:	e9cd 3802 	strd	r3, r8, [sp, #8]
 80a24a4:	696b      	ldr	r3, [r5, #20]
 80a24a6:	2001      	movs	r0, #1
 80a24a8:	681b      	ldr	r3, [r3, #0]
 80a24aa:	4923      	ldr	r1, [pc, #140]	; (80a2538 <_ZN9TCPClient7connectE9IPAddresstm+0xd8>)
 80a24ac:	9301      	str	r3, [sp, #4]
 80a24ae:	4b23      	ldr	r3, [pc, #140]	; (80a253c <_ZN9TCPClient7connectE9IPAddresstm+0xdc>)
 80a24b0:	aa02      	add	r2, sp, #8
 80a24b2:	9300      	str	r3, [sp, #0]
 80a24b4:	4643      	mov	r3, r8
 80a24b6:	f7ff f843 	bl	80a1540 <log_message>
          if (socket_handle_valid(d_->sock))
 80a24ba:	696b      	ldr	r3, [r5, #20]
 80a24bc:	6818      	ldr	r0, [r3, #0]
 80a24be:	f7fe ff5f 	bl	80a1380 <socket_handle_valid>
 80a24c2:	2800      	cmp	r0, #0
 80a24c4:	d033      	beq.n	80a252e <_ZN9TCPClient7connectE9IPAddresstm+0xce>
            flush_buffer();
 80a24c6:	4628      	mov	r0, r5
 80a24c8:	f7ff ffc1 	bl	80a244e <_ZN9TCPClient12flush_bufferEv>
            tSocketAddr.sa_family = AF_INET;
 80a24cc:	2302      	movs	r3, #2
 80a24ce:	f8ad 3008 	strh.w	r3, [sp, #8]
            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a24d2:	79e3      	ldrb	r3, [r4, #7]
            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a24d4:	ba76      	rev16	r6, r6
            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a24d6:	f88d 300c 	strb.w	r3, [sp, #12]
            tSocketAddr.sa_data[3] = ip[1];
 80a24da:	79a3      	ldrb	r3, [r4, #6]
            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a24dc:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
            tSocketAddr.sa_data[3] = ip[1];
 80a24e0:	f88d 300d 	strb.w	r3, [sp, #13]
            tSocketAddr.sa_data[4] = ip[2];
 80a24e4:	7963      	ldrb	r3, [r4, #5]
            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a24e6:	f8ad 600a 	strh.w	r6, [sp, #10]
            tSocketAddr.sa_data[4] = ip[2];
 80a24ea:	f88d 300e 	strb.w	r3, [sp, #14]
            tSocketAddr.sa_data[5] = ip[3];
 80a24ee:	f814 3f04 	ldrb.w	r3, [r4, #4]!
 80a24f2:	f88d 300f 	strb.w	r3, [sp, #15]
            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a24f6:	f7ff f813 	bl	80a1520 <HAL_NET_SetNetWatchDog>
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a24fa:	696b      	ldr	r3, [r5, #20]
            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a24fc:	4606      	mov	r6, r0
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a24fe:	2210      	movs	r2, #16
 80a2500:	6818      	ldr	r0, [r3, #0]
 80a2502:	a902      	add	r1, sp, #8
 80a2504:	f7fe ff4c 	bl	80a13a0 <socket_connect>
 80a2508:	4681      	mov	r9, r0
            HAL_NET_SetNetWatchDog(ot);
 80a250a:	4630      	mov	r0, r6
 80a250c:	f7ff f808 	bl	80a1520 <HAL_NET_SetNetWatchDog>
 80a2510:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a2512:	696e      	ldr	r6, [r5, #20]
 80a2514:	368c      	adds	r6, #140	; 0x8c
 80a2516:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80a2518:	6823      	ldr	r3, [r4, #0]
 80a251a:	7033      	strb	r3, [r6, #0]
            nif_ = nif;
 80a251c:	612f      	str	r7, [r5, #16]
            if(!connected)
 80a251e:	f1b9 0f00 	cmp.w	r9, #0
 80a2522:	d007      	beq.n	80a2534 <_ZN9TCPClient7connectE9IPAddresstm+0xd4>
                stop();
 80a2524:	682b      	ldr	r3, [r5, #0]
 80a2526:	4628      	mov	r0, r5
 80a2528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a252a:	4798      	blx	r3
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a252c:	4640      	mov	r0, r8
}
 80a252e:	b00b      	add	sp, #44	; 0x2c
 80a2530:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a2534:	2001      	movs	r0, #1
 80a2536:	e7fa      	b.n	80a252e <_ZN9TCPClient7connectE9IPAddresstm+0xce>
 80a2538:	080a5762 	.word	0x080a5762
 80a253c:	080a5769 	.word	0x080a5769

080a2540 <_ZN9TCPClient9availableEv>:
{
 80a2540:	b538      	push	{r3, r4, r5, lr}
 80a2542:	6942      	ldr	r2, [r0, #20]
 80a2544:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total))
 80a2546:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a254a:	b12b      	cbz	r3, 80a2558 <_ZN9TCPClient9availableEv+0x18>
 80a254c:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 80a2550:	429a      	cmp	r2, r3
 80a2552:	d101      	bne.n	80a2558 <_ZN9TCPClient9availableEv+0x18>
        flush_buffer();
 80a2554:	f7ff ff7b 	bl	80a244e <_ZN9TCPClient12flush_bufferEv>
    if(Network.from(nif_).ready() && isOpen(d_->sock))
 80a2558:	6920      	ldr	r0, [r4, #16]
 80a255a:	f7ff fcf3 	bl	80a1f44 <_ZN5spark12NetworkClass4fromEm>
 80a255e:	6803      	ldr	r3, [r0, #0]
 80a2560:	68db      	ldr	r3, [r3, #12]
 80a2562:	4798      	blx	r3
 80a2564:	b1f8      	cbz	r0, 80a25a6 <_ZN9TCPClient9availableEv+0x66>
 80a2566:	6963      	ldr	r3, [r4, #20]
   return socket_handle_valid(sd);
 80a2568:	6818      	ldr	r0, [r3, #0]
 80a256a:	f7fe ff09 	bl	80a1380 <socket_handle_valid>
    if(Network.from(nif_).ready() && isOpen(d_->sock))
 80a256e:	b1d0      	cbz	r0, 80a25a6 <_ZN9TCPClient9availableEv+0x66>
 80a2570:	6960      	ldr	r0, [r4, #20]
        if ( d_->total < arraySize(d_->buffer))
 80a2572:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
 80a2576:	297f      	cmp	r1, #127	; 0x7f
 80a2578:	d815      	bhi.n	80a25a6 <_ZN9TCPClient9availableEv+0x66>
            int ret = socket_receive(d_->sock, d_->buffer + d_->total , arraySize(d_->buffer)-d_->total, 0);
 80a257a:	1d05      	adds	r5, r0, #4
 80a257c:	f1c1 0280 	rsb	r2, r1, #128	; 0x80
 80a2580:	2300      	movs	r3, #0
 80a2582:	6800      	ldr	r0, [r0, #0]
 80a2584:	4429      	add	r1, r5
 80a2586:	f7fe ff13 	bl	80a13b0 <socket_receive>
            if (ret > 0)
 80a258a:	2800      	cmp	r0, #0
 80a258c:	dd0b      	ble.n	80a25a6 <_ZN9TCPClient9availableEv+0x66>
 80a258e:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) d_->offset = 0;
 80a2590:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a2594:	b90a      	cbnz	r2, 80a259a <_ZN9TCPClient9availableEv+0x5a>
 80a2596:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80a259a:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
 80a259c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a25a0:	4410      	add	r0, r2
 80a25a2:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
 80a25a6:	6963      	ldr	r3, [r4, #20]
  return d_->total - d_->offset;
 80a25a8:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
 80a25ac:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
 80a25b0:	1ac0      	subs	r0, r0, r3
 80a25b2:	bd38      	pop	{r3, r4, r5, pc}

080a25b4 <_ZN9TCPClient4stopEv>:
{
 80a25b4:	b538      	push	{r3, r4, r5, lr}
  if (isOpen(d_->sock))
 80a25b6:	6943      	ldr	r3, [r0, #20]
{
 80a25b8:	4604      	mov	r4, r0
   return socket_handle_valid(sd);
 80a25ba:	6818      	ldr	r0, [r3, #0]
 80a25bc:	f7fe fee0 	bl	80a1380 <socket_handle_valid>
  if (isOpen(d_->sock))
 80a25c0:	b118      	cbz	r0, 80a25ca <_ZN9TCPClient4stopEv+0x16>
      socket_close(d_->sock);
 80a25c2:	6963      	ldr	r3, [r4, #20]
 80a25c4:	6818      	ldr	r0, [r3, #0]
 80a25c6:	f7fe ff03 	bl	80a13d0 <socket_close>
 80a25ca:	6965      	ldr	r5, [r4, #20]
  d_->sock = socket_handle_invalid();
 80a25cc:	f7fe ff08 	bl	80a13e0 <socket_handle_invalid>
 80a25d0:	6028      	str	r0, [r5, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
 80a25d2:	6960      	ldr	r0, [r4, #20]
 80a25d4:	2211      	movs	r2, #17
 80a25d6:	2100      	movs	r1, #0
 80a25d8:	308c      	adds	r0, #140	; 0x8c
 80a25da:	f002 fe81 	bl	80a52e0 <memset>
  flush_buffer();
 80a25de:	4620      	mov	r0, r4
}
 80a25e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  flush_buffer();
 80a25e4:	f7ff bf33 	b.w	80a244e <_ZN9TCPClient12flush_bufferEv>

080a25e8 <_ZN9TCPClient6statusEv>:
{
 80a25e8:	b510      	push	{r4, lr}
  return (isOpen(d_->sock) && Network.from(nif_).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a25ea:	6943      	ldr	r3, [r0, #20]
{
 80a25ec:	4604      	mov	r4, r0
   return socket_handle_valid(sd);
 80a25ee:	6818      	ldr	r0, [r3, #0]
 80a25f0:	f7fe fec6 	bl	80a1380 <socket_handle_valid>
  return (isOpen(d_->sock) && Network.from(nif_).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a25f4:	b908      	cbnz	r0, 80a25fa <_ZN9TCPClient6statusEv+0x12>
 80a25f6:	2000      	movs	r0, #0
}
 80a25f8:	bd10      	pop	{r4, pc}
  return (isOpen(d_->sock) && Network.from(nif_).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a25fa:	6920      	ldr	r0, [r4, #16]
 80a25fc:	f7ff fca2 	bl	80a1f44 <_ZN5spark12NetworkClass4fromEm>
 80a2600:	6803      	ldr	r3, [r0, #0]
 80a2602:	68db      	ldr	r3, [r3, #12]
 80a2604:	4798      	blx	r3
 80a2606:	2800      	cmp	r0, #0
 80a2608:	d0f5      	beq.n	80a25f6 <_ZN9TCPClient6statusEv+0xe>
 80a260a:	6963      	ldr	r3, [r4, #20]
 80a260c:	6818      	ldr	r0, [r3, #0]
 80a260e:	f7fe feaf 	bl	80a1370 <socket_active_status>
 80a2612:	fab0 f080 	clz	r0, r0
 80a2616:	0940      	lsrs	r0, r0, #5
 80a2618:	e7ee      	b.n	80a25f8 <_ZN9TCPClient6statusEv+0x10>

080a261a <_ZN9TCPClientcvbEv>:
{
 80a261a:	b508      	push	{r3, lr}
   return (status()!=0);
 80a261c:	f7ff ffe4 	bl	80a25e8 <_ZN9TCPClient6statusEv>
}
 80a2620:	3800      	subs	r0, #0
 80a2622:	bf18      	it	ne
 80a2624:	2001      	movne	r0, #1
 80a2626:	bd08      	pop	{r3, pc}

080a2628 <_ZN9TCPClient5writeEPKhjm>:
{
 80a2628:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
 80a262c:	2700      	movs	r7, #0
 80a262e:	6047      	str	r7, [r0, #4]
 80a2630:	4604      	mov	r4, r0
 80a2632:	460d      	mov	r5, r1
 80a2634:	4616      	mov	r6, r2
 80a2636:	4698      	mov	r8, r3
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a2638:	f7ff ffd6 	bl	80a25e8 <_ZN9TCPClient6statusEv>
 80a263c:	b170      	cbz	r0, 80a265c <_ZN9TCPClient5writeEPKhjm+0x34>
 80a263e:	e9cd 8700 	strd	r8, r7, [sp]
 80a2642:	6960      	ldr	r0, [r4, #20]
 80a2644:	463b      	mov	r3, r7
 80a2646:	4632      	mov	r2, r6
 80a2648:	4629      	mov	r1, r5
 80a264a:	6800      	ldr	r0, [r0, #0]
 80a264c:	f7fe fed0 	bl	80a13f0 <socket_send_ex>
    if (ret < 0) {
 80a2650:	2800      	cmp	r0, #0
 80a2652:	da00      	bge.n	80a2656 <_ZN9TCPClient5writeEPKhjm+0x2e>
 80a2654:	6060      	str	r0, [r4, #4]
}
 80a2656:	b002      	add	sp, #8
 80a2658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a265c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a2660:	e7f8      	b.n	80a2654 <_ZN9TCPClient5writeEPKhjm+0x2c>

080a2662 <_ZN9TCPClient9connectedEv>:
{
 80a2662:	b570      	push	{r4, r5, r6, lr}
 80a2664:	4605      	mov	r5, r0
  bool rv = (status() || bufferCount());
 80a2666:	f7ff ffbf 	bl	80a25e8 <_ZN9TCPClient6statusEv>
 80a266a:	b9e8      	cbnz	r0, 80a26a8 <_ZN9TCPClient9connectedEv+0x46>
 80a266c:	696b      	ldr	r3, [r5, #20]
 80a266e:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 80a2672:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a2676:	4291      	cmp	r1, r2
 80a2678:	d116      	bne.n	80a26a8 <_ZN9TCPClient9connectedEv+0x46>
   return socket_handle_valid(sd);
 80a267a:	6818      	ldr	r0, [r3, #0]
 80a267c:	f7fe fe80 	bl	80a1380 <socket_handle_valid>
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80a2680:	b908      	cbnz	r0, 80a2686 <_ZN9TCPClient9connectedEv+0x24>
  bool rv = (status() || bufferCount());
 80a2682:	2000      	movs	r0, #0
}
 80a2684:	bd70      	pop	{r4, r5, r6, pc}
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80a2686:	696b      	ldr	r3, [r5, #20]
 80a2688:	6818      	ldr	r0, [r3, #0]
 80a268a:	f7fe fe71 	bl	80a1370 <socket_active_status>
 80a268e:	2801      	cmp	r0, #1
 80a2690:	4604      	mov	r4, r0
 80a2692:	d1f6      	bne.n	80a2682 <_ZN9TCPClient9connectedEv+0x20>
      rv = available(); // Try CC3000
 80a2694:	682b      	ldr	r3, [r5, #0]
 80a2696:	4628      	mov	r0, r5
 80a2698:	691b      	ldr	r3, [r3, #16]
 80a269a:	4798      	blx	r3
      if (!rv) {        // No more Data and CLOSE_WAIT
 80a269c:	b930      	cbnz	r0, 80a26ac <_ZN9TCPClient9connectedEv+0x4a>
          stop();       // Close our side
 80a269e:	682b      	ldr	r3, [r5, #0]
 80a26a0:	4628      	mov	r0, r5
 80a26a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a26a4:	4798      	blx	r3
 80a26a6:	e7ec      	b.n	80a2682 <_ZN9TCPClient9connectedEv+0x20>
  bool rv = (status() || bufferCount());
 80a26a8:	2001      	movs	r0, #1
 80a26aa:	e7eb      	b.n	80a2684 <_ZN9TCPClient9connectedEv+0x22>
      rv = available(); // Try CC3000
 80a26ac:	4620      	mov	r0, r4
 80a26ae:	e7e9      	b.n	80a2684 <_ZN9TCPClient9connectedEv+0x22>

080a26b0 <_ZN9TCPClient4DataC1Em>:

TCPClient::Data::Data(sock_handle_t sock)
        : sock(sock),
          offset(0),
          total(0) {
 80a26b0:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
 80a26b2:	b510      	push	{r4, lr}
 80a26b4:	4604      	mov	r4, r0
          total(0) {
 80a26b6:	6001      	str	r1, [r0, #0]
 80a26b8:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
 80a26bc:	3088      	adds	r0, #136	; 0x88
 80a26be:	f7ff fb83 	bl	80a1dc8 <_ZN9IPAddressC1Ev>
}
 80a26c2:	4620      	mov	r0, r4
 80a26c4:	bd10      	pop	{r4, pc}
	...

080a26c8 <_ZN9TCPClientC1Em>:
TCPClient::TCPClient(sock_handle_t sock) :
 80a26c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a26ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a26ce:	2300      	movs	r3, #0
 80a26d0:	e9c0 3201 	strd	r3, r2, [r0, #4]
        d_(std::make_shared<Data>(sock))
 80a26d4:	4a0d      	ldr	r2, [pc, #52]	; (80a270c <_ZN9TCPClientC1Em+0x44>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
 80a26d6:	6103      	str	r3, [r0, #16]
 80a26d8:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 80a26da:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock) :
 80a26dc:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a26de:	20ac      	movs	r0, #172	; 0xac
 80a26e0:	460e      	mov	r6, r1
 80a26e2:	f7fd fcda 	bl	80a009a <_Znwj>
	  auto __pi = ::new (__mem)
 80a26e6:	1e05      	subs	r5, r0, #0
 80a26e8:	f105 070c 	add.w	r7, r5, #12
 80a26ec:	d008      	beq.n	80a2700 <_ZN9TCPClientC1Em+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
 80a26ee:	2301      	movs	r3, #1
 80a26f0:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
 80a26f4:	4b06      	ldr	r3, [pc, #24]	; (80a2710 <_ZN9TCPClientC1Em+0x48>)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80a26f6:	4631      	mov	r1, r6
 80a26f8:	4638      	mov	r0, r7
 80a26fa:	602b      	str	r3, [r5, #0]
 80a26fc:	f7ff ffd8 	bl	80a26b0 <_ZN9TCPClient4DataC1Em>
  flush_buffer();
 80a2700:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
 80a2702:	e9c4 7505 	strd	r7, r5, [r4, #20]
 80a2706:	f7ff fea2 	bl	80a244e <_ZN9TCPClient12flush_bufferEv>
}
 80a270a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a270c:	080a57ac 	.word	0x080a57ac
 80a2710:	080a5788 	.word	0x080a5788

080a2714 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
 80a2714:	b510      	push	{r4, lr}
 80a2716:	4604      	mov	r4, r0
 80a2718:	f7fe fe62 	bl	80a13e0 <socket_handle_invalid>
 80a271c:	4601      	mov	r1, r0
 80a271e:	4620      	mov	r0, r4
 80a2720:	f7ff ffd2 	bl	80a26c8 <_ZN9TCPClientC1Em>
}
 80a2724:	4620      	mov	r0, r4
 80a2726:	bd10      	pop	{r4, pc}

080a2728 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
 80a2728:	b510      	push	{r4, lr}
 80a272a:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
 80a272c:	6800      	ldr	r0, [r0, #0]
 80a272e:	f7fe fe27 	bl	80a1380 <socket_handle_valid>
 80a2732:	b110      	cbz	r0, 80a273a <_ZN9TCPClient4DataD1Ev+0x12>
        socket_close(sock);
 80a2734:	6820      	ldr	r0, [r4, #0]
 80a2736:	f7fe fe4b 	bl	80a13d0 <socket_close>
    }
}
 80a273a:	4620      	mov	r0, r4
 80a273c:	bd10      	pop	{r4, pc}

080a273e <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 80a273e:	300c      	adds	r0, #12
 80a2740:	f7ff bff2 	b.w	80a2728 <_ZN9TCPClient4DataD1Ev>

080a2744 <_ZN9TCPClient7connectEPKctm>:
{
 80a2744:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a2748:	461f      	mov	r7, r3
    stop();
 80a274a:	6803      	ldr	r3, [r0, #0]
{
 80a274c:	b08f      	sub	sp, #60	; 0x3c
    stop();
 80a274e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
 80a2750:	4606      	mov	r6, r0
 80a2752:	460d      	mov	r5, r1
 80a2754:	4690      	mov	r8, r2
    stop();
 80a2756:	4798      	blx	r3
    if (Network.ready())
 80a2758:	4813      	ldr	r0, [pc, #76]	; (80a27a8 <_ZN9TCPClient7connectEPKctm+0x64>)
 80a275a:	f7ff fb9e 	bl	80a1e9a <_ZN5spark12NetworkClass5readyEv>
 80a275e:	b1f0      	cbz	r0, 80a279e <_ZN9TCPClient7connectEPKctm+0x5a>
        IPAddress ip_addr;
 80a2760:	a802      	add	r0, sp, #8
 80a2762:	f7ff fb31 	bl	80a1dc8 <_ZN9IPAddressC1Ev>
        if (inet_gethostbyname(host, strlen(host), ip_addr, nif, NULL) == 0) {
 80a2766:	4628      	mov	r0, r5
 80a2768:	f002 fe15 	bl	80a5396 <strlen>
 80a276c:	2400      	movs	r4, #0
 80a276e:	b281      	uxth	r1, r0
 80a2770:	463b      	mov	r3, r7
 80a2772:	4628      	mov	r0, r5
 80a2774:	9400      	str	r4, [sp, #0]
 80a2776:	aa03      	add	r2, sp, #12
 80a2778:	f7fe feda 	bl	80a1530 <inet_gethostbyname>
 80a277c:	b990      	cbnz	r0, 80a27a4 <_ZN9TCPClient7connectEPKctm+0x60>
            return connect(ip_addr, port, nif);
 80a277e:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
 80a2780:	ad09      	add	r5, sp, #36	; 0x24
 80a2782:	f8d3 9020 	ldr.w	r9, [r3, #32]
 80a2786:	4b09      	ldr	r3, [pc, #36]	; (80a27ac <_ZN9TCPClient7connectEPKctm+0x68>)
 80a2788:	ac03      	add	r4, sp, #12
 80a278a:	9308      	str	r3, [sp, #32]
 80a278c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a278e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a2790:	6823      	ldr	r3, [r4, #0]
 80a2792:	4642      	mov	r2, r8
 80a2794:	702b      	strb	r3, [r5, #0]
 80a2796:	4630      	mov	r0, r6
 80a2798:	463b      	mov	r3, r7
 80a279a:	a908      	add	r1, sp, #32
 80a279c:	47c8      	blx	r9
}
 80a279e:	b00f      	add	sp, #60	; 0x3c
 80a27a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0; // error, could not connect
 80a27a4:	4620      	mov	r0, r4
 80a27a6:	e7fa      	b.n	80a279e <_ZN9TCPClient7connectEPKctm+0x5a>
 80a27a8:	20002290 	.word	0x20002290
 80a27ac:	080a5708 	.word	0x080a5708

080a27b0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a27b0:	4b02      	ldr	r3, [pc, #8]	; (80a27bc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a27b2:	681a      	ldr	r2, [r3, #0]
 80a27b4:	4b02      	ldr	r3, [pc, #8]	; (80a27c0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a27b6:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a27b8:	4770      	bx	lr
 80a27ba:	bf00      	nop
 80a27bc:	20001024 	.word	0x20001024
 80a27c0:	200022b8 	.word	0x200022b8

080a27c4 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
 80a27c4:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
 80a27c6:	6804      	ldr	r4, [r0, #0]
 80a27c8:	6b24      	ldr	r4, [r4, #48]	; 0x30
 80a27ca:	46a4      	mov	ip, r4
    }
 80a27cc:	bc10      	pop	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
 80a27ce:	4760      	bx	ip

080a27d0 <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
 80a27d0:	6803      	ldr	r3, [r0, #0]
 80a27d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a27d4:	4718      	bx	r3

080a27d6 <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
 80a27d6:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 80a27d8:	4770      	bx	lr

080a27da <_ZN3UDP9availableEv>:
    return bound;
}

int UDP::available()
{
    return _total - _offset;
 80a27da:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 80a27dc:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
 80a27de:	1a10      	subs	r0, r2, r0
 80a27e0:	4770      	bx	lr

080a27e2 <_ZN3UDP5writeEh>:
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}

size_t UDP::write(uint8_t byte)
{
 80a27e2:	b507      	push	{r0, r1, r2, lr}
    return write(&byte, 1);
 80a27e4:	6803      	ldr	r3, [r0, #0]
{
 80a27e6:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&byte, 1);
 80a27ea:	2201      	movs	r2, #1
 80a27ec:	68db      	ldr	r3, [r3, #12]
 80a27ee:	f10d 0107 	add.w	r1, sp, #7
 80a27f2:	4798      	blx	r3
}
 80a27f4:	b003      	add	sp, #12
 80a27f6:	f85d fb04 	ldr.w	pc, [sp], #4

080a27fa <_ZN3UDP4readEv>:
    }
    return ret;
}

int UDP::read()
{
 80a27fa:	b510      	push	{r4, lr}
  return available() ? _buffer[_offset++] : -1;
 80a27fc:	6803      	ldr	r3, [r0, #0]
{
 80a27fe:	4604      	mov	r4, r0
  return available() ? _buffer[_offset++] : -1;
 80a2800:	691b      	ldr	r3, [r3, #16]
 80a2802:	4798      	blx	r3
 80a2804:	b128      	cbz	r0, 80a2812 <_ZN3UDP4readEv+0x18>
 80a2806:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a2808:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80a280a:	1c59      	adds	r1, r3, #1
 80a280c:	86e1      	strh	r1, [r4, #54]	; 0x36
 80a280e:	5cd0      	ldrb	r0, [r2, r3]
}
 80a2810:	bd10      	pop	{r4, pc}
  return available() ? _buffer[_offset++] : -1;
 80a2812:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a2816:	e7fb      	b.n	80a2810 <_ZN3UDP4readEv+0x16>

080a2818 <_ZN3UDP4peekEv>:
    }
    return read;
}

int UDP::peek()
{
 80a2818:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
 80a281a:	6803      	ldr	r3, [r0, #0]
{
 80a281c:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
 80a281e:	691b      	ldr	r3, [r3, #16]
 80a2820:	4798      	blx	r3
 80a2822:	b118      	cbz	r0, 80a282c <_ZN3UDP4peekEv+0x14>
 80a2824:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a2826:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80a2828:	5cd0      	ldrb	r0, [r2, r3]
}
 80a282a:	bd10      	pop	{r4, pc}
    return available() ? _buffer[_offset] : -1;
 80a282c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a2830:	e7fb      	b.n	80a282a <_ZN3UDP4peekEv+0x12>

080a2832 <_ZN3UDP5flushEv>:

void UDP::flush()
{
}
 80a2832:	4770      	bx	lr

080a2834 <_ZNK3UDP7printToER5Print>:
  _offset = 0;
  _total = 0;
}

size_t UDP::printTo(Print& p) const
{
 80a2834:	4603      	mov	r3, r0
 80a2836:	4608      	mov	r0, r1
 80a2838:	b410      	push	{r4}
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
 80a283a:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
    return p.write(_buffer+_offset, size);
 80a283c:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    int size = _total - _offset;
 80a283e:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
    return p.write(_buffer+_offset, size);
 80a2840:	6803      	ldr	r3, [r0, #0]
 80a2842:	1a52      	subs	r2, r2, r1
 80a2844:	68db      	ldr	r3, [r3, #12]
 80a2846:	4421      	add	r1, r4
}
 80a2848:	bc10      	pop	{r4}
    return p.write(_buffer+_offset, size);
 80a284a:	4718      	bx	r3

080a284c <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
 80a284c:	f1a0 0010 	sub.w	r0, r0, #16
 80a2850:	f7ff bff0 	b.w	80a2834 <_ZNK3UDP7printToER5Print>

080a2854 <_ZN3UDP5beginEtm>:
{
 80a2854:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80a2858:	4616      	mov	r6, r2
    stop();
 80a285a:	6803      	ldr	r3, [r0, #0]
{
 80a285c:	4688      	mov	r8, r1
    stop();
 80a285e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
{
 80a2860:	4604      	mov	r4, r0
    stop();
 80a2862:	4798      	blx	r3
    if(Network.from(nif).ready())
 80a2864:	4630      	mov	r0, r6
 80a2866:	f7ff fb6d 	bl	80a1f44 <_ZN5spark12NetworkClass4fromEm>
 80a286a:	6803      	ldr	r3, [r0, #0]
 80a286c:	68db      	ldr	r3, [r3, #12]
 80a286e:	4798      	blx	r3
 80a2870:	4605      	mov	r5, r0
 80a2872:	b188      	cbz	r0, 80a2898 <_ZN3UDP5beginEtm+0x44>
       _sock = socket_create(AF_INET, SOCK_DGRAM, IPPROTO_UDP, port, nif);
 80a2874:	2102      	movs	r1, #2
 80a2876:	4643      	mov	r3, r8
 80a2878:	2211      	movs	r2, #17
 80a287a:	4608      	mov	r0, r1
 80a287c:	9600      	str	r6, [sp, #0]
 80a287e:	f7fe fd87 	bl	80a1390 <socket_create>
 80a2882:	6160      	str	r0, [r4, #20]
        if (socket_handle_valid(_sock))
 80a2884:	f7fe fd7c 	bl	80a1380 <socket_handle_valid>
 80a2888:	4607      	mov	r7, r0
 80a288a:	b148      	cbz	r0, 80a28a0 <_ZN3UDP5beginEtm+0x4c>
  _offset = 0;
 80a288c:	2300      	movs	r3, #0
            _port = port;
 80a288e:	f8a4 8018 	strh.w	r8, [r4, #24]
  _offset = 0;
 80a2892:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a2894:	8723      	strh	r3, [r4, #56]	; 0x38
            _nif = nif;
 80a2896:	6466      	str	r6, [r4, #68]	; 0x44
}
 80a2898:	4628      	mov	r0, r5
 80a289a:	b002      	add	sp, #8
 80a289c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            stop();
 80a28a0:	6823      	ldr	r3, [r4, #0]
 80a28a2:	4620      	mov	r0, r4
 80a28a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a28a6:	4798      	blx	r3
            bound = false;
 80a28a8:	463d      	mov	r5, r7
 80a28aa:	e7f5      	b.n	80a2898 <_ZN3UDP5beginEtm+0x44>

080a28ac <_ZN3UDP4stopEv>:
{
 80a28ac:	b538      	push	{r3, r4, r5, lr}
 80a28ae:	4604      	mov	r4, r0
    if (isOpen(_sock))
 80a28b0:	6945      	ldr	r5, [r0, #20]
   return sd != socket_handle_invalid();
 80a28b2:	f7fe fd95 	bl	80a13e0 <socket_handle_invalid>
    if (isOpen(_sock))
 80a28b6:	4285      	cmp	r5, r0
 80a28b8:	d002      	beq.n	80a28c0 <_ZN3UDP4stopEv+0x14>
        socket_close(_sock);
 80a28ba:	6960      	ldr	r0, [r4, #20]
 80a28bc:	f7fe fd88 	bl	80a13d0 <socket_close>
    _sock = socket_handle_invalid();
 80a28c0:	f7fe fd8e 	bl	80a13e0 <socket_handle_invalid>
  _offset = 0;
 80a28c4:	2300      	movs	r3, #0
    _sock = socket_handle_invalid();
 80a28c6:	6160      	str	r0, [r4, #20]
  _offset = 0;
 80a28c8:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a28ca:	8723      	strh	r3, [r4, #56]	; 0x38
}
 80a28cc:	bd38      	pop	{r3, r4, r5, pc}

080a28ce <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
{
 80a28ce:	b510      	push	{r4, lr}
    remoteSockAddr.sa_family = AF_INET;
 80a28d0:	2402      	movs	r4, #2
{
 80a28d2:	b086      	sub	sp, #24
    remoteSockAddr.sa_family = AF_INET;
 80a28d4:	f8ad 4008 	strh.w	r4, [sp, #8]
    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a28d8:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 80a28dc:	ba64      	rev16	r4, r4
 80a28de:	f8ad 400a 	strh.w	r4, [sp, #10]
    remoteSockAddr.sa_data[2] = remoteIP[0];
 80a28e2:	79dc      	ldrb	r4, [r3, #7]
 80a28e4:	f88d 400c 	strb.w	r4, [sp, #12]
    remoteSockAddr.sa_data[3] = remoteIP[1];
 80a28e8:	799c      	ldrb	r4, [r3, #6]
 80a28ea:	f88d 400d 	strb.w	r4, [sp, #13]
    remoteSockAddr.sa_data[4] = remoteIP[2];
 80a28ee:	795c      	ldrb	r4, [r3, #5]
    remoteSockAddr.sa_data[5] = remoteIP[3];
 80a28f0:	791b      	ldrb	r3, [r3, #4]
    remoteSockAddr.sa_data[4] = remoteIP[2];
 80a28f2:	f88d 400e 	strb.w	r4, [sp, #14]
    remoteSockAddr.sa_data[5] = remoteIP[3];
 80a28f6:	f88d 300f 	strb.w	r3, [sp, #15]
    int rv = socket_sendto(_sock, buffer, buffer_size, 0, &remoteSockAddr, sizeof(remoteSockAddr));
 80a28fa:	2310      	movs	r3, #16
 80a28fc:	9301      	str	r3, [sp, #4]
 80a28fe:	ab02      	add	r3, sp, #8
 80a2900:	9300      	str	r3, [sp, #0]
 80a2902:	6940      	ldr	r0, [r0, #20]
 80a2904:	2300      	movs	r3, #0
 80a2906:	f7fe fd5b 	bl	80a13c0 <socket_sendto>
}
 80a290a:	b006      	add	sp, #24
 80a290c:	bd10      	pop	{r4, pc}

080a290e <_ZN3UDP5writeEPKhj>:
{
 80a290e:	b570      	push	{r4, r5, r6, lr}
 80a2910:	4605      	mov	r5, r0
    size_t available = _buffer ? _buffer_size - _offset : 0;
 80a2912:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80a2914:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 80a2916:	b168      	cbz	r0, 80a2934 <_ZN3UDP5writeEPKhj+0x26>
 80a2918:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80a291a:	1b9c      	subs	r4, r3, r6
    if (size>available)
 80a291c:	4294      	cmp	r4, r2
 80a291e:	bf28      	it	cs
 80a2920:	4614      	movcs	r4, r2
    memcpy(_buffer+_offset, buffer, size);
 80a2922:	4430      	add	r0, r6
 80a2924:	4622      	mov	r2, r4
 80a2926:	f002 fcb3 	bl	80a5290 <memcpy>
    _offset += size;
 80a292a:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
}
 80a292c:	4620      	mov	r0, r4
    _offset += size;
 80a292e:	4423      	add	r3, r4
 80a2930:	86eb      	strh	r3, [r5, #54]	; 0x36
}
 80a2932:	bd70      	pop	{r4, r5, r6, pc}
    size_t available = _buffer ? _buffer_size - _offset : 0;
 80a2934:	4604      	mov	r4, r0
 80a2936:	e7f1      	b.n	80a291c <_ZN3UDP5writeEPKhj+0xe>

080a2938 <_ZN3UDP4readEPhj>:
{
 80a2938:	b570      	push	{r4, r5, r6, lr}
    if (available())
 80a293a:	6803      	ldr	r3, [r0, #0]
{
 80a293c:	4604      	mov	r4, r0
    if (available())
 80a293e:	691b      	ldr	r3, [r3, #16]
{
 80a2940:	460e      	mov	r6, r1
 80a2942:	4615      	mov	r5, r2
    if (available())
 80a2944:	4798      	blx	r3
 80a2946:	b190      	cbz	r0, 80a296e <_ZN3UDP4readEPhj+0x36>
    read = min(int(len), available());
 80a2948:	6823      	ldr	r3, [r4, #0]
 80a294a:	4620      	mov	r0, r4
 80a294c:	691b      	ldr	r3, [r3, #16]
 80a294e:	4798      	blx	r3
 80a2950:	4285      	cmp	r5, r0
 80a2952:	bfa8      	it	ge
 80a2954:	4605      	movge	r5, r0
      memcpy(buffer, &_buffer[_offset], read);
 80a2956:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a2958:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a295a:	462a      	mov	r2, r5
 80a295c:	4419      	add	r1, r3
 80a295e:	4630      	mov	r0, r6
 80a2960:	f002 fc96 	bl	80a5290 <memcpy>
      _offset += read;
 80a2964:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a2966:	442b      	add	r3, r5
 80a2968:	86e3      	strh	r3, [r4, #54]	; 0x36
}
 80a296a:	4628      	mov	r0, r5
 80a296c:	bd70      	pop	{r4, r5, r6, pc}
    int read = -1;
 80a296e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    return read;
 80a2972:	e7fa      	b.n	80a296a <_ZN3UDP4readEPhj+0x32>

080a2974 <_ZN3UDP13receivePacketEPhjm>:
{
 80a2974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2978:	4604      	mov	r4, r0
 80a297a:	b090      	sub	sp, #64	; 0x40
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a297c:	6c40      	ldr	r0, [r0, #68]	; 0x44
{
 80a297e:	461f      	mov	r7, r3
 80a2980:	460d      	mov	r5, r1
 80a2982:	4616      	mov	r6, r2
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a2984:	f7ff fade 	bl	80a1f44 <_ZN5spark12NetworkClass4fromEm>
 80a2988:	6803      	ldr	r3, [r0, #0]
 80a298a:	68db      	ldr	r3, [r3, #12]
 80a298c:	4798      	blx	r3
 80a298e:	b928      	cbnz	r0, 80a299c <_ZN3UDP13receivePacketEPhjm+0x28>
    int ret = -1;
 80a2990:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
}
 80a2994:	4630      	mov	r0, r6
 80a2996:	b010      	add	sp, #64	; 0x40
 80a2998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a299c:	f8d4 8014 	ldr.w	r8, [r4, #20]
   return sd != socket_handle_invalid();
 80a29a0:	f7fe fd1e 	bl	80a13e0 <socket_handle_invalid>
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a29a4:	4580      	cmp	r8, r0
 80a29a6:	d0f3      	beq.n	80a2990 <_ZN3UDP13receivePacketEPhjm+0x1c>
 80a29a8:	2d00      	cmp	r5, #0
 80a29aa:	d0f1      	beq.n	80a2990 <_ZN3UDP13receivePacketEPhjm+0x1c>
        socklen_t remoteSockAddrLen = sizeof(remoteSockAddr);
 80a29ac:	2310      	movs	r3, #16
 80a29ae:	9305      	str	r3, [sp, #20]
        ret = socket_receivefrom_ex(_sock, buffer, size, 0, &remoteSockAddr, &remoteSockAddrLen, timeout, nullptr);
 80a29b0:	2300      	movs	r3, #0
 80a29b2:	aa05      	add	r2, sp, #20
 80a29b4:	e9cd 7302 	strd	r7, r3, [sp, #8]
 80a29b8:	9201      	str	r2, [sp, #4]
 80a29ba:	aa06      	add	r2, sp, #24
 80a29bc:	9200      	str	r2, [sp, #0]
 80a29be:	4629      	mov	r1, r5
 80a29c0:	4632      	mov	r2, r6
 80a29c2:	6960      	ldr	r0, [r4, #20]
 80a29c4:	f7fe fd1c 	bl	80a1400 <socket_receivefrom_ex>
        if (ret >= 0)
 80a29c8:	1e06      	subs	r6, r0, #0
 80a29ca:	dbe3      	blt.n	80a2994 <_ZN3UDP13receivePacketEPhjm+0x20>
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
 80a29cc:	f8bd 301a 	ldrh.w	r3, [sp, #26]
        return *this = IPAddress(address);
 80a29d0:	a907      	add	r1, sp, #28
 80a29d2:	ba5b      	rev16	r3, r3
 80a29d4:	86a3      	strh	r3, [r4, #52]	; 0x34
 80a29d6:	a80a      	add	r0, sp, #40	; 0x28
class IPAddress : public Printable {
 80a29d8:	3420      	adds	r4, #32
 80a29da:	ad0b      	add	r5, sp, #44	; 0x2c
        return *this = IPAddress(address);
 80a29dc:	f7ff fa36 	bl	80a1e4c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 80a29e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a29e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a29e4:	682b      	ldr	r3, [r5, #0]
 80a29e6:	7023      	strb	r3, [r4, #0]
    return ret;
 80a29e8:	e7d4      	b.n	80a2994 <_ZN3UDP13receivePacketEPhjm+0x20>
	...

080a29ec <_ZN3UDP11beginPacketEPKct>:
{
 80a29ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a29f0:	4606      	mov	r6, r0
 80a29f2:	b094      	sub	sp, #80	; 0x50
    if(Network.from(_nif).ready())
 80a29f4:	6c40      	ldr	r0, [r0, #68]	; 0x44
{
 80a29f6:	460d      	mov	r5, r1
 80a29f8:	4617      	mov	r7, r2
    if(Network.from(_nif).ready())
 80a29fa:	f7ff faa3 	bl	80a1f44 <_ZN5spark12NetworkClass4fromEm>
 80a29fe:	6803      	ldr	r3, [r0, #0]
 80a2a00:	68db      	ldr	r3, [r3, #12]
 80a2a02:	4798      	blx	r3
 80a2a04:	b1f0      	cbz	r0, 80a2a44 <_ZN3UDP11beginPacketEPKct+0x58>
        if(inet_gethostbyname((char*)host, strlen(host), &ip_addr, _nif, NULL) == 0)
 80a2a06:	4628      	mov	r0, r5
 80a2a08:	f002 fcc5 	bl	80a5396 <strlen>
 80a2a0c:	2400      	movs	r4, #0
 80a2a0e:	b281      	uxth	r1, r0
 80a2a10:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80a2a12:	4628      	mov	r0, r5
 80a2a14:	9400      	str	r4, [sp, #0]
 80a2a16:	aa03      	add	r2, sp, #12
 80a2a18:	f7fe fd8a 	bl	80a1530 <inet_gethostbyname>
 80a2a1c:	b9a8      	cbnz	r0, 80a2a4a <_ZN3UDP11beginPacketEPKct+0x5e>
            IPAddress remote_addr(ip_addr);
 80a2a1e:	a903      	add	r1, sp, #12
 80a2a20:	a808      	add	r0, sp, #32
 80a2a22:	f7ff f9df 	bl	80a1de4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
            return beginPacket(remote_addr, port);
 80a2a26:	6833      	ldr	r3, [r6, #0]
 80a2a28:	ac0f      	add	r4, sp, #60	; 0x3c
 80a2a2a:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
 80a2a2e:	4b08      	ldr	r3, [pc, #32]	; (80a2a50 <_ZN3UDP11beginPacketEPKct+0x64>)
 80a2a30:	ad09      	add	r5, sp, #36	; 0x24
 80a2a32:	930e      	str	r3, [sp, #56]	; 0x38
 80a2a34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a2a36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a2a38:	682b      	ldr	r3, [r5, #0]
 80a2a3a:	463a      	mov	r2, r7
 80a2a3c:	4630      	mov	r0, r6
 80a2a3e:	7023      	strb	r3, [r4, #0]
 80a2a40:	a90e      	add	r1, sp, #56	; 0x38
 80a2a42:	47c0      	blx	r8
}
 80a2a44:	b014      	add	sp, #80	; 0x50
 80a2a46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return 0;
 80a2a4a:	4620      	mov	r0, r4
 80a2a4c:	e7fa      	b.n	80a2a44 <_ZN3UDP11beginPacketEPKct+0x58>
 80a2a4e:	bf00      	nop
 80a2a50:	080a5708 	.word	0x080a5708

080a2a54 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
 80a2a54:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2a56:	468c      	mov	ip, r1
 80a2a58:	4696      	mov	lr, r2
 80a2a5a:	4606      	mov	r6, r0
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
 80a2a5c:	6802      	ldr	r2, [r0, #0]
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
 80a2a5e:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
 80a2a60:	6a97      	ldr	r7, [r2, #40]	; 0x28
 80a2a62:	4a09      	ldr	r2, [pc, #36]	; (80a2a88 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
 80a2a64:	ad03      	add	r5, sp, #12
 80a2a66:	1d1c      	adds	r4, r3, #4
 80a2a68:	9202      	str	r2, [sp, #8]
 80a2a6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a2a6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a2a6e:	6823      	ldr	r3, [r4, #0]
 80a2a70:	4672      	mov	r2, lr
 80a2a72:	702b      	strb	r3, [r5, #0]
 80a2a74:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80a2a78:	4661      	mov	r1, ip
 80a2a7a:	9300      	str	r3, [sp, #0]
 80a2a7c:	4630      	mov	r0, r6
 80a2a7e:	ab02      	add	r3, sp, #8
 80a2a80:	47b8      	blx	r7
    }
 80a2a82:	b009      	add	sp, #36	; 0x24
 80a2a84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a2a86:	bf00      	nop
 80a2a88:	080a5708 	.word	0x080a5708

080a2a8c <_ZN3UDP8remoteIPEv>:
    virtual IPAddress remoteIP() { return _remoteIP; };
 80a2a8c:	b570      	push	{r4, r5, r6, lr}
 80a2a8e:	4604      	mov	r4, r0
 80a2a90:	4606      	mov	r6, r0
 80a2a92:	4b05      	ldr	r3, [pc, #20]	; (80a2aa8 <_ZN3UDP8remoteIPEv+0x1c>)
 80a2a94:	f101 0520 	add.w	r5, r1, #32
 80a2a98:	f844 3b04 	str.w	r3, [r4], #4
 80a2a9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a2a9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a2aa0:	682b      	ldr	r3, [r5, #0]
 80a2aa2:	4630      	mov	r0, r6
 80a2aa4:	7023      	strb	r3, [r4, #0]
 80a2aa6:	bd70      	pop	{r4, r5, r6, pc}
 80a2aa8:	080a5708 	.word	0x080a5708

080a2aac <_ZN3UDP9endPacketEv>:
{
 80a2aac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2aae:	4604      	mov	r4, r0
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
 80a2ab0:	6803      	ldr	r3, [r0, #0]
{
 80a2ab2:	b089      	sub	sp, #36	; 0x24
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
 80a2ab4:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 80a2ab6:	4b0c      	ldr	r3, [pc, #48]	; (80a2ae8 <_ZN3UDP9endPacketEv+0x3c>)
 80a2ab8:	ad03      	add	r5, sp, #12
 80a2aba:	f100 0620 	add.w	r6, r0, #32
 80a2abe:	9302      	str	r3, [sp, #8]
 80a2ac0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80a2ac2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a2ac4:	6833      	ldr	r3, [r6, #0]
 80a2ac6:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80a2ac8:	702b      	strb	r3, [r5, #0]
 80a2aca:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80a2acc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a2ace:	9300      	str	r3, [sp, #0]
 80a2ad0:	4620      	mov	r0, r4
 80a2ad2:	ab02      	add	r3, sp, #8
 80a2ad4:	47b8      	blx	r7
 80a2ad6:	4605      	mov	r5, r0
    flush(); // wait for send to complete
 80a2ad8:	6823      	ldr	r3, [r4, #0]
 80a2ada:	4620      	mov	r0, r4
 80a2adc:	69db      	ldr	r3, [r3, #28]
 80a2ade:	4798      	blx	r3
}
 80a2ae0:	4628      	mov	r0, r5
 80a2ae2:	b009      	add	sp, #36	; 0x24
 80a2ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a2ae6:	bf00      	nop
 80a2ae8:	080a5708 	.word	0x080a5708

080a2aec <_ZN3UDPC1Ev>:
UDP::UDP() :
 80a2aec:	b538      	push	{r3, r4, r5, lr}
 80a2aee:	2500      	movs	r5, #0
 80a2af0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2af4:	e9c0 5301 	strd	r5, r3, [r0, #4]
        _buffer_allocated(false)
 80a2af8:	4b0c      	ldr	r3, [pc, #48]	; (80a2b2c <_ZN3UDPC1Ev+0x40>)
UDP::UDP() :
 80a2afa:	4604      	mov	r4, r0
        _buffer_allocated(false)
 80a2afc:	f103 0208 	add.w	r2, r3, #8
 80a2b00:	336c      	adds	r3, #108	; 0x6c
 80a2b02:	6002      	str	r2, [r0, #0]
 80a2b04:	6103      	str	r3, [r0, #16]
        _sock(socket_handle_invalid()),
 80a2b06:	f7fe fc6b 	bl	80a13e0 <socket_handle_invalid>
        _buffer_allocated(false)
 80a2b0a:	6160      	str	r0, [r4, #20]
 80a2b0c:	f104 001c 	add.w	r0, r4, #28
 80a2b10:	f7ff f95a 	bl	80a1dc8 <_ZN9IPAddressC1Ev>
 80a2b14:	f44f 7300 	mov.w	r3, #512	; 0x200
}
 80a2b18:	4620      	mov	r0, r4
        _buffer_allocated(false)
 80a2b1a:	e9c4 3510 	strd	r3, r5, [r4, #64]	; 0x40
 80a2b1e:	86e5      	strh	r5, [r4, #54]	; 0x36
 80a2b20:	8725      	strh	r5, [r4, #56]	; 0x38
 80a2b22:	63e5      	str	r5, [r4, #60]	; 0x3c
 80a2b24:	f884 5048 	strb.w	r5, [r4, #72]	; 0x48
}
 80a2b28:	bd38      	pop	{r3, r4, r5, pc}
 80a2b2a:	bf00      	nop
 80a2b2c:	080a580c 	.word	0x080a580c

080a2b30 <_ZN3UDP13releaseBufferEv>:
{
 80a2b30:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
 80a2b32:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
{
 80a2b36:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
 80a2b38:	b123      	cbz	r3, 80a2b44 <_ZN3UDP13releaseBufferEv+0x14>
 80a2b3a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80a2b3c:	b110      	cbz	r0, 80a2b44 <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
 80a2b3e:	2101      	movs	r1, #1
 80a2b40:	f7fd faaf 	bl	80a00a2 <_ZdlPvj>
    _buffer = NULL;
 80a2b44:	2300      	movs	r3, #0
 80a2b46:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
 80a2b48:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
 80a2b4c:	6423      	str	r3, [r4, #64]	; 0x40
  _offset = 0;
 80a2b4e:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a2b50:	8723      	strh	r3, [r4, #56]	; 0x38
}
 80a2b52:	bd10      	pop	{r4, pc}

080a2b54 <_ZN3UDP9setBufferEjPh>:
{
 80a2b54:	b570      	push	{r4, r5, r6, lr}
 80a2b56:	4604      	mov	r4, r0
 80a2b58:	4616      	mov	r6, r2
 80a2b5a:	460d      	mov	r5, r1
    releaseBuffer();
 80a2b5c:	f7ff ffe8 	bl	80a2b30 <_ZN3UDP13releaseBufferEv>
    _buffer_size = 0;
 80a2b60:	2300      	movs	r3, #0
    _buffer = buffer;
 80a2b62:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
 80a2b64:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
 80a2b66:	b12e      	cbz	r6, 80a2b74 <_ZN3UDP9setBufferEjPh+0x20>
        _buffer_size = buf_size;
 80a2b68:	6425      	str	r5, [r4, #64]	; 0x40
    return _buffer_size;
 80a2b6a:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
 80a2b6c:	3800      	subs	r0, #0
 80a2b6e:	bf18      	it	ne
 80a2b70:	2001      	movne	r0, #1
 80a2b72:	bd70      	pop	{r4, r5, r6, pc}
    if (!_buffer && buf_size) {         // requested allocation
 80a2b74:	2d00      	cmp	r5, #0
 80a2b76:	d0f8      	beq.n	80a2b6a <_ZN3UDP9setBufferEjPh+0x16>
        _buffer = new uint8_t[buf_size];
 80a2b78:	4628      	mov	r0, r5
 80a2b7a:	f7fd fa90 	bl	80a009e <_Znaj>
        _buffer_allocated = true;
 80a2b7e:	2301      	movs	r3, #1
        _buffer = new uint8_t[buf_size];
 80a2b80:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
 80a2b82:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    if (_buffer) {
 80a2b86:	2800      	cmp	r0, #0
 80a2b88:	d0ef      	beq.n	80a2b6a <_ZN3UDP9setBufferEjPh+0x16>
 80a2b8a:	e7ed      	b.n	80a2b68 <_ZN3UDP9setBufferEjPh+0x14>

080a2b8c <_ZN3UDP11beginPacketE9IPAddresst>:
{
 80a2b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2b8e:	4617      	mov	r7, r2
    if (!_buffer && _buffer_size) {
 80a2b90:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
{
 80a2b92:	4605      	mov	r5, r0
 80a2b94:	460c      	mov	r4, r1
    if (!_buffer && _buffer_size) {
 80a2b96:	b91a      	cbnz	r2, 80a2ba0 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
 80a2b98:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80a2b9a:	b109      	cbz	r1, 80a2ba0 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
 80a2b9c:	f7ff ffda 	bl	80a2b54 <_ZN3UDP9setBufferEjPh>
 80a2ba0:	f105 0620 	add.w	r6, r5, #32
 80a2ba4:	3404      	adds	r4, #4
 80a2ba6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a2ba8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80a2baa:	6823      	ldr	r3, [r4, #0]
 80a2bac:	7033      	strb	r3, [r6, #0]
  _offset = 0;
 80a2bae:	2300      	movs	r3, #0
}
 80a2bb0:	6c28      	ldr	r0, [r5, #64]	; 0x40
    _remotePort = port;
 80a2bb2:	86af      	strh	r7, [r5, #52]	; 0x34
  _offset = 0;
 80a2bb4:	86eb      	strh	r3, [r5, #54]	; 0x36
  _total = 0;
 80a2bb6:	872b      	strh	r3, [r5, #56]	; 0x38
}
 80a2bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2bba <_ZN3UDP11parsePacketEm>:
{
 80a2bba:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
 80a2bbc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
{
 80a2bbe:	4604      	mov	r4, r0
 80a2bc0:	460d      	mov	r5, r1
    if (!_buffer && _buffer_size) {
 80a2bc2:	b91a      	cbnz	r2, 80a2bcc <_ZN3UDP11parsePacketEm+0x12>
 80a2bc4:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80a2bc6:	b109      	cbz	r1, 80a2bcc <_ZN3UDP11parsePacketEm+0x12>
        setBuffer(_buffer_size);
 80a2bc8:	f7ff ffc4 	bl	80a2b54 <_ZN3UDP9setBufferEjPh>
  _offset = 0;
 80a2bcc:	2300      	movs	r3, #0
    if (_buffer && _buffer_size) {
 80a2bce:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  _offset = 0;
 80a2bd0:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a2bd2:	8723      	strh	r3, [r4, #56]	; 0x38
    if (_buffer && _buffer_size) {
 80a2bd4:	b149      	cbz	r1, 80a2bea <_ZN3UDP11parsePacketEm+0x30>
 80a2bd6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80a2bd8:	b13a      	cbz	r2, 80a2bea <_ZN3UDP11parsePacketEm+0x30>
        int result = receivePacket(_buffer, _buffer_size, timeout);
 80a2bda:	6823      	ldr	r3, [r4, #0]
 80a2bdc:	4620      	mov	r0, r4
 80a2bde:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 80a2be0:	462b      	mov	r3, r5
 80a2be2:	47b0      	blx	r6
        if (result>0) {
 80a2be4:	2800      	cmp	r0, #0
            _total = result;
 80a2be6:	bfc8      	it	gt
 80a2be8:	8720      	strhgt	r0, [r4, #56]	; 0x38
    return available();
 80a2bea:	6823      	ldr	r3, [r4, #0]
 80a2bec:	4620      	mov	r0, r4
}
 80a2bee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return available();
 80a2bf2:	691b      	ldr	r3, [r3, #16]
 80a2bf4:	4718      	bx	r3
	...

080a2bf8 <_ZN3UDPD1Ev>:
    virtual ~UDP() { stop(); releaseBuffer(); }
 80a2bf8:	b510      	push	{r4, lr}
 80a2bfa:	4604      	mov	r4, r0
 80a2bfc:	4b06      	ldr	r3, [pc, #24]	; (80a2c18 <_ZN3UDPD1Ev+0x20>)
 80a2bfe:	f103 0208 	add.w	r2, r3, #8
 80a2c02:	336c      	adds	r3, #108	; 0x6c
 80a2c04:	6002      	str	r2, [r0, #0]
 80a2c06:	6103      	str	r3, [r0, #16]
 80a2c08:	f7ff fe50 	bl	80a28ac <_ZN3UDP4stopEv>
 80a2c0c:	4620      	mov	r0, r4
 80a2c0e:	f7ff ff8f 	bl	80a2b30 <_ZN3UDP13releaseBufferEv>
 80a2c12:	4620      	mov	r0, r4
 80a2c14:	bd10      	pop	{r4, pc}
 80a2c16:	bf00      	nop
 80a2c18:	080a580c 	.word	0x080a580c

080a2c1c <_ZN3UDPD0Ev>:
 80a2c1c:	b510      	push	{r4, lr}
 80a2c1e:	4604      	mov	r4, r0
 80a2c20:	f7ff ffea 	bl	80a2bf8 <_ZN3UDPD1Ev>
 80a2c24:	4620      	mov	r0, r4
 80a2c26:	214c      	movs	r1, #76	; 0x4c
 80a2c28:	f7fd fa3b 	bl	80a00a2 <_ZdlPvj>
 80a2c2c:	4620      	mov	r0, r4
 80a2c2e:	bd10      	pop	{r4, pc}

080a2c30 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 80a2c30:	4770      	bx	lr

080a2c32 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a2c32:	7441      	strb	r1, [r0, #17]
}
 80a2c34:	4770      	bx	lr

080a2c36 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 80a2c36:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a2c38:	7c00      	ldrb	r0, [r0, #16]
 80a2c3a:	f7fe fc29 	bl	80a1490 <hal_usart_available_data_for_write>
}
 80a2c3e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2c42:	bd08      	pop	{r3, pc}

080a2c44 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a2c44:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a2c46:	7c00      	ldrb	r0, [r0, #16]
 80a2c48:	f7fe fbfa 	bl	80a1440 <hal_usart_available>
}
 80a2c4c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2c50:	bd08      	pop	{r3, pc}

080a2c52 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a2c52:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a2c54:	7c00      	ldrb	r0, [r0, #16]
 80a2c56:	f7fe fc03 	bl	80a1460 <hal_usart_peek>
}
 80a2c5a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a2c5e:	bd08      	pop	{r3, pc}

080a2c60 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a2c60:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a2c62:	7c00      	ldrb	r0, [r0, #16]
 80a2c64:	f7fe fbf4 	bl	80a1450 <hal_usart_read>
}
 80a2c68:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a2c6c:	bd08      	pop	{r3, pc}

080a2c6e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80a2c6e:	7c00      	ldrb	r0, [r0, #16]
 80a2c70:	f7fe bbfe 	b.w	80a1470 <hal_usart_flush>

080a2c74 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a2c74:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a2c76:	7c46      	ldrb	r6, [r0, #17]
{
 80a2c78:	4604      	mov	r4, r0
 80a2c7a:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a2c7c:	b12e      	cbz	r6, 80a2c8a <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 80a2c7e:	4629      	mov	r1, r5
 80a2c80:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a2c82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a2c86:	f7fe bbd3 	b.w	80a1430 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a2c8a:	7c00      	ldrb	r0, [r0, #16]
 80a2c8c:	f7fe fc00 	bl	80a1490 <hal_usart_available_data_for_write>
 80a2c90:	2800      	cmp	r0, #0
 80a2c92:	dcf4      	bgt.n	80a2c7e <_ZN11USARTSerial5writeEh+0xa>
}
 80a2c94:	4630      	mov	r0, r6
 80a2c96:	bd70      	pop	{r4, r5, r6, pc}

080a2c98 <_ZN11USARTSerialD0Ev>:
 80a2c98:	b510      	push	{r4, lr}
 80a2c9a:	4604      	mov	r4, r0
 80a2c9c:	2114      	movs	r1, #20
 80a2c9e:	f7fd fa00 	bl	80a00a2 <_ZdlPvj>
 80a2ca2:	4620      	mov	r0, r4
 80a2ca4:	bd10      	pop	{r4, pc}
	...

080a2ca8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 80a2ca8:	b510      	push	{r4, lr}
 80a2caa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2cae:	4604      	mov	r4, r0
 80a2cb0:	4608      	mov	r0, r1
 80a2cb2:	4611      	mov	r1, r2
 80a2cb4:	2200      	movs	r2, #0
 80a2cb6:	e9c4 2301 	strd	r2, r3, [r4, #4]
 80a2cba:	4b04      	ldr	r3, [pc, #16]	; (80a2ccc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 80a2cbc:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 80a2cbe:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a2cc0:	2301      	movs	r3, #1
 80a2cc2:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 80a2cc4:	f7fe fbec 	bl	80a14a0 <hal_usart_init_ex>
}
 80a2cc8:	4620      	mov	r0, r4
 80a2cca:	bd10      	pop	{r4, pc}
 80a2ccc:	080a5884 	.word	0x080a5884

080a2cd0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a2cd0:	7441      	strb	r1, [r0, #17]
}
 80a2cd2:	4770      	bx	lr

080a2cd4 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2cd4:	4770      	bx	lr

080a2cd6 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a2cd6:	4770      	bx	lr

080a2cd8 <_ZN9USBSerial4readEv>:
{
 80a2cd8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a2cda:	2100      	movs	r1, #0
 80a2cdc:	7c00      	ldrb	r0, [r0, #16]
 80a2cde:	f7fe fc07 	bl	80a14f0 <HAL_USB_USART_Receive_Data>
}
 80a2ce2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a2ce6:	bd08      	pop	{r3, pc}

080a2ce8 <_ZN9USBSerial4peekEv>:
{
 80a2ce8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a2cea:	2101      	movs	r1, #1
 80a2cec:	7c00      	ldrb	r0, [r0, #16]
 80a2cee:	f7fe fbff 	bl	80a14f0 <HAL_USB_USART_Receive_Data>
}
 80a2cf2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a2cf6:	bd08      	pop	{r3, pc}

080a2cf8 <_ZN9USBSerial17availableForWriteEv>:
{
 80a2cf8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a2cfa:	7c00      	ldrb	r0, [r0, #16]
 80a2cfc:	f7fe fbf0 	bl	80a14e0 <HAL_USB_USART_Available_Data_For_Write>
}
 80a2d00:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2d04:	bd08      	pop	{r3, pc}

080a2d06 <_ZN9USBSerial9availableEv>:
{
 80a2d06:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a2d08:	7c00      	ldrb	r0, [r0, #16]
 80a2d0a:	f7fe fbe1 	bl	80a14d0 <HAL_USB_USART_Available_Data>
}
 80a2d0e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2d12:	bd08      	pop	{r3, pc}

080a2d14 <_ZN9USBSerial5writeEh>:
{
 80a2d14:	b538      	push	{r3, r4, r5, lr}
 80a2d16:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2d18:	7c00      	ldrb	r0, [r0, #16]
{
 80a2d1a:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2d1c:	f7fe fbe0 	bl	80a14e0 <HAL_USB_USART_Available_Data_For_Write>
 80a2d20:	2800      	cmp	r0, #0
 80a2d22:	dc01      	bgt.n	80a2d28 <_ZN9USBSerial5writeEh+0x14>
 80a2d24:	7c60      	ldrb	r0, [r4, #17]
 80a2d26:	b128      	cbz	r0, 80a2d34 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a2d28:	4629      	mov	r1, r5
 80a2d2a:	7c20      	ldrb	r0, [r4, #16]
 80a2d2c:	f7fe fbe8 	bl	80a1500 <HAL_USB_USART_Send_Data>
 80a2d30:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a2d34:	bd38      	pop	{r3, r4, r5, pc}

080a2d36 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a2d36:	7c00      	ldrb	r0, [r0, #16]
 80a2d38:	f7fe bbea 	b.w	80a1510 <HAL_USB_USART_Flush_Data>

080a2d3c <_ZN9USBSerialD0Ev>:
 80a2d3c:	b510      	push	{r4, lr}
 80a2d3e:	4604      	mov	r4, r0
 80a2d40:	2114      	movs	r1, #20
 80a2d42:	f7fd f9ae 	bl	80a00a2 <_ZdlPvj>
 80a2d46:	4620      	mov	r0, r4
 80a2d48:	bd10      	pop	{r4, pc}

080a2d4a <__tcf_1>:
 80a2d4a:	4770      	bx	lr

080a2d4c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a2d4c:	b510      	push	{r4, lr}
 80a2d4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2d52:	4604      	mov	r4, r0
 80a2d54:	4608      	mov	r0, r1
 80a2d56:	2100      	movs	r1, #0
 80a2d58:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a2d5c:	4b04      	ldr	r3, [pc, #16]	; (80a2d70 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a2d5e:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a2d60:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a2d62:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a2d64:	4611      	mov	r1, r2
  _blocking = true;
 80a2d66:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a2d68:	f7fe fba2 	bl	80a14b0 <HAL_USB_USART_Init>
}
 80a2d6c:	4620      	mov	r0, r4
 80a2d6e:	bd10      	pop	{r4, pc}
 80a2d70:	080a58b4 	.word	0x080a58b4

080a2d74 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a2d74:	2200      	movs	r2, #0
 80a2d76:	7c00      	ldrb	r0, [r0, #16]
 80a2d78:	f7fe bba2 	b.w	80a14c0 <HAL_USB_USART_Begin>

080a2d7c <_Z19acquireSerialBufferv>:
{
 80a2d7c:	b510      	push	{r4, lr}
 80a2d7e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 80a2d80:	2214      	movs	r2, #20
 80a2d82:	2100      	movs	r1, #0
 80a2d84:	f002 faac 	bl	80a52e0 <memset>
  conf.rx_buffer = serial_rx_buffer;
 80a2d88:	4b05      	ldr	r3, [pc, #20]	; (80a2da0 <_Z19acquireSerialBufferv+0x24>)
}
 80a2d8a:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80a2d8c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a2d8e:	4b05      	ldr	r3, [pc, #20]	; (80a2da4 <_Z19acquireSerialBufferv+0x28>)
 80a2d90:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a2d92:	f240 1301 	movw	r3, #257	; 0x101
 80a2d96:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a2d98:	2381      	movs	r3, #129	; 0x81
 80a2d9a:	8223      	strh	r3, [r4, #16]
}
 80a2d9c:	bd10      	pop	{r4, pc}
 80a2d9e:	bf00      	nop
 80a2da0:	200022ec 	.word	0x200022ec
 80a2da4:	200023ed 	.word	0x200023ed

080a2da8 <_Z16_fetch_usbserialv>:
{
 80a2da8:	b530      	push	{r4, r5, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2daa:	4d0e      	ldr	r5, [pc, #56]	; (80a2de4 <_Z16_fetch_usbserialv+0x3c>)
{
 80a2dac:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a2dae:	a801      	add	r0, sp, #4
 80a2db0:	f7ff ffe4 	bl	80a2d7c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2db4:	7829      	ldrb	r1, [r5, #0]
 80a2db6:	f3bf 8f5b 	dmb	ish
 80a2dba:	f011 0401 	ands.w	r4, r1, #1
 80a2dbe:	d10e      	bne.n	80a2dde <_Z16_fetch_usbserialv+0x36>
 80a2dc0:	4628      	mov	r0, r5
 80a2dc2:	f7fd f970 	bl	80a00a6 <__cxa_guard_acquire>
 80a2dc6:	b150      	cbz	r0, 80a2dde <_Z16_fetch_usbserialv+0x36>
 80a2dc8:	4621      	mov	r1, r4
 80a2dca:	aa01      	add	r2, sp, #4
 80a2dcc:	4806      	ldr	r0, [pc, #24]	; (80a2de8 <_Z16_fetch_usbserialv+0x40>)
 80a2dce:	f7ff ffbd 	bl	80a2d4c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2dd2:	4628      	mov	r0, r5
 80a2dd4:	f7fd f96c 	bl	80a00b0 <__cxa_guard_release>
 80a2dd8:	4804      	ldr	r0, [pc, #16]	; (80a2dec <_Z16_fetch_usbserialv+0x44>)
 80a2dda:	f002 fa4f 	bl	80a527c <atexit>
	return _usbserial;
}
 80a2dde:	4802      	ldr	r0, [pc, #8]	; (80a2de8 <_Z16_fetch_usbserialv+0x40>)
 80a2de0:	b007      	add	sp, #28
 80a2de2:	bd30      	pop	{r4, r5, pc}
 80a2de4:	200022bc 	.word	0x200022bc
 80a2de8:	200022c4 	.word	0x200022c4
 80a2dec:	080a2cd5 	.word	0x080a2cd5

080a2df0 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a2df0:	b510      	push	{r4, lr}
 80a2df2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 80a2df4:	2214      	movs	r2, #20
 80a2df6:	2100      	movs	r1, #0
 80a2df8:	f002 fa72 	bl	80a52e0 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a2dfc:	4b05      	ldr	r3, [pc, #20]	; (80a2e14 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a2dfe:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80a2e00:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a2e02:	4b05      	ldr	r3, [pc, #20]	; (80a2e18 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a2e04:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a2e06:	f240 1301 	movw	r3, #257	; 0x101
 80a2e0a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a2e0c:	2381      	movs	r3, #129	; 0x81
 80a2e0e:	8223      	strh	r3, [r4, #16]
}
 80a2e10:	bd10      	pop	{r4, pc}
 80a2e12:	bf00      	nop
 80a2e14:	2000246e 	.word	0x2000246e
 80a2e18:	2000256f 	.word	0x2000256f

080a2e1c <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a2e1c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2e1e:	4c0e      	ldr	r4, [pc, #56]	; (80a2e58 <_Z17_fetch_usbserial1v+0x3c>)
{
 80a2e20:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a2e22:	a801      	add	r0, sp, #4
 80a2e24:	f7ff ffe4 	bl	80a2df0 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2e28:	7823      	ldrb	r3, [r4, #0]
 80a2e2a:	f3bf 8f5b 	dmb	ish
 80a2e2e:	07db      	lsls	r3, r3, #31
 80a2e30:	d40e      	bmi.n	80a2e50 <_Z17_fetch_usbserial1v+0x34>
 80a2e32:	4620      	mov	r0, r4
 80a2e34:	f7fd f937 	bl	80a00a6 <__cxa_guard_acquire>
 80a2e38:	b150      	cbz	r0, 80a2e50 <_Z17_fetch_usbserial1v+0x34>
 80a2e3a:	2101      	movs	r1, #1
 80a2e3c:	aa01      	add	r2, sp, #4
 80a2e3e:	4807      	ldr	r0, [pc, #28]	; (80a2e5c <_Z17_fetch_usbserial1v+0x40>)
 80a2e40:	f7ff ff84 	bl	80a2d4c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2e44:	4620      	mov	r0, r4
 80a2e46:	f7fd f933 	bl	80a00b0 <__cxa_guard_release>
 80a2e4a:	4805      	ldr	r0, [pc, #20]	; (80a2e60 <_Z17_fetch_usbserial1v+0x44>)
 80a2e4c:	f002 fa16 	bl	80a527c <atexit>
  return _usbserial1;
}
 80a2e50:	4802      	ldr	r0, [pc, #8]	; (80a2e5c <_Z17_fetch_usbserial1v+0x40>)
 80a2e52:	b006      	add	sp, #24
 80a2e54:	bd10      	pop	{r4, pc}
 80a2e56:	bf00      	nop
 80a2e58:	200022c0 	.word	0x200022c0
 80a2e5c:	200022d8 	.word	0x200022d8
 80a2e60:	080a2d4b 	.word	0x080a2d4b

080a2e64 <_ZN5spark9WiFiClass5readyEv>:
        return network_ready(*this, 0, NULL);
 80a2e64:	2200      	movs	r2, #0
 80a2e66:	6840      	ldr	r0, [r0, #4]
 80a2e68:	4611      	mov	r1, r2
 80a2e6a:	f7fe bbdd 	b.w	80a1628 <network_ready>

080a2e6e <_ZN5spark9WiFiClass7resolveEPKc>:
    IPAddress resolve(const char* name)
 80a2e6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2e70:	4615      	mov	r5, r2
 80a2e72:	b089      	sub	sp, #36	; 0x24
        HAL_IPAddress ip = {};
 80a2e74:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a2e76:	460e      	mov	r6, r1
 80a2e78:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a2e7a:	2100      	movs	r1, #0
 80a2e7c:	a803      	add	r0, sp, #12
 80a2e7e:	f002 fa2f 	bl	80a52e0 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2e82:	4628      	mov	r0, r5
 80a2e84:	f002 fa87 	bl	80a5396 <strlen>
 80a2e88:	2700      	movs	r7, #0
 80a2e8a:	b281      	uxth	r1, r0
 80a2e8c:	6873      	ldr	r3, [r6, #4]
 80a2e8e:	4628      	mov	r0, r5
 80a2e90:	9700      	str	r7, [sp, #0]
 80a2e92:	aa03      	add	r2, sp, #12
 80a2e94:	f7fe fb4c 	bl	80a1530 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2e98:	b130      	cbz	r0, 80a2ea8 <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a2e9a:	4639      	mov	r1, r7
 80a2e9c:	4620      	mov	r0, r4
 80a2e9e:	f7fe ffb3 	bl	80a1e08 <_ZN9IPAddressC1Em>
    }
 80a2ea2:	4620      	mov	r0, r4
 80a2ea4:	b009      	add	sp, #36	; 0x24
 80a2ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2ea8:	4620      	mov	r0, r4
 80a2eaa:	a903      	add	r1, sp, #12
 80a2eac:	f7fe ff9a 	bl	80a1de4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a2eb0:	e7f7      	b.n	80a2ea2 <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a2eb2 <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a2eb2:	2200      	movs	r2, #0
 80a2eb4:	6840      	ldr	r0, [r0, #4]
 80a2eb6:	4611      	mov	r1, r2
 80a2eb8:	f7fe bbd6 	b.w	80a1668 <network_listening>

080a2ebc <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a2ebc:	2200      	movs	r2, #0
 80a2ebe:	6840      	ldr	r0, [r0, #4]
 80a2ec0:	4611      	mov	r1, r2
 80a2ec2:	f7fe bbe1 	b.w	80a1688 <network_get_listen_timeout>

080a2ec6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a2ec6:	2200      	movs	r2, #0
 80a2ec8:	6840      	ldr	r0, [r0, #4]
 80a2eca:	f7fe bbd5 	b.w	80a1678 <network_set_listen_timeout>

080a2ece <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a2ece:	2200      	movs	r2, #0
 80a2ed0:	6840      	ldr	r0, [r0, #4]
 80a2ed2:	f081 0101 	eor.w	r1, r1, #1
 80a2ed6:	f7fe bbbf 	b.w	80a1658 <network_listen>

080a2eda <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a2eda:	2300      	movs	r3, #0
 80a2edc:	6840      	ldr	r0, [r0, #4]
 80a2ede:	461a      	mov	r2, r3
 80a2ee0:	4619      	mov	r1, r3
 80a2ee2:	f7fe bbb1 	b.w	80a1648 <network_off>

080a2ee6 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 80a2ee6:	2300      	movs	r3, #0
 80a2ee8:	6840      	ldr	r0, [r0, #4]
 80a2eea:	461a      	mov	r2, r3
 80a2eec:	4619      	mov	r1, r3
 80a2eee:	f7fe bba3 	b.w	80a1638 <network_on>

080a2ef2 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a2ef2:	2200      	movs	r2, #0
 80a2ef4:	6840      	ldr	r0, [r0, #4]
 80a2ef6:	4611      	mov	r1, r2
 80a2ef8:	f7fe bb86 	b.w	80a1608 <network_connecting>

080a2efc <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a2efc:	2200      	movs	r2, #0
 80a2efe:	2102      	movs	r1, #2
 80a2f00:	6840      	ldr	r0, [r0, #4]
 80a2f02:	f7fe bb89 	b.w	80a1618 <network_disconnect>

080a2f06 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a2f06:	2300      	movs	r3, #0
 80a2f08:	6840      	ldr	r0, [r0, #4]
 80a2f0a:	461a      	mov	r2, r3
 80a2f0c:	f7fe bb74 	b.w	80a15f8 <network_connect>

080a2f10 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a2f10:	2204      	movs	r2, #4
 80a2f12:	4b02      	ldr	r3, [pc, #8]	; (80a2f1c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a2f14:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a2f16:	4a02      	ldr	r2, [pc, #8]	; (80a2f20 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a2f18:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a2f1a:	4770      	bx	lr
 80a2f1c:	200025f0 	.word	0x200025f0
 80a2f20:	080a58e4 	.word	0x080a58e4

080a2f24 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a2f24:	4b01      	ldr	r3, [pc, #4]	; (80a2f2c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a2f26:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a2f28:	4770      	bx	lr
 80a2f2a:	bf00      	nop
 80a2f2c:	20001028 	.word	0x20001028

080a2f30 <serialEventRun>:
{
 80a2f30:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a2f32:	4b13      	ldr	r3, [pc, #76]	; (80a2f80 <serialEventRun+0x50>)
 80a2f34:	b143      	cbz	r3, 80a2f48 <serialEventRun+0x18>
 80a2f36:	f7ff ff37 	bl	80a2da8 <_Z16_fetch_usbserialv>
 80a2f3a:	6803      	ldr	r3, [r0, #0]
 80a2f3c:	691b      	ldr	r3, [r3, #16]
 80a2f3e:	4798      	blx	r3
 80a2f40:	2800      	cmp	r0, #0
 80a2f42:	dd01      	ble.n	80a2f48 <serialEventRun+0x18>
        serialEvent();
 80a2f44:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a2f48:	4b0e      	ldr	r3, [pc, #56]	; (80a2f84 <serialEventRun+0x54>)
 80a2f4a:	b143      	cbz	r3, 80a2f5e <serialEventRun+0x2e>
 80a2f4c:	f000 f9b6 	bl	80a32bc <_Z22__fetch_global_Serial1v>
 80a2f50:	6803      	ldr	r3, [r0, #0]
 80a2f52:	691b      	ldr	r3, [r3, #16]
 80a2f54:	4798      	blx	r3
 80a2f56:	2800      	cmp	r0, #0
 80a2f58:	dd01      	ble.n	80a2f5e <serialEventRun+0x2e>
        serialEvent1();
 80a2f5a:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a2f5e:	4b0a      	ldr	r3, [pc, #40]	; (80a2f88 <serialEventRun+0x58>)
 80a2f60:	b10b      	cbz	r3, 80a2f66 <serialEventRun+0x36>
 80a2f62:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a2f66:	4b09      	ldr	r3, [pc, #36]	; (80a2f8c <serialEventRun+0x5c>)
 80a2f68:	b143      	cbz	r3, 80a2f7c <serialEventRun+0x4c>
 80a2f6a:	f7ff ff57 	bl	80a2e1c <_Z17_fetch_usbserial1v>
 80a2f6e:	6803      	ldr	r3, [r0, #0]
 80a2f70:	691b      	ldr	r3, [r3, #16]
 80a2f72:	4798      	blx	r3
 80a2f74:	2800      	cmp	r0, #0
 80a2f76:	dd01      	ble.n	80a2f7c <serialEventRun+0x4c>
        usbSerialEvent1();
 80a2f78:	f3af 8000 	nop.w
}
 80a2f7c:	bd08      	pop	{r3, pc}
 80a2f7e:	bf00      	nop
	...

080a2f90 <_post_loop>:
{
 80a2f90:	b508      	push	{r3, lr}
	serialEventRun();
 80a2f92:	f7ff ffcd 	bl	80a2f30 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a2f96:	f7fe f969 	bl	80a126c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a2f9a:	4b01      	ldr	r3, [pc, #4]	; (80a2fa0 <_post_loop+0x10>)
 80a2f9c:	6018      	str	r0, [r3, #0]
}
 80a2f9e:	bd08      	pop	{r3, pc}
 80a2fa0:	20002610 	.word	0x20002610

080a2fa4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a2fa4:	4805      	ldr	r0, [pc, #20]	; (80a2fbc <_Z33system_initialize_user_backup_ramv+0x18>)
 80a2fa6:	4a06      	ldr	r2, [pc, #24]	; (80a2fc0 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 80a2fa8:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a2faa:	1a12      	subs	r2, r2, r0
 80a2fac:	4905      	ldr	r1, [pc, #20]	; (80a2fc4 <_Z33system_initialize_user_backup_ramv+0x20>)
 80a2fae:	f002 f96f 	bl	80a5290 <memcpy>
    __backup_sram_signature = signature;
 80a2fb2:	4b05      	ldr	r3, [pc, #20]	; (80a2fc8 <_Z33system_initialize_user_backup_ramv+0x24>)
 80a2fb4:	4a05      	ldr	r2, [pc, #20]	; (80a2fcc <_Z33system_initialize_user_backup_ramv+0x28>)
 80a2fb6:	601a      	str	r2, [r3, #0]
}
 80a2fb8:	bd08      	pop	{r3, pc}
 80a2fba:	bf00      	nop
 80a2fbc:	40024000 	.word	0x40024000
 80a2fc0:	40024004 	.word	0x40024004
 80a2fc4:	080a5da0 	.word	0x080a5da0
 80a2fc8:	40024000 	.word	0x40024000
 80a2fcc:	9a271c1e 	.word	0x9a271c1e

080a2fd0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2fd0:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a2fd2:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2fd4:	461a      	mov	r2, r3
 80a2fd6:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2fda:	9300      	str	r3, [sp, #0]
 80a2fdc:	f7fe fada 	bl	80a1594 <system_ctrl_set_result>
}
 80a2fe0:	b003      	add	sp, #12
 80a2fe2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a2fe8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a2fe8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a2fea:	8843      	ldrh	r3, [r0, #2]
 80a2fec:	2b0a      	cmp	r3, #10
 80a2fee:	d008      	beq.n	80a3002 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a2ff0:	2b50      	cmp	r3, #80	; 0x50
 80a2ff2:	d10b      	bne.n	80a300c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a2ff4:	4b09      	ldr	r3, [pc, #36]	; (80a301c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a2ff6:	681b      	ldr	r3, [r3, #0]
 80a2ff8:	b14b      	cbz	r3, 80a300e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a2ffa:	b003      	add	sp, #12
 80a2ffc:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a3000:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a3002:	f7ff ffe5 	bl	80a2fd0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a3006:	b003      	add	sp, #12
 80a3008:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a300c:	2300      	movs	r3, #0
 80a300e:	461a      	mov	r2, r3
 80a3010:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a3014:	9300      	str	r3, [sp, #0]
 80a3016:	f7fe fabd 	bl	80a1594 <system_ctrl_set_result>
}
 80a301a:	e7f4      	b.n	80a3006 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a301c:	200025fc 	.word	0x200025fc

080a3020 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a3020:	2100      	movs	r1, #0
{
 80a3022:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a3024:	4811      	ldr	r0, [pc, #68]	; (80a306c <module_user_init_hook+0x4c>)
 80a3026:	f7fe fb7f 	bl	80a1728 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 80a302a:	4b11      	ldr	r3, [pc, #68]	; (80a3070 <module_user_init_hook+0x50>)
 80a302c:	681a      	ldr	r2, [r3, #0]
 80a302e:	4b11      	ldr	r3, [pc, #68]	; (80a3074 <module_user_init_hook+0x54>)
 80a3030:	429a      	cmp	r2, r3
 80a3032:	bf0c      	ite	eq
 80a3034:	2201      	moveq	r2, #1
 80a3036:	2200      	movne	r2, #0
 80a3038:	4b0f      	ldr	r3, [pc, #60]	; (80a3078 <module_user_init_hook+0x58>)
 80a303a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a303c:	d001      	beq.n	80a3042 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 80a303e:	f7ff ffb1 	bl	80a2fa4 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a3042:	f7fe f90b 	bl	80a125c <HAL_RNG_GetRandomNumber>
 80a3046:	4604      	mov	r4, r0
    srand(seed);
 80a3048:	f002 f952 	bl	80a52f0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a304c:	4b0b      	ldr	r3, [pc, #44]	; (80a307c <module_user_init_hook+0x5c>)
 80a304e:	b113      	cbz	r3, 80a3056 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 80a3050:	4620      	mov	r0, r4
 80a3052:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a3056:	2100      	movs	r1, #0
 80a3058:	4808      	ldr	r0, [pc, #32]	; (80a307c <module_user_init_hook+0x5c>)
 80a305a:	f7fe fac5 	bl	80a15e8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a305e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a3062:	2100      	movs	r1, #0
 80a3064:	4806      	ldr	r0, [pc, #24]	; (80a3080 <module_user_init_hook+0x60>)
 80a3066:	f7fe ba8b 	b.w	80a1580 <system_ctrl_set_app_request_handler>
 80a306a:	bf00      	nop
 80a306c:	080a2f25 	.word	0x080a2f25
 80a3070:	40024000 	.word	0x40024000
 80a3074:	9a271c1e 	.word	0x9a271c1e
 80a3078:	200025f8 	.word	0x200025f8
 80a307c:	00000000 	.word	0x00000000
 80a3080:	080a2fe9 	.word	0x080a2fe9

080a3084 <__tcf_0>:
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a3084:	4b02      	ldr	r3, [pc, #8]	; (80a3090 <__tcf_0+0xc>)
 80a3086:	6898      	ldr	r0, [r3, #8]
 80a3088:	b108      	cbz	r0, 80a308e <__tcf_0+0xa>
            os_mutex_recursive_destroy(handle_);
 80a308a:	f7fe b8d7 	b.w	80a123c <os_mutex_recursive_destroy>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a308e:	4770      	bx	lr
 80a3090:	20002604 	.word	0x20002604

080a3094 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a3094:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a3096:	b570      	push	{r4, r5, r6, lr}
 80a3098:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a309a:	d901      	bls.n	80a30a0 <pinAvailable+0xc>
    return false;
 80a309c:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a309e:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a30a0:	f1a0 030d 	sub.w	r3, r0, #13
 80a30a4:	2b02      	cmp	r3, #2
 80a30a6:	d90b      	bls.n	80a30c0 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a30a8:	2801      	cmp	r0, #1
 80a30aa:	d824      	bhi.n	80a30f6 <pinAvailable+0x62>
 80a30ac:	f000 f8b8 	bl	80a3220 <_Z19__fetch_global_Wirev>
 80a30b0:	2100      	movs	r1, #0
 80a30b2:	7c00      	ldrb	r0, [r0, #16]
 80a30b4:	f7fe f94a 	bl	80a134c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a30b8:	f080 0001 	eor.w	r0, r0, #1
 80a30bc:	b2c0      	uxtb	r0, r0
 80a30be:	e7ee      	b.n	80a309e <pinAvailable+0xa>
 80a30c0:	4e12      	ldr	r6, [pc, #72]	; (80a310c <pinAvailable+0x78>)
 80a30c2:	7831      	ldrb	r1, [r6, #0]
 80a30c4:	f3bf 8f5b 	dmb	ish
 80a30c8:	f011 0501 	ands.w	r5, r1, #1
 80a30cc:	d10d      	bne.n	80a30ea <pinAvailable+0x56>
 80a30ce:	4630      	mov	r0, r6
 80a30d0:	f7fc ffe9 	bl	80a00a6 <__cxa_guard_acquire>
 80a30d4:	b148      	cbz	r0, 80a30ea <pinAvailable+0x56>
 80a30d6:	4629      	mov	r1, r5
 80a30d8:	480d      	ldr	r0, [pc, #52]	; (80a3110 <pinAvailable+0x7c>)
 80a30da:	f7ff f875 	bl	80a21c8 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a30de:	4630      	mov	r0, r6
 80a30e0:	f7fc ffe6 	bl	80a00b0 <__cxa_guard_release>
 80a30e4:	480b      	ldr	r0, [pc, #44]	; (80a3114 <pinAvailable+0x80>)
 80a30e6:	f002 f8c9 	bl	80a527c <atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a30ea:	4b09      	ldr	r3, [pc, #36]	; (80a3110 <pinAvailable+0x7c>)
 80a30ec:	7818      	ldrb	r0, [r3, #0]
 80a30ee:	f7fe f997 	bl	80a1420 <hal_spi_is_enabled>
 80a30f2:	2800      	cmp	r0, #0
 80a30f4:	d1d2      	bne.n	80a309c <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a30f6:	3c12      	subs	r4, #18
 80a30f8:	2c01      	cmp	r4, #1
 80a30fa:	d805      	bhi.n	80a3108 <pinAvailable+0x74>
 80a30fc:	f000 f8de 	bl	80a32bc <_Z22__fetch_global_Serial1v>
 80a3100:	7c00      	ldrb	r0, [r0, #16]
 80a3102:	f7fe f9bd 	bl	80a1480 <hal_usart_is_enabled>
 80a3106:	e7d7      	b.n	80a30b8 <pinAvailable+0x24>
  return true; // 'pin' is available
 80a3108:	2001      	movs	r0, #1
 80a310a:	e7c8      	b.n	80a309e <pinAvailable+0xa>
 80a310c:	20002600 	.word	0x20002600
 80a3110:	20002604 	.word	0x20002604
 80a3114:	080a3085 	.word	0x080a3085

080a3118 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a3118:	2817      	cmp	r0, #23
{
 80a311a:	b538      	push	{r3, r4, r5, lr}
 80a311c:	4604      	mov	r4, r0
 80a311e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a3120:	d80a      	bhi.n	80a3138 <pinMode+0x20>
 80a3122:	29ff      	cmp	r1, #255	; 0xff
 80a3124:	d008      	beq.n	80a3138 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a3126:	f7ff ffb5 	bl	80a3094 <pinAvailable>
 80a312a:	b128      	cbz	r0, 80a3138 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a312c:	4629      	mov	r1, r5
 80a312e:	4620      	mov	r0, r4
}
 80a3130:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a3134:	f7fe b8b2 	b.w	80a129c <HAL_Pin_Mode>
}
 80a3138:	bd38      	pop	{r3, r4, r5, pc}

080a313a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a313a:	b538      	push	{r3, r4, r5, lr}
 80a313c:	4604      	mov	r4, r0
 80a313e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a3140:	f7fe f8b4 	bl	80a12ac <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a3144:	28ff      	cmp	r0, #255	; 0xff
 80a3146:	d010      	beq.n	80a316a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80a3148:	2806      	cmp	r0, #6
 80a314a:	d804      	bhi.n	80a3156 <digitalWrite+0x1c>
 80a314c:	234d      	movs	r3, #77	; 0x4d
 80a314e:	fa23 f000 	lsr.w	r0, r3, r0
 80a3152:	07c3      	lsls	r3, r0, #31
 80a3154:	d409      	bmi.n	80a316a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a3156:	4620      	mov	r0, r4
 80a3158:	f7ff ff9c 	bl	80a3094 <pinAvailable>
 80a315c:	b128      	cbz	r0, 80a316a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a315e:	4629      	mov	r1, r5
 80a3160:	4620      	mov	r0, r4
}
 80a3162:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80a3166:	f7fe b8a9 	b.w	80a12bc <HAL_GPIO_Write>
}
 80a316a:	bd38      	pop	{r3, r4, r5, pc}

080a316c <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
 80a316c:	b538      	push	{r3, r4, r5, lr}
 80a316e:	4604      	mov	r4, r0
 80a3170:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
 80a3172:	f7ff ff8f 	bl	80a3094 <pinAvailable>
 80a3176:	b1f0      	cbz	r0, 80a31b6 <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
 80a3178:	2104      	movs	r1, #4
 80a317a:	4620      	mov	r0, r4
 80a317c:	f7fe f886 	bl	80a128c <HAL_Validate_Pin_Function>
 80a3180:	2804      	cmp	r0, #4
 80a3182:	d105      	bne.n	80a3190 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
 80a3184:	4620      	mov	r0, r4
 80a3186:	b2a9      	uxth	r1, r5
            return;
        }

        hal_pwm_write_ext(pin, value);
    }
}
 80a3188:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_DAC_Write(pin, value);
 80a318c:	f7fe b89e 	b.w	80a12cc <HAL_DAC_Write>
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
 80a3190:	2102      	movs	r1, #2
 80a3192:	4620      	mov	r0, r4
 80a3194:	f7fe f87a 	bl	80a128c <HAL_Validate_Pin_Function>
 80a3198:	2802      	cmp	r0, #2
 80a319a:	d10c      	bne.n	80a31b6 <_Z11analogWritetm+0x4a>
        PinMode mode = HAL_Get_Pin_Mode(pin);
 80a319c:	4620      	mov	r0, r4
 80a319e:	f7fe f885 	bl	80a12ac <HAL_Get_Pin_Mode>
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
 80a31a2:	2801      	cmp	r0, #1
 80a31a4:	d001      	beq.n	80a31aa <_Z11analogWritetm+0x3e>
 80a31a6:	2804      	cmp	r0, #4
 80a31a8:	d105      	bne.n	80a31b6 <_Z11analogWritetm+0x4a>
        hal_pwm_write_ext(pin, value);
 80a31aa:	4629      	mov	r1, r5
 80a31ac:	4620      	mov	r0, r4
}
 80a31ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        hal_pwm_write_ext(pin, value);
 80a31b2:	f7fe b893 	b.w	80a12dc <hal_pwm_write_ext>
}
 80a31b6:	bd38      	pop	{r3, r4, r5, pc}

080a31b8 <_Z11analogWritetmm>:
/*
 * @brief Should take an integer 0-255 and create a PWM signal with a duty cycle from 0-100%
 * and frequency from 1 to 65535 Hz.
 */
void analogWrite(pin_t pin, uint32_t value, uint32_t pwm_frequency)
{
 80a31b8:	b570      	push	{r4, r5, r6, lr}
 80a31ba:	4604      	mov	r4, r0
 80a31bc:	460d      	mov	r5, r1
 80a31be:	4616      	mov	r6, r2
    // Safety check
    if (!pinAvailable(pin))
 80a31c0:	f7ff ff68 	bl	80a3094 <pinAvailable>
 80a31c4:	b198      	cbz	r0, 80a31ee <_Z11analogWritetmm+0x36>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
 80a31c6:	2102      	movs	r1, #2
 80a31c8:	4620      	mov	r0, r4
 80a31ca:	f7fe f85f 	bl	80a128c <HAL_Validate_Pin_Function>
 80a31ce:	2802      	cmp	r0, #2
 80a31d0:	d10d      	bne.n	80a31ee <_Z11analogWritetmm+0x36>
    {
        PinMode mode = HAL_Get_Pin_Mode(pin);
 80a31d2:	4620      	mov	r0, r4
 80a31d4:	f7fe f86a 	bl	80a12ac <HAL_Get_Pin_Mode>

        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
 80a31d8:	2801      	cmp	r0, #1
 80a31da:	d001      	beq.n	80a31e0 <_Z11analogWritetmm+0x28>
 80a31dc:	2804      	cmp	r0, #4
 80a31de:	d106      	bne.n	80a31ee <_Z11analogWritetmm+0x36>
        {
            return;
        }

        hal_pwm_write_with_frequency_ext(pin, value, pwm_frequency);
 80a31e0:	4632      	mov	r2, r6
 80a31e2:	4629      	mov	r1, r5
 80a31e4:	4620      	mov	r0, r4
    }
}
 80a31e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hal_pwm_write_with_frequency_ext(pin, value, pwm_frequency);
 80a31ea:	f7fe b87f 	b.w	80a12ec <hal_pwm_write_with_frequency_ext>
}
 80a31ee:	bd70      	pop	{r4, r5, r6, pc}

080a31f0 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a31f0:	4770      	bx	lr
	...

080a31f4 <_Z17acquireWireBufferv>:
{
 80a31f4:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a31f6:	2314      	movs	r3, #20
 80a31f8:	2520      	movs	r5, #32
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a31fa:	4e08      	ldr	r6, [pc, #32]	; (80a321c <_Z17acquireWireBufferv+0x28>)
{
 80a31fc:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a31fe:	6003      	str	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a3200:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a3202:	6085      	str	r5, [r0, #8]
 80a3204:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a3206:	4628      	mov	r0, r5
 80a3208:	f000 f87c 	bl	80a3304 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a320c:	4631      	mov	r1, r6
	};
 80a320e:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a3210:	4628      	mov	r0, r5
 80a3212:	f000 f877 	bl	80a3304 <_ZnajRKSt9nothrow_t>
	};
 80a3216:	60e0      	str	r0, [r4, #12]
}
 80a3218:	4620      	mov	r0, r4
 80a321a:	bd70      	pop	{r4, r5, r6, pc}
 80a321c:	080a5918 	.word	0x080a5918

080a3220 <_Z19__fetch_global_Wirev>:
{
 80a3220:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a3222:	4d0e      	ldr	r5, [pc, #56]	; (80a325c <_Z19__fetch_global_Wirev+0x3c>)
{
 80a3224:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a3226:	7829      	ldrb	r1, [r5, #0]
 80a3228:	f3bf 8f5b 	dmb	ish
 80a322c:	f011 0401 	ands.w	r4, r1, #1
 80a3230:	d111      	bne.n	80a3256 <_Z19__fetch_global_Wirev+0x36>
 80a3232:	4628      	mov	r0, r5
 80a3234:	f7fc ff37 	bl	80a00a6 <__cxa_guard_acquire>
 80a3238:	b168      	cbz	r0, 80a3256 <_Z19__fetch_global_Wirev+0x36>
 80a323a:	a801      	add	r0, sp, #4
 80a323c:	f7ff ffda 	bl	80a31f4 <_Z17acquireWireBufferv>
 80a3240:	4621      	mov	r1, r4
 80a3242:	aa01      	add	r2, sp, #4
 80a3244:	4806      	ldr	r0, [pc, #24]	; (80a3260 <_Z19__fetch_global_Wirev+0x40>)
 80a3246:	f7fe fd8b 	bl	80a1d60 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a324a:	4628      	mov	r0, r5
 80a324c:	f7fc ff30 	bl	80a00b0 <__cxa_guard_release>
 80a3250:	4804      	ldr	r0, [pc, #16]	; (80a3264 <_Z19__fetch_global_Wirev+0x44>)
 80a3252:	f002 f813 	bl	80a527c <atexit>
	return wire;
}
 80a3256:	4802      	ldr	r0, [pc, #8]	; (80a3260 <_Z19__fetch_global_Wirev+0x40>)
 80a3258:	b007      	add	sp, #28
 80a325a:	bd30      	pop	{r4, r5, pc}
 80a325c:	20002614 	.word	0x20002614
 80a3260:	20002618 	.word	0x20002618
 80a3264:	080a31f1 	.word	0x080a31f1

080a3268 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a3268:	2300      	movs	r3, #0
 80a326a:	b507      	push	{r0, r1, r2, lr}
 80a326c:	461a      	mov	r2, r3
 80a326e:	4619      	mov	r1, r3
 80a3270:	9300      	str	r3, [sp, #0]
 80a3272:	4803      	ldr	r0, [pc, #12]	; (80a3280 <_GLOBAL__sub_I_INADDR_NONE+0x18>)
 80a3274:	f7fe fdde 	bl	80a1e34 <_ZN9IPAddressC1Ehhhh>
 80a3278:	b003      	add	sp, #12
 80a327a:	f85d fb04 	ldr.w	pc, [sp], #4
 80a327e:	bf00      	nop
 80a3280:	2000262c 	.word	0x2000262c

080a3284 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 80a3284:	4770      	bx	lr
	...

080a3288 <_Z20acquireSerial1Bufferv>:
{
 80a3288:	b570      	push	{r4, r5, r6, lr}
    hal_usart_buffer_config_t config = {
 80a328a:	2514      	movs	r5, #20
{
 80a328c:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 80a328e:	462a      	mov	r2, r5
 80a3290:	2100      	movs	r1, #0
 80a3292:	f002 f825 	bl	80a52e0 <memset>
 80a3296:	8025      	strh	r5, [r4, #0]
 80a3298:	2580      	movs	r5, #128	; 0x80
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a329a:	4e07      	ldr	r6, [pc, #28]	; (80a32b8 <_Z20acquireSerial1Bufferv+0x30>)
 80a329c:	4628      	mov	r0, r5
 80a329e:	4631      	mov	r1, r6
    hal_usart_buffer_config_t config = {
 80a32a0:	8125      	strh	r5, [r4, #8]
 80a32a2:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a32a4:	f000 f82e 	bl	80a3304 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a32a8:	4631      	mov	r1, r6
    };
 80a32aa:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a32ac:	4628      	mov	r0, r5
 80a32ae:	f000 f829 	bl	80a3304 <_ZnajRKSt9nothrow_t>
    };
 80a32b2:	60e0      	str	r0, [r4, #12]
}
 80a32b4:	4620      	mov	r0, r4
 80a32b6:	bd70      	pop	{r4, r5, r6, pc}
 80a32b8:	080a5918 	.word	0x080a5918

080a32bc <_Z22__fetch_global_Serial1v>:
{
 80a32bc:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 80a32be:	4d0e      	ldr	r5, [pc, #56]	; (80a32f8 <_Z22__fetch_global_Serial1v+0x3c>)
{
 80a32c0:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 80a32c2:	7829      	ldrb	r1, [r5, #0]
 80a32c4:	f3bf 8f5b 	dmb	ish
 80a32c8:	f011 0401 	ands.w	r4, r1, #1
 80a32cc:	d111      	bne.n	80a32f2 <_Z22__fetch_global_Serial1v+0x36>
 80a32ce:	4628      	mov	r0, r5
 80a32d0:	f7fc fee9 	bl	80a00a6 <__cxa_guard_acquire>
 80a32d4:	b168      	cbz	r0, 80a32f2 <_Z22__fetch_global_Serial1v+0x36>
 80a32d6:	a801      	add	r0, sp, #4
 80a32d8:	f7ff ffd6 	bl	80a3288 <_Z20acquireSerial1Bufferv>
 80a32dc:	4621      	mov	r1, r4
 80a32de:	aa01      	add	r2, sp, #4
 80a32e0:	4806      	ldr	r0, [pc, #24]	; (80a32fc <_Z22__fetch_global_Serial1v+0x40>)
 80a32e2:	f7ff fce1 	bl	80a2ca8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 80a32e6:	4628      	mov	r0, r5
 80a32e8:	f7fc fee2 	bl	80a00b0 <__cxa_guard_release>
 80a32ec:	4804      	ldr	r0, [pc, #16]	; (80a3300 <_Z22__fetch_global_Serial1v+0x44>)
 80a32ee:	f001 ffc5 	bl	80a527c <atexit>
    return serial1;
}
 80a32f2:	4802      	ldr	r0, [pc, #8]	; (80a32fc <_Z22__fetch_global_Serial1v+0x40>)
 80a32f4:	b007      	add	sp, #28
 80a32f6:	bd30      	pop	{r4, r5, pc}
 80a32f8:	20002644 	.word	0x20002644
 80a32fc:	20002648 	.word	0x20002648
 80a3300:	080a3285 	.word	0x080a3285

080a3304 <_ZnajRKSt9nothrow_t>:
 80a3304:	f7fc becb 	b.w	80a009e <_Znaj>

080a3308 <_ZSt17__throw_bad_allocv>:
 80a3308:	b508      	push	{r3, lr}
 80a330a:	f7fe f9ed 	bl	80a16e8 <abort>

080a330e <_ZSt20__throw_length_errorPKc>:
 80a330e:	b508      	push	{r3, lr}
 80a3310:	f7fe f9ea 	bl	80a16e8 <abort>

080a3314 <_ZSt25__throw_bad_function_callv>:
 80a3314:	b508      	push	{r3, lr}
 80a3316:	f7fe f9e7 	bl	80a16e8 <abort>
	...

080a331c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
 80a331c:	4901      	ldr	r1, [pc, #4]	; (80a3324 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
 80a331e:	f000 b8fb 	b.w	80a3518 <_ZNKSt9type_infoeqERKS_>
 80a3322:	bf00      	nop
 80a3324:	080a5934 	.word	0x080a5934

080a3328 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 80a3328:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a332a:	2400      	movs	r4, #0
 80a332c:	2310      	movs	r3, #16
 80a332e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80a3332:	6803      	ldr	r3, [r0, #0]
 80a3334:	4615      	mov	r5, r2
 80a3336:	699e      	ldr	r6, [r3, #24]
 80a3338:	e9cd 4400 	strd	r4, r4, [sp]
 80a333c:	466b      	mov	r3, sp
 80a333e:	6812      	ldr	r2, [r2, #0]
 80a3340:	47b0      	blx	r6
 80a3342:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80a3346:	f003 0306 	and.w	r3, r3, #6
 80a334a:	2b06      	cmp	r3, #6
 80a334c:	bf09      	itett	eq
 80a334e:	2001      	moveq	r0, #1
 80a3350:	4620      	movne	r0, r4
 80a3352:	9b00      	ldreq	r3, [sp, #0]
 80a3354:	602b      	streq	r3, [r5, #0]
 80a3356:	b004      	add	sp, #16
 80a3358:	bd70      	pop	{r4, r5, r6, pc}

080a335a <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 80a335a:	9800      	ldr	r0, [sp, #0]
 80a335c:	4290      	cmp	r0, r2
 80a335e:	bf14      	ite	ne
 80a3360:	2001      	movne	r0, #1
 80a3362:	2006      	moveq	r0, #6
 80a3364:	4770      	bx	lr
	...

080a3368 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 80a3368:	b510      	push	{r4, lr}
 80a336a:	4604      	mov	r4, r0
 80a336c:	4b02      	ldr	r3, [pc, #8]	; (80a3378 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 80a336e:	6003      	str	r3, [r0, #0]
 80a3370:	f000 f8cf 	bl	80a3512 <_ZNSt9type_infoD1Ev>
 80a3374:	4620      	mov	r0, r4
 80a3376:	bd10      	pop	{r4, pc}
 80a3378:	080a5974 	.word	0x080a5974

080a337c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 80a337c:	b510      	push	{r4, lr}
 80a337e:	4604      	mov	r4, r0
 80a3380:	f7ff fff2 	bl	80a3368 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80a3384:	4620      	mov	r0, r4
 80a3386:	2108      	movs	r1, #8
 80a3388:	f7fc fe8b 	bl	80a00a2 <_ZdlPvj>
 80a338c:	4620      	mov	r0, r4
 80a338e:	bd10      	pop	{r4, pc}

080a3390 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 80a3390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a3394:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80a3398:	461f      	mov	r7, r3
 80a339a:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 80a339e:	4598      	cmp	r8, r3
 80a33a0:	4606      	mov	r6, r0
 80a33a2:	4615      	mov	r5, r2
 80a33a4:	d107      	bne.n	80a33b6 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 80a33a6:	9907      	ldr	r1, [sp, #28]
 80a33a8:	f000 f8b6 	bl	80a3518 <_ZNKSt9type_infoeqERKS_>
 80a33ac:	b118      	cbz	r0, 80a33b6 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 80a33ae:	7165      	strb	r5, [r4, #5]
 80a33b0:	2000      	movs	r0, #0
 80a33b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a33b6:	4639      	mov	r1, r7
 80a33b8:	4630      	mov	r0, r6
 80a33ba:	f000 f8ad 	bl	80a3518 <_ZNKSt9type_infoeqERKS_>
 80a33be:	2800      	cmp	r0, #0
 80a33c0:	d0f6      	beq.n	80a33b0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 80a33c2:	2301      	movs	r3, #1
 80a33c4:	f8c4 8000 	str.w	r8, [r4]
 80a33c8:	7125      	strb	r5, [r4, #4]
 80a33ca:	71a3      	strb	r3, [r4, #6]
 80a33cc:	e7f0      	b.n	80a33b0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

080a33ce <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 80a33ce:	b538      	push	{r3, r4, r5, lr}
 80a33d0:	4615      	mov	r5, r2
 80a33d2:	461c      	mov	r4, r3
 80a33d4:	f000 f8a0 	bl	80a3518 <_ZNKSt9type_infoeqERKS_>
 80a33d8:	b120      	cbz	r0, 80a33e4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 80a33da:	2308      	movs	r3, #8
 80a33dc:	60e3      	str	r3, [r4, #12]
 80a33de:	2306      	movs	r3, #6
 80a33e0:	6025      	str	r5, [r4, #0]
 80a33e2:	7123      	strb	r3, [r4, #4]
 80a33e4:	bd38      	pop	{r3, r4, r5, pc}

080a33e6 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 80a33e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a33ea:	4605      	mov	r5, r0
 80a33ec:	460c      	mov	r4, r1
 80a33ee:	4616      	mov	r6, r2
 80a33f0:	461f      	mov	r7, r3
 80a33f2:	f000 f891 	bl	80a3518 <_ZNKSt9type_infoeqERKS_>
 80a33f6:	b948      	cbnz	r0, 80a340c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80a33f8:	2f03      	cmp	r7, #3
 80a33fa:	d807      	bhi.n	80a340c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80a33fc:	6823      	ldr	r3, [r4, #0]
 80a33fe:	4632      	mov	r2, r6
 80a3400:	4629      	mov	r1, r5
 80a3402:	4620      	mov	r0, r4
 80a3404:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a3408:	695b      	ldr	r3, [r3, #20]
 80a340a:	4718      	bx	r3
 80a340c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a3410 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 80a3410:	b510      	push	{r4, lr}
 80a3412:	4604      	mov	r4, r0
 80a3414:	4b02      	ldr	r3, [pc, #8]	; (80a3420 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 80a3416:	6003      	str	r3, [r0, #0]
 80a3418:	f7ff ffa6 	bl	80a3368 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80a341c:	4620      	mov	r0, r4
 80a341e:	bd10      	pop	{r4, pc}
 80a3420:	080a59d4 	.word	0x080a59d4

080a3424 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 80a3424:	b510      	push	{r4, lr}
 80a3426:	4604      	mov	r4, r0
 80a3428:	f7ff fff2 	bl	80a3410 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 80a342c:	4620      	mov	r0, r4
 80a342e:	210c      	movs	r1, #12
 80a3430:	f7fc fe37 	bl	80a00a2 <_ZdlPvj>
 80a3434:	4620      	mov	r0, r4
 80a3436:	bd10      	pop	{r4, pc}

080a3438 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 80a3438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a343c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80a3440:	4606      	mov	r6, r0
 80a3442:	4590      	cmp	r8, r2
 80a3444:	460f      	mov	r7, r1
 80a3446:	4615      	mov	r5, r2
 80a3448:	461c      	mov	r4, r3
 80a344a:	d00b      	beq.n	80a3464 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x2c>
 80a344c:	68b0      	ldr	r0, [r6, #8]
 80a344e:	462a      	mov	r2, r5
 80a3450:	6803      	ldr	r3, [r0, #0]
 80a3452:	f8cd 8018 	str.w	r8, [sp, #24]
 80a3456:	6a1e      	ldr	r6, [r3, #32]
 80a3458:	4639      	mov	r1, r7
 80a345a:	4623      	mov	r3, r4
 80a345c:	46b4      	mov	ip, r6
 80a345e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a3462:	4760      	bx	ip
 80a3464:	4619      	mov	r1, r3
 80a3466:	f000 f857 	bl	80a3518 <_ZNKSt9type_infoeqERKS_>
 80a346a:	2800      	cmp	r0, #0
 80a346c:	d0ee      	beq.n	80a344c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 80a346e:	2006      	movs	r0, #6
 80a3470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a3474 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 80a3474:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3478:	460d      	mov	r5, r1
 80a347a:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 80a347e:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 80a3482:	4619      	mov	r1, r3
 80a3484:	4681      	mov	r9, r0
 80a3486:	4617      	mov	r7, r2
 80a3488:	4698      	mov	r8, r3
 80a348a:	f000 f845 	bl	80a3518 <_ZNKSt9type_infoeqERKS_>
 80a348e:	b190      	cbz	r0, 80a34b6 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 80a3490:	2d00      	cmp	r5, #0
 80a3492:	6034      	str	r4, [r6, #0]
 80a3494:	7137      	strb	r7, [r6, #4]
 80a3496:	db09      	blt.n	80a34ac <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 80a3498:	442c      	add	r4, r5
 80a349a:	45a2      	cmp	sl, r4
 80a349c:	bf0c      	ite	eq
 80a349e:	2406      	moveq	r4, #6
 80a34a0:	2401      	movne	r4, #1
 80a34a2:	71b4      	strb	r4, [r6, #6]
 80a34a4:	2000      	movs	r0, #0
 80a34a6:	b001      	add	sp, #4
 80a34a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a34ac:	3502      	adds	r5, #2
 80a34ae:	d1f9      	bne.n	80a34a4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80a34b0:	2301      	movs	r3, #1
 80a34b2:	71b3      	strb	r3, [r6, #6]
 80a34b4:	e7f6      	b.n	80a34a4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80a34b6:	4554      	cmp	r4, sl
 80a34b8:	d106      	bne.n	80a34c8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80a34ba:	4659      	mov	r1, fp
 80a34bc:	4648      	mov	r0, r9
 80a34be:	f000 f82b 	bl	80a3518 <_ZNKSt9type_infoeqERKS_>
 80a34c2:	b108      	cbz	r0, 80a34c8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80a34c4:	7177      	strb	r7, [r6, #5]
 80a34c6:	e7ed      	b.n	80a34a4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80a34c8:	f8d9 0008 	ldr.w	r0, [r9, #8]
 80a34cc:	463a      	mov	r2, r7
 80a34ce:	6803      	ldr	r3, [r0, #0]
 80a34d0:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 80a34d4:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 80a34d8:	69dc      	ldr	r4, [r3, #28]
 80a34da:	4629      	mov	r1, r5
 80a34dc:	4643      	mov	r3, r8
 80a34de:	46a4      	mov	ip, r4
 80a34e0:	b001      	add	sp, #4
 80a34e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a34e6:	4760      	bx	ip

080a34e8 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 80a34e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a34ec:	4607      	mov	r7, r0
 80a34ee:	460c      	mov	r4, r1
 80a34f0:	4615      	mov	r5, r2
 80a34f2:	461e      	mov	r6, r3
 80a34f4:	f7ff ff6b 	bl	80a33ce <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 80a34f8:	b948      	cbnz	r0, 80a350e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 80a34fa:	68b8      	ldr	r0, [r7, #8]
 80a34fc:	462a      	mov	r2, r5
 80a34fe:	6803      	ldr	r3, [r0, #0]
 80a3500:	4621      	mov	r1, r4
 80a3502:	699f      	ldr	r7, [r3, #24]
 80a3504:	4633      	mov	r3, r6
 80a3506:	46bc      	mov	ip, r7
 80a3508:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a350c:	4760      	bx	ip
 80a350e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a3512 <_ZNSt9type_infoD1Ev>:
 80a3512:	4770      	bx	lr

080a3514 <_ZNKSt9type_info14__is_pointer_pEv>:
 80a3514:	2000      	movs	r0, #0
 80a3516:	4770      	bx	lr

080a3518 <_ZNKSt9type_infoeqERKS_>:
 80a3518:	4281      	cmp	r1, r0
 80a351a:	b508      	push	{r3, lr}
 80a351c:	d00e      	beq.n	80a353c <_ZNKSt9type_infoeqERKS_+0x24>
 80a351e:	6840      	ldr	r0, [r0, #4]
 80a3520:	7803      	ldrb	r3, [r0, #0]
 80a3522:	2b2a      	cmp	r3, #42	; 0x2a
 80a3524:	d00c      	beq.n	80a3540 <_ZNKSt9type_infoeqERKS_+0x28>
 80a3526:	6849      	ldr	r1, [r1, #4]
 80a3528:	780b      	ldrb	r3, [r1, #0]
 80a352a:	2b2a      	cmp	r3, #42	; 0x2a
 80a352c:	bf08      	it	eq
 80a352e:	3101      	addeq	r1, #1
 80a3530:	f001 ff0c 	bl	80a534c <strcmp>
 80a3534:	fab0 f080 	clz	r0, r0
 80a3538:	0940      	lsrs	r0, r0, #5
 80a353a:	bd08      	pop	{r3, pc}
 80a353c:	2001      	movs	r0, #1
 80a353e:	e7fc      	b.n	80a353a <_ZNKSt9type_infoeqERKS_+0x22>
 80a3540:	2000      	movs	r0, #0
 80a3542:	e7fa      	b.n	80a353a <_ZNKSt9type_infoeqERKS_+0x22>

080a3544 <cos>:
 80a3544:	b510      	push	{r4, lr}
 80a3546:	4c26      	ldr	r4, [pc, #152]	; (80a35e0 <cos+0x9c>)
 80a3548:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80a354c:	42a3      	cmp	r3, r4
 80a354e:	b086      	sub	sp, #24
 80a3550:	dd21      	ble.n	80a3596 <cos+0x52>
 80a3552:	4a24      	ldr	r2, [pc, #144]	; (80a35e4 <cos+0xa0>)
 80a3554:	4293      	cmp	r3, r2
 80a3556:	dd09      	ble.n	80a356c <cos+0x28>
 80a3558:	4602      	mov	r2, r0
 80a355a:	460b      	mov	r3, r1
 80a355c:	f001 f9de 	bl	80a491c <__aeabi_dsub>
 80a3560:	4602      	mov	r2, r0
 80a3562:	460b      	mov	r3, r1
 80a3564:	4610      	mov	r0, r2
 80a3566:	4619      	mov	r1, r3
 80a3568:	b006      	add	sp, #24
 80a356a:	bd10      	pop	{r4, pc}
 80a356c:	aa02      	add	r2, sp, #8
 80a356e:	f000 f893 	bl	80a3698 <__ieee754_rem_pio2>
 80a3572:	f000 0003 	and.w	r0, r0, #3
 80a3576:	2801      	cmp	r0, #1
 80a3578:	d014      	beq.n	80a35a4 <cos+0x60>
 80a357a:	2802      	cmp	r0, #2
 80a357c:	d026      	beq.n	80a35cc <cos+0x88>
 80a357e:	b1e0      	cbz	r0, 80a35ba <cos+0x76>
 80a3580:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a3584:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a3588:	2401      	movs	r4, #1
 80a358a:	9400      	str	r4, [sp, #0]
 80a358c:	f001 f800 	bl	80a4590 <__kernel_sin>
 80a3590:	4602      	mov	r2, r0
 80a3592:	460b      	mov	r3, r1
 80a3594:	e7e6      	b.n	80a3564 <cos+0x20>
 80a3596:	2200      	movs	r2, #0
 80a3598:	2300      	movs	r3, #0
 80a359a:	b006      	add	sp, #24
 80a359c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a35a0:	f000 baa6 	b.w	80a3af0 <__kernel_cos>
 80a35a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a35a8:	9000      	str	r0, [sp, #0]
 80a35aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a35ae:	f000 ffef 	bl	80a4590 <__kernel_sin>
 80a35b2:	4602      	mov	r2, r0
 80a35b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80a35b8:	e7d4      	b.n	80a3564 <cos+0x20>
 80a35ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a35be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a35c2:	f000 fa95 	bl	80a3af0 <__kernel_cos>
 80a35c6:	4602      	mov	r2, r0
 80a35c8:	460b      	mov	r3, r1
 80a35ca:	e7cb      	b.n	80a3564 <cos+0x20>
 80a35cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a35d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a35d4:	f000 fa8c 	bl	80a3af0 <__kernel_cos>
 80a35d8:	4602      	mov	r2, r0
 80a35da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80a35de:	e7c1      	b.n	80a3564 <cos+0x20>
 80a35e0:	3fe921fb 	.word	0x3fe921fb
 80a35e4:	7fefffff 	.word	0x7fefffff

080a35e8 <sin>:
 80a35e8:	b510      	push	{r4, lr}
 80a35ea:	4c29      	ldr	r4, [pc, #164]	; (80a3690 <sin+0xa8>)
 80a35ec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80a35f0:	42a3      	cmp	r3, r4
 80a35f2:	b086      	sub	sp, #24
 80a35f4:	dd20      	ble.n	80a3638 <sin+0x50>
 80a35f6:	4a27      	ldr	r2, [pc, #156]	; (80a3694 <sin+0xac>)
 80a35f8:	4293      	cmp	r3, r2
 80a35fa:	dd09      	ble.n	80a3610 <sin+0x28>
 80a35fc:	4602      	mov	r2, r0
 80a35fe:	460b      	mov	r3, r1
 80a3600:	f001 f98c 	bl	80a491c <__aeabi_dsub>
 80a3604:	4602      	mov	r2, r0
 80a3606:	460b      	mov	r3, r1
 80a3608:	4610      	mov	r0, r2
 80a360a:	4619      	mov	r1, r3
 80a360c:	b006      	add	sp, #24
 80a360e:	bd10      	pop	{r4, pc}
 80a3610:	aa02      	add	r2, sp, #8
 80a3612:	f000 f841 	bl	80a3698 <__ieee754_rem_pio2>
 80a3616:	f000 0003 	and.w	r0, r0, #3
 80a361a:	2801      	cmp	r0, #1
 80a361c:	d018      	beq.n	80a3650 <sin+0x68>
 80a361e:	2802      	cmp	r0, #2
 80a3620:	d02a      	beq.n	80a3678 <sin+0x90>
 80a3622:	b1f0      	cbz	r0, 80a3662 <sin+0x7a>
 80a3624:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a3628:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a362c:	f000 fa60 	bl	80a3af0 <__kernel_cos>
 80a3630:	4602      	mov	r2, r0
 80a3632:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80a3636:	e7e7      	b.n	80a3608 <sin+0x20>
 80a3638:	2400      	movs	r4, #0
 80a363a:	2200      	movs	r2, #0
 80a363c:	2300      	movs	r3, #0
 80a363e:	9400      	str	r4, [sp, #0]
 80a3640:	f000 ffa6 	bl	80a4590 <__kernel_sin>
 80a3644:	4602      	mov	r2, r0
 80a3646:	460b      	mov	r3, r1
 80a3648:	4610      	mov	r0, r2
 80a364a:	4619      	mov	r1, r3
 80a364c:	b006      	add	sp, #24
 80a364e:	bd10      	pop	{r4, pc}
 80a3650:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a3654:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a3658:	f000 fa4a 	bl	80a3af0 <__kernel_cos>
 80a365c:	4602      	mov	r2, r0
 80a365e:	460b      	mov	r3, r1
 80a3660:	e7d2      	b.n	80a3608 <sin+0x20>
 80a3662:	2401      	movs	r4, #1
 80a3664:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a3668:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a366c:	9400      	str	r4, [sp, #0]
 80a366e:	f000 ff8f 	bl	80a4590 <__kernel_sin>
 80a3672:	4602      	mov	r2, r0
 80a3674:	460b      	mov	r3, r1
 80a3676:	e7c7      	b.n	80a3608 <sin+0x20>
 80a3678:	2401      	movs	r4, #1
 80a367a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a367e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a3682:	9400      	str	r4, [sp, #0]
 80a3684:	f000 ff84 	bl	80a4590 <__kernel_sin>
 80a3688:	4602      	mov	r2, r0
 80a368a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80a368e:	e7bb      	b.n	80a3608 <sin+0x20>
 80a3690:	3fe921fb 	.word	0x3fe921fb
 80a3694:	7fefffff 	.word	0x7fefffff

080a3698 <__ieee754_rem_pio2>:
 80a3698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a369c:	f8df c238 	ldr.w	ip, [pc, #568]	; 80a38d8 <__ieee754_rem_pio2+0x240>
 80a36a0:	f021 4500 	bic.w	r5, r1, #2147483648	; 0x80000000
 80a36a4:	4565      	cmp	r5, ip
 80a36a6:	4606      	mov	r6, r0
 80a36a8:	4614      	mov	r4, r2
 80a36aa:	b08f      	sub	sp, #60	; 0x3c
 80a36ac:	f340 8085 	ble.w	80a37ba <__ieee754_rem_pio2+0x122>
 80a36b0:	4a8a      	ldr	r2, [pc, #552]	; (80a38dc <__ieee754_rem_pio2+0x244>)
 80a36b2:	460f      	mov	r7, r1
 80a36b4:	4295      	cmp	r5, r2
 80a36b6:	dc26      	bgt.n	80a3706 <__ieee754_rem_pio2+0x6e>
 80a36b8:	a37d      	add	r3, pc, #500	; (adr r3, 80a38b0 <__ieee754_rem_pio2+0x218>)
 80a36ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a36be:	2900      	cmp	r1, #0
 80a36c0:	f340 81c0 	ble.w	80a3a44 <__ieee754_rem_pio2+0x3ac>
 80a36c4:	f001 f92a 	bl	80a491c <__aeabi_dsub>
 80a36c8:	4b85      	ldr	r3, [pc, #532]	; (80a38e0 <__ieee754_rem_pio2+0x248>)
 80a36ca:	4680      	mov	r8, r0
 80a36cc:	429d      	cmp	r5, r3
 80a36ce:	4689      	mov	r9, r1
 80a36d0:	f000 808a 	beq.w	80a37e8 <__ieee754_rem_pio2+0x150>
 80a36d4:	a378      	add	r3, pc, #480	; (adr r3, 80a38b8 <__ieee754_rem_pio2+0x220>)
 80a36d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a36da:	f001 f91f 	bl	80a491c <__aeabi_dsub>
 80a36de:	4602      	mov	r2, r0
 80a36e0:	460b      	mov	r3, r1
 80a36e2:	4640      	mov	r0, r8
 80a36e4:	e9c4 2300 	strd	r2, r3, [r4]
 80a36e8:	4649      	mov	r1, r9
 80a36ea:	f001 f917 	bl	80a491c <__aeabi_dsub>
 80a36ee:	a372      	add	r3, pc, #456	; (adr r3, 80a38b8 <__ieee754_rem_pio2+0x220>)
 80a36f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a36f4:	f001 f912 	bl	80a491c <__aeabi_dsub>
 80a36f8:	2601      	movs	r6, #1
 80a36fa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80a36fe:	4630      	mov	r0, r6
 80a3700:	b00f      	add	sp, #60	; 0x3c
 80a3702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3706:	4a77      	ldr	r2, [pc, #476]	; (80a38e4 <__ieee754_rem_pio2+0x24c>)
 80a3708:	4295      	cmp	r5, r2
 80a370a:	f340 808d 	ble.w	80a3828 <__ieee754_rem_pio2+0x190>
 80a370e:	4a76      	ldr	r2, [pc, #472]	; (80a38e8 <__ieee754_rem_pio2+0x250>)
 80a3710:	4295      	cmp	r5, r2
 80a3712:	dc5f      	bgt.n	80a37d4 <__ieee754_rem_pio2+0x13c>
 80a3714:	ea4f 5825 	mov.w	r8, r5, asr #20
 80a3718:	f2a8 4816 	subw	r8, r8, #1046	; 0x416
 80a371c:	eba5 5108 	sub.w	r1, r5, r8, lsl #20
 80a3720:	468b      	mov	fp, r1
 80a3722:	f001 fd63 	bl	80a51ec <__aeabi_d2iz>
 80a3726:	f001 fa47 	bl	80a4bb8 <__aeabi_i2d>
 80a372a:	4602      	mov	r2, r0
 80a372c:	460b      	mov	r3, r1
 80a372e:	4630      	mov	r0, r6
 80a3730:	4659      	mov	r1, fp
 80a3732:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a3736:	f001 f8f1 	bl	80a491c <__aeabi_dsub>
 80a373a:	2200      	movs	r2, #0
 80a373c:	4b6b      	ldr	r3, [pc, #428]	; (80a38ec <__ieee754_rem_pio2+0x254>)
 80a373e:	f001 faa5 	bl	80a4c8c <__aeabi_dmul>
 80a3742:	468b      	mov	fp, r1
 80a3744:	4682      	mov	sl, r0
 80a3746:	f001 fd51 	bl	80a51ec <__aeabi_d2iz>
 80a374a:	4605      	mov	r5, r0
 80a374c:	f001 fa34 	bl	80a4bb8 <__aeabi_i2d>
 80a3750:	4602      	mov	r2, r0
 80a3752:	460b      	mov	r3, r1
 80a3754:	4650      	mov	r0, sl
 80a3756:	4659      	mov	r1, fp
 80a3758:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80a375c:	f001 f8de 	bl	80a491c <__aeabi_dsub>
 80a3760:	2200      	movs	r2, #0
 80a3762:	4b62      	ldr	r3, [pc, #392]	; (80a38ec <__ieee754_rem_pio2+0x254>)
 80a3764:	f001 fa92 	bl	80a4c8c <__aeabi_dmul>
 80a3768:	4602      	mov	r2, r0
 80a376a:	460b      	mov	r3, r1
 80a376c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80a3770:	2200      	movs	r2, #0
 80a3772:	2300      	movs	r3, #0
 80a3774:	f001 fcf2 	bl	80a515c <__aeabi_dcmpeq>
 80a3778:	2800      	cmp	r0, #0
 80a377a:	f000 8161 	beq.w	80a3a40 <__ieee754_rem_pio2+0x3a8>
 80a377e:	2d00      	cmp	r5, #0
 80a3780:	bf0c      	ite	eq
 80a3782:	2301      	moveq	r3, #1
 80a3784:	2302      	movne	r3, #2
 80a3786:	2502      	movs	r5, #2
 80a3788:	4959      	ldr	r1, [pc, #356]	; (80a38f0 <__ieee754_rem_pio2+0x258>)
 80a378a:	4642      	mov	r2, r8
 80a378c:	9101      	str	r1, [sp, #4]
 80a378e:	a808      	add	r0, sp, #32
 80a3790:	4621      	mov	r1, r4
 80a3792:	9500      	str	r5, [sp, #0]
 80a3794:	f000 fad4 	bl	80a3d40 <__kernel_rem_pio2>
 80a3798:	2f00      	cmp	r7, #0
 80a379a:	4606      	mov	r6, r0
 80a379c:	daaf      	bge.n	80a36fe <__ieee754_rem_pio2+0x66>
 80a379e:	e9d4 0500 	ldrd	r0, r5, [r4]
 80a37a2:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 80a37a6:	e9c4 0100 	strd	r0, r1, [r4]
 80a37aa:	68e1      	ldr	r1, [r4, #12]
 80a37ac:	68a2      	ldr	r2, [r4, #8]
 80a37ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80a37b2:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80a37b6:	4276      	negs	r6, r6
 80a37b8:	e7a1      	b.n	80a36fe <__ieee754_rem_pio2+0x66>
 80a37ba:	2600      	movs	r6, #0
 80a37bc:	f04f 0800 	mov.w	r8, #0
 80a37c0:	f04f 0900 	mov.w	r9, #0
 80a37c4:	e9c2 0100 	strd	r0, r1, [r2]
 80a37c8:	4630      	mov	r0, r6
 80a37ca:	e9c2 8902 	strd	r8, r9, [r2, #8]
 80a37ce:	b00f      	add	sp, #60	; 0x3c
 80a37d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a37d4:	4602      	mov	r2, r0
 80a37d6:	460b      	mov	r3, r1
 80a37d8:	f001 f8a0 	bl	80a491c <__aeabi_dsub>
 80a37dc:	2600      	movs	r6, #0
 80a37de:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80a37e2:	e9c4 0100 	strd	r0, r1, [r4]
 80a37e6:	e78a      	b.n	80a36fe <__ieee754_rem_pio2+0x66>
 80a37e8:	a335      	add	r3, pc, #212	; (adr r3, 80a38c0 <__ieee754_rem_pio2+0x228>)
 80a37ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a37ee:	f001 f895 	bl	80a491c <__aeabi_dsub>
 80a37f2:	a335      	add	r3, pc, #212	; (adr r3, 80a38c8 <__ieee754_rem_pio2+0x230>)
 80a37f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a37f8:	4680      	mov	r8, r0
 80a37fa:	4689      	mov	r9, r1
 80a37fc:	f001 f88e 	bl	80a491c <__aeabi_dsub>
 80a3800:	4602      	mov	r2, r0
 80a3802:	460b      	mov	r3, r1
 80a3804:	4640      	mov	r0, r8
 80a3806:	e9c4 2300 	strd	r2, r3, [r4]
 80a380a:	4649      	mov	r1, r9
 80a380c:	f001 f886 	bl	80a491c <__aeabi_dsub>
 80a3810:	a32d      	add	r3, pc, #180	; (adr r3, 80a38c8 <__ieee754_rem_pio2+0x230>)
 80a3812:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3816:	f001 f881 	bl	80a491c <__aeabi_dsub>
 80a381a:	2601      	movs	r6, #1
 80a381c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80a3820:	4630      	mov	r0, r6
 80a3822:	b00f      	add	sp, #60	; 0x3c
 80a3824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3828:	f000 ff74 	bl	80a4714 <fabs>
 80a382c:	a328      	add	r3, pc, #160	; (adr r3, 80a38d0 <__ieee754_rem_pio2+0x238>)
 80a382e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3832:	4680      	mov	r8, r0
 80a3834:	4689      	mov	r9, r1
 80a3836:	f001 fa29 	bl	80a4c8c <__aeabi_dmul>
 80a383a:	2200      	movs	r2, #0
 80a383c:	4b2d      	ldr	r3, [pc, #180]	; (80a38f4 <__ieee754_rem_pio2+0x25c>)
 80a383e:	f001 f86f 	bl	80a4920 <__adddf3>
 80a3842:	f001 fcd3 	bl	80a51ec <__aeabi_d2iz>
 80a3846:	4606      	mov	r6, r0
 80a3848:	f001 f9b6 	bl	80a4bb8 <__aeabi_i2d>
 80a384c:	a318      	add	r3, pc, #96	; (adr r3, 80a38b0 <__ieee754_rem_pio2+0x218>)
 80a384e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3852:	4682      	mov	sl, r0
 80a3854:	468b      	mov	fp, r1
 80a3856:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80a385a:	f001 fa17 	bl	80a4c8c <__aeabi_dmul>
 80a385e:	4602      	mov	r2, r0
 80a3860:	460b      	mov	r3, r1
 80a3862:	4640      	mov	r0, r8
 80a3864:	4649      	mov	r1, r9
 80a3866:	f001 f859 	bl	80a491c <__aeabi_dsub>
 80a386a:	a313      	add	r3, pc, #76	; (adr r3, 80a38b8 <__ieee754_rem_pio2+0x220>)
 80a386c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3870:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a3874:	4650      	mov	r0, sl
 80a3876:	4659      	mov	r1, fp
 80a3878:	f001 fa08 	bl	80a4c8c <__aeabi_dmul>
 80a387c:	2e1f      	cmp	r6, #31
 80a387e:	4680      	mov	r8, r0
 80a3880:	4689      	mov	r9, r1
 80a3882:	dc3b      	bgt.n	80a38fc <__ieee754_rem_pio2+0x264>
 80a3884:	4b1c      	ldr	r3, [pc, #112]	; (80a38f8 <__ieee754_rem_pio2+0x260>)
 80a3886:	1e72      	subs	r2, r6, #1
 80a3888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a388c:	42ab      	cmp	r3, r5
 80a388e:	d035      	beq.n	80a38fc <__ieee754_rem_pio2+0x264>
 80a3890:	4602      	mov	r2, r0
 80a3892:	460b      	mov	r3, r1
 80a3894:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a3898:	f001 f840 	bl	80a491c <__aeabi_dsub>
 80a389c:	4602      	mov	r2, r0
 80a389e:	460b      	mov	r3, r1
 80a38a0:	4682      	mov	sl, r0
 80a38a2:	468b      	mov	fp, r1
 80a38a4:	e9c4 2300 	strd	r2, r3, [r4]
 80a38a8:	e0ae      	b.n	80a3a08 <__ieee754_rem_pio2+0x370>
 80a38aa:	bf00      	nop
 80a38ac:	f3af 8000 	nop.w
 80a38b0:	54400000 	.word	0x54400000
 80a38b4:	3ff921fb 	.word	0x3ff921fb
 80a38b8:	1a626331 	.word	0x1a626331
 80a38bc:	3dd0b461 	.word	0x3dd0b461
 80a38c0:	1a600000 	.word	0x1a600000
 80a38c4:	3dd0b461 	.word	0x3dd0b461
 80a38c8:	2e037073 	.word	0x2e037073
 80a38cc:	3ba3198a 	.word	0x3ba3198a
 80a38d0:	6dc9c883 	.word	0x6dc9c883
 80a38d4:	3fe45f30 	.word	0x3fe45f30
 80a38d8:	3fe921fb 	.word	0x3fe921fb
 80a38dc:	4002d97b 	.word	0x4002d97b
 80a38e0:	3ff921fb 	.word	0x3ff921fb
 80a38e4:	413921fb 	.word	0x413921fb
 80a38e8:	7fefffff 	.word	0x7fefffff
 80a38ec:	41700000 	.word	0x41700000
 80a38f0:	080a5a90 	.word	0x080a5a90
 80a38f4:	3fe00000 	.word	0x3fe00000
 80a38f8:	080a5a10 	.word	0x080a5a10
 80a38fc:	152b      	asrs	r3, r5, #20
 80a38fe:	9307      	str	r3, [sp, #28]
 80a3900:	4642      	mov	r2, r8
 80a3902:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a3906:	464b      	mov	r3, r9
 80a3908:	f001 f808 	bl	80a491c <__aeabi_dsub>
 80a390c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80a3910:	ebc3 5515 	rsb	r5, r3, r5, lsr #20
 80a3914:	2d10      	cmp	r5, #16
 80a3916:	468b      	mov	fp, r1
 80a3918:	4682      	mov	sl, r0
 80a391a:	dd71      	ble.n	80a3a00 <__ieee754_rem_pio2+0x368>
 80a391c:	a368      	add	r3, pc, #416	; (adr r3, 80a3ac0 <__ieee754_rem_pio2+0x428>)
 80a391e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3922:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a3926:	f001 f9b1 	bl	80a4c8c <__aeabi_dmul>
 80a392a:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 80a392e:	4680      	mov	r8, r0
 80a3930:	4689      	mov	r9, r1
 80a3932:	4642      	mov	r2, r8
 80a3934:	464b      	mov	r3, r9
 80a3936:	4650      	mov	r0, sl
 80a3938:	4659      	mov	r1, fp
 80a393a:	f000 ffef 	bl	80a491c <__aeabi_dsub>
 80a393e:	4602      	mov	r2, r0
 80a3940:	460b      	mov	r3, r1
 80a3942:	4650      	mov	r0, sl
 80a3944:	4659      	mov	r1, fp
 80a3946:	4692      	mov	sl, r2
 80a3948:	469b      	mov	fp, r3
 80a394a:	f000 ffe7 	bl	80a491c <__aeabi_dsub>
 80a394e:	4642      	mov	r2, r8
 80a3950:	464b      	mov	r3, r9
 80a3952:	f000 ffe3 	bl	80a491c <__aeabi_dsub>
 80a3956:	a35c      	add	r3, pc, #368	; (adr r3, 80a3ac8 <__ieee754_rem_pio2+0x430>)
 80a3958:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a395c:	4680      	mov	r8, r0
 80a395e:	4689      	mov	r9, r1
 80a3960:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a3964:	f001 f992 	bl	80a4c8c <__aeabi_dmul>
 80a3968:	4642      	mov	r2, r8
 80a396a:	464b      	mov	r3, r9
 80a396c:	f000 ffd6 	bl	80a491c <__aeabi_dsub>
 80a3970:	4680      	mov	r8, r0
 80a3972:	4689      	mov	r9, r1
 80a3974:	4650      	mov	r0, sl
 80a3976:	4659      	mov	r1, fp
 80a3978:	4642      	mov	r2, r8
 80a397a:	464b      	mov	r3, r9
 80a397c:	e9cd ab02 	strd	sl, fp, [sp, #8]
 80a3980:	f000 ffcc 	bl	80a491c <__aeabi_dsub>
 80a3984:	9a07      	ldr	r2, [sp, #28]
 80a3986:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80a398a:	1ad3      	subs	r3, r2, r3
 80a398c:	2b31      	cmp	r3, #49	; 0x31
 80a398e:	468b      	mov	fp, r1
 80a3990:	4682      	mov	sl, r0
 80a3992:	dd35      	ble.n	80a3a00 <__ieee754_rem_pio2+0x368>
 80a3994:	a34e      	add	r3, pc, #312	; (adr r3, 80a3ad0 <__ieee754_rem_pio2+0x438>)
 80a3996:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a399a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a399e:	f001 f975 	bl	80a4c8c <__aeabi_dmul>
 80a39a2:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 80a39a6:	4680      	mov	r8, r0
 80a39a8:	4689      	mov	r9, r1
 80a39aa:	4642      	mov	r2, r8
 80a39ac:	464b      	mov	r3, r9
 80a39ae:	4650      	mov	r0, sl
 80a39b0:	4659      	mov	r1, fp
 80a39b2:	f000 ffb3 	bl	80a491c <__aeabi_dsub>
 80a39b6:	4602      	mov	r2, r0
 80a39b8:	460b      	mov	r3, r1
 80a39ba:	4650      	mov	r0, sl
 80a39bc:	4659      	mov	r1, fp
 80a39be:	4692      	mov	sl, r2
 80a39c0:	469b      	mov	fp, r3
 80a39c2:	e9cd ab02 	strd	sl, fp, [sp, #8]
 80a39c6:	f000 ffa9 	bl	80a491c <__aeabi_dsub>
 80a39ca:	4642      	mov	r2, r8
 80a39cc:	464b      	mov	r3, r9
 80a39ce:	f000 ffa5 	bl	80a491c <__aeabi_dsub>
 80a39d2:	a341      	add	r3, pc, #260	; (adr r3, 80a3ad8 <__ieee754_rem_pio2+0x440>)
 80a39d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a39d8:	4680      	mov	r8, r0
 80a39da:	4689      	mov	r9, r1
 80a39dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a39e0:	f001 f954 	bl	80a4c8c <__aeabi_dmul>
 80a39e4:	4642      	mov	r2, r8
 80a39e6:	464b      	mov	r3, r9
 80a39e8:	f000 ff98 	bl	80a491c <__aeabi_dsub>
 80a39ec:	4680      	mov	r8, r0
 80a39ee:	4689      	mov	r9, r1
 80a39f0:	4650      	mov	r0, sl
 80a39f2:	4659      	mov	r1, fp
 80a39f4:	4642      	mov	r2, r8
 80a39f6:	464b      	mov	r3, r9
 80a39f8:	f000 ff90 	bl	80a491c <__aeabi_dsub>
 80a39fc:	468b      	mov	fp, r1
 80a39fe:	4682      	mov	sl, r0
 80a3a00:	4652      	mov	r2, sl
 80a3a02:	465b      	mov	r3, fp
 80a3a04:	e9c4 2300 	strd	r2, r3, [r4]
 80a3a08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a3a0c:	4652      	mov	r2, sl
 80a3a0e:	465b      	mov	r3, fp
 80a3a10:	f000 ff84 	bl	80a491c <__aeabi_dsub>
 80a3a14:	4642      	mov	r2, r8
 80a3a16:	464b      	mov	r3, r9
 80a3a18:	f000 ff80 	bl	80a491c <__aeabi_dsub>
 80a3a1c:	4602      	mov	r2, r0
 80a3a1e:	460b      	mov	r3, r1
 80a3a20:	2f00      	cmp	r7, #0
 80a3a22:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80a3a26:	f6bf ae6a 	bge.w	80a36fe <__ieee754_rem_pio2+0x66>
 80a3a2a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80a3a2e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80a3a32:	60a0      	str	r0, [r4, #8]
 80a3a34:	6063      	str	r3, [r4, #4]
 80a3a36:	60e1      	str	r1, [r4, #12]
 80a3a38:	4276      	negs	r6, r6
 80a3a3a:	f8c4 a000 	str.w	sl, [r4]
 80a3a3e:	e65e      	b.n	80a36fe <__ieee754_rem_pio2+0x66>
 80a3a40:	2303      	movs	r3, #3
 80a3a42:	e6a0      	b.n	80a3786 <__ieee754_rem_pio2+0xee>
 80a3a44:	f000 ff6c 	bl	80a4920 <__adddf3>
 80a3a48:	4b27      	ldr	r3, [pc, #156]	; (80a3ae8 <__ieee754_rem_pio2+0x450>)
 80a3a4a:	4680      	mov	r8, r0
 80a3a4c:	429d      	cmp	r5, r3
 80a3a4e:	4689      	mov	r9, r1
 80a3a50:	d016      	beq.n	80a3a80 <__ieee754_rem_pio2+0x3e8>
 80a3a52:	a323      	add	r3, pc, #140	; (adr r3, 80a3ae0 <__ieee754_rem_pio2+0x448>)
 80a3a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3a58:	f000 ff62 	bl	80a4920 <__adddf3>
 80a3a5c:	4602      	mov	r2, r0
 80a3a5e:	460b      	mov	r3, r1
 80a3a60:	4640      	mov	r0, r8
 80a3a62:	e9c4 2300 	strd	r2, r3, [r4]
 80a3a66:	4649      	mov	r1, r9
 80a3a68:	f000 ff58 	bl	80a491c <__aeabi_dsub>
 80a3a6c:	a31c      	add	r3, pc, #112	; (adr r3, 80a3ae0 <__ieee754_rem_pio2+0x448>)
 80a3a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3a72:	f000 ff55 	bl	80a4920 <__adddf3>
 80a3a76:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80a3a7a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80a3a7e:	e63e      	b.n	80a36fe <__ieee754_rem_pio2+0x66>
 80a3a80:	a30f      	add	r3, pc, #60	; (adr r3, 80a3ac0 <__ieee754_rem_pio2+0x428>)
 80a3a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3a86:	f000 ff4b 	bl	80a4920 <__adddf3>
 80a3a8a:	a30f      	add	r3, pc, #60	; (adr r3, 80a3ac8 <__ieee754_rem_pio2+0x430>)
 80a3a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3a90:	4680      	mov	r8, r0
 80a3a92:	4689      	mov	r9, r1
 80a3a94:	f000 ff44 	bl	80a4920 <__adddf3>
 80a3a98:	4602      	mov	r2, r0
 80a3a9a:	460b      	mov	r3, r1
 80a3a9c:	4640      	mov	r0, r8
 80a3a9e:	e9c4 2300 	strd	r2, r3, [r4]
 80a3aa2:	4649      	mov	r1, r9
 80a3aa4:	f000 ff3a 	bl	80a491c <__aeabi_dsub>
 80a3aa8:	a307      	add	r3, pc, #28	; (adr r3, 80a3ac8 <__ieee754_rem_pio2+0x430>)
 80a3aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3aae:	f000 ff37 	bl	80a4920 <__adddf3>
 80a3ab2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80a3ab6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80a3aba:	e620      	b.n	80a36fe <__ieee754_rem_pio2+0x66>
 80a3abc:	f3af 8000 	nop.w
 80a3ac0:	1a600000 	.word	0x1a600000
 80a3ac4:	3dd0b461 	.word	0x3dd0b461
 80a3ac8:	2e037073 	.word	0x2e037073
 80a3acc:	3ba3198a 	.word	0x3ba3198a
 80a3ad0:	2e000000 	.word	0x2e000000
 80a3ad4:	3ba3198a 	.word	0x3ba3198a
 80a3ad8:	252049c1 	.word	0x252049c1
 80a3adc:	397b839a 	.word	0x397b839a
 80a3ae0:	1a626331 	.word	0x1a626331
 80a3ae4:	3dd0b461 	.word	0x3dd0b461
 80a3ae8:	3ff921fb 	.word	0x3ff921fb
 80a3aec:	00000000 	.word	0x00000000

080a3af0 <__kernel_cos>:
 80a3af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3af4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80a3af8:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80a3afc:	4692      	mov	sl, r2
 80a3afe:	469b      	mov	fp, r3
 80a3b00:	460c      	mov	r4, r1
 80a3b02:	4605      	mov	r5, r0
 80a3b04:	b085      	sub	sp, #20
 80a3b06:	da6d      	bge.n	80a3be4 <__kernel_cos+0xf4>
 80a3b08:	f001 fb70 	bl	80a51ec <__aeabi_d2iz>
 80a3b0c:	2800      	cmp	r0, #0
 80a3b0e:	f000 80eb 	beq.w	80a3ce8 <__kernel_cos+0x1f8>
 80a3b12:	462a      	mov	r2, r5
 80a3b14:	4623      	mov	r3, r4
 80a3b16:	4628      	mov	r0, r5
 80a3b18:	4621      	mov	r1, r4
 80a3b1a:	f001 f8b7 	bl	80a4c8c <__aeabi_dmul>
 80a3b1e:	a376      	add	r3, pc, #472	; (adr r3, 80a3cf8 <__kernel_cos+0x208>)
 80a3b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3b24:	4680      	mov	r8, r0
 80a3b26:	4689      	mov	r9, r1
 80a3b28:	f001 f8b0 	bl	80a4c8c <__aeabi_dmul>
 80a3b2c:	a374      	add	r3, pc, #464	; (adr r3, 80a3d00 <__kernel_cos+0x210>)
 80a3b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3b32:	f000 fef5 	bl	80a4920 <__adddf3>
 80a3b36:	4642      	mov	r2, r8
 80a3b38:	464b      	mov	r3, r9
 80a3b3a:	f001 f8a7 	bl	80a4c8c <__aeabi_dmul>
 80a3b3e:	a372      	add	r3, pc, #456	; (adr r3, 80a3d08 <__kernel_cos+0x218>)
 80a3b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3b44:	f000 feea 	bl	80a491c <__aeabi_dsub>
 80a3b48:	4642      	mov	r2, r8
 80a3b4a:	464b      	mov	r3, r9
 80a3b4c:	f001 f89e 	bl	80a4c8c <__aeabi_dmul>
 80a3b50:	a36f      	add	r3, pc, #444	; (adr r3, 80a3d10 <__kernel_cos+0x220>)
 80a3b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3b56:	f000 fee3 	bl	80a4920 <__adddf3>
 80a3b5a:	4642      	mov	r2, r8
 80a3b5c:	464b      	mov	r3, r9
 80a3b5e:	f001 f895 	bl	80a4c8c <__aeabi_dmul>
 80a3b62:	a36d      	add	r3, pc, #436	; (adr r3, 80a3d18 <__kernel_cos+0x228>)
 80a3b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3b68:	f000 fed8 	bl	80a491c <__aeabi_dsub>
 80a3b6c:	4642      	mov	r2, r8
 80a3b6e:	464b      	mov	r3, r9
 80a3b70:	f001 f88c 	bl	80a4c8c <__aeabi_dmul>
 80a3b74:	a36a      	add	r3, pc, #424	; (adr r3, 80a3d20 <__kernel_cos+0x230>)
 80a3b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3b7a:	f000 fed1 	bl	80a4920 <__adddf3>
 80a3b7e:	4642      	mov	r2, r8
 80a3b80:	464b      	mov	r3, r9
 80a3b82:	f001 f883 	bl	80a4c8c <__aeabi_dmul>
 80a3b86:	e9cd 0100 	strd	r0, r1, [sp]
 80a3b8a:	2200      	movs	r2, #0
 80a3b8c:	4640      	mov	r0, r8
 80a3b8e:	4649      	mov	r1, r9
 80a3b90:	4b65      	ldr	r3, [pc, #404]	; (80a3d28 <__kernel_cos+0x238>)
 80a3b92:	f001 f87b 	bl	80a4c8c <__aeabi_dmul>
 80a3b96:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a3b9a:	4606      	mov	r6, r0
 80a3b9c:	460f      	mov	r7, r1
 80a3b9e:	4640      	mov	r0, r8
 80a3ba0:	4649      	mov	r1, r9
 80a3ba2:	f001 f873 	bl	80a4c8c <__aeabi_dmul>
 80a3ba6:	46a8      	mov	r8, r5
 80a3ba8:	46a1      	mov	r9, r4
 80a3baa:	4652      	mov	r2, sl
 80a3bac:	465b      	mov	r3, fp
 80a3bae:	4604      	mov	r4, r0
 80a3bb0:	460d      	mov	r5, r1
 80a3bb2:	4640      	mov	r0, r8
 80a3bb4:	4649      	mov	r1, r9
 80a3bb6:	f001 f869 	bl	80a4c8c <__aeabi_dmul>
 80a3bba:	4602      	mov	r2, r0
 80a3bbc:	460b      	mov	r3, r1
 80a3bbe:	4620      	mov	r0, r4
 80a3bc0:	4629      	mov	r1, r5
 80a3bc2:	f000 feab 	bl	80a491c <__aeabi_dsub>
 80a3bc6:	4602      	mov	r2, r0
 80a3bc8:	460b      	mov	r3, r1
 80a3bca:	4630      	mov	r0, r6
 80a3bcc:	4639      	mov	r1, r7
 80a3bce:	f000 fea5 	bl	80a491c <__aeabi_dsub>
 80a3bd2:	4602      	mov	r2, r0
 80a3bd4:	460b      	mov	r3, r1
 80a3bd6:	2000      	movs	r0, #0
 80a3bd8:	4954      	ldr	r1, [pc, #336]	; (80a3d2c <__kernel_cos+0x23c>)
 80a3bda:	f000 fe9f 	bl	80a491c <__aeabi_dsub>
 80a3bde:	b005      	add	sp, #20
 80a3be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3be4:	4602      	mov	r2, r0
 80a3be6:	460b      	mov	r3, r1
 80a3be8:	f001 f850 	bl	80a4c8c <__aeabi_dmul>
 80a3bec:	a342      	add	r3, pc, #264	; (adr r3, 80a3cf8 <__kernel_cos+0x208>)
 80a3bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3bf2:	4680      	mov	r8, r0
 80a3bf4:	4689      	mov	r9, r1
 80a3bf6:	f001 f849 	bl	80a4c8c <__aeabi_dmul>
 80a3bfa:	a341      	add	r3, pc, #260	; (adr r3, 80a3d00 <__kernel_cos+0x210>)
 80a3bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3c00:	f000 fe8e 	bl	80a4920 <__adddf3>
 80a3c04:	4642      	mov	r2, r8
 80a3c06:	464b      	mov	r3, r9
 80a3c08:	f001 f840 	bl	80a4c8c <__aeabi_dmul>
 80a3c0c:	a33e      	add	r3, pc, #248	; (adr r3, 80a3d08 <__kernel_cos+0x218>)
 80a3c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3c12:	f000 fe83 	bl	80a491c <__aeabi_dsub>
 80a3c16:	4642      	mov	r2, r8
 80a3c18:	464b      	mov	r3, r9
 80a3c1a:	f001 f837 	bl	80a4c8c <__aeabi_dmul>
 80a3c1e:	a33c      	add	r3, pc, #240	; (adr r3, 80a3d10 <__kernel_cos+0x220>)
 80a3c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3c24:	f000 fe7c 	bl	80a4920 <__adddf3>
 80a3c28:	4642      	mov	r2, r8
 80a3c2a:	464b      	mov	r3, r9
 80a3c2c:	f001 f82e 	bl	80a4c8c <__aeabi_dmul>
 80a3c30:	a339      	add	r3, pc, #228	; (adr r3, 80a3d18 <__kernel_cos+0x228>)
 80a3c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3c36:	f000 fe71 	bl	80a491c <__aeabi_dsub>
 80a3c3a:	4642      	mov	r2, r8
 80a3c3c:	464b      	mov	r3, r9
 80a3c3e:	f001 f825 	bl	80a4c8c <__aeabi_dmul>
 80a3c42:	a337      	add	r3, pc, #220	; (adr r3, 80a3d20 <__kernel_cos+0x230>)
 80a3c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3c48:	f000 fe6a 	bl	80a4920 <__adddf3>
 80a3c4c:	464b      	mov	r3, r9
 80a3c4e:	4642      	mov	r2, r8
 80a3c50:	f001 f81c 	bl	80a4c8c <__aeabi_dmul>
 80a3c54:	4b36      	ldr	r3, [pc, #216]	; (80a3d30 <__kernel_cos+0x240>)
 80a3c56:	e9cd 0100 	strd	r0, r1, [sp]
 80a3c5a:	429e      	cmp	r6, r3
 80a3c5c:	dd95      	ble.n	80a3b8a <__kernel_cos+0x9a>
 80a3c5e:	4b35      	ldr	r3, [pc, #212]	; (80a3d34 <__kernel_cos+0x244>)
 80a3c60:	2200      	movs	r2, #0
 80a3c62:	429e      	cmp	r6, r3
 80a3c64:	dc3a      	bgt.n	80a3cdc <__kernel_cos+0x1ec>
 80a3c66:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
 80a3c6a:	2000      	movs	r0, #0
 80a3c6c:	492f      	ldr	r1, [pc, #188]	; (80a3d2c <__kernel_cos+0x23c>)
 80a3c6e:	4616      	mov	r6, r2
 80a3c70:	461f      	mov	r7, r3
 80a3c72:	f000 fe53 	bl	80a491c <__aeabi_dsub>
 80a3c76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a3c7a:	2200      	movs	r2, #0
 80a3c7c:	4640      	mov	r0, r8
 80a3c7e:	4649      	mov	r1, r9
 80a3c80:	4b29      	ldr	r3, [pc, #164]	; (80a3d28 <__kernel_cos+0x238>)
 80a3c82:	f001 f803 	bl	80a4c8c <__aeabi_dmul>
 80a3c86:	4632      	mov	r2, r6
 80a3c88:	463b      	mov	r3, r7
 80a3c8a:	f000 fe47 	bl	80a491c <__aeabi_dsub>
 80a3c8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a3c92:	4606      	mov	r6, r0
 80a3c94:	460f      	mov	r7, r1
 80a3c96:	4640      	mov	r0, r8
 80a3c98:	4649      	mov	r1, r9
 80a3c9a:	f000 fff7 	bl	80a4c8c <__aeabi_dmul>
 80a3c9e:	46a8      	mov	r8, r5
 80a3ca0:	46a1      	mov	r9, r4
 80a3ca2:	4652      	mov	r2, sl
 80a3ca4:	465b      	mov	r3, fp
 80a3ca6:	4604      	mov	r4, r0
 80a3ca8:	460d      	mov	r5, r1
 80a3caa:	4640      	mov	r0, r8
 80a3cac:	4649      	mov	r1, r9
 80a3cae:	f000 ffed 	bl	80a4c8c <__aeabi_dmul>
 80a3cb2:	4602      	mov	r2, r0
 80a3cb4:	460b      	mov	r3, r1
 80a3cb6:	4620      	mov	r0, r4
 80a3cb8:	4629      	mov	r1, r5
 80a3cba:	f000 fe2f 	bl	80a491c <__aeabi_dsub>
 80a3cbe:	4602      	mov	r2, r0
 80a3cc0:	460b      	mov	r3, r1
 80a3cc2:	4630      	mov	r0, r6
 80a3cc4:	4639      	mov	r1, r7
 80a3cc6:	f000 fe29 	bl	80a491c <__aeabi_dsub>
 80a3cca:	4602      	mov	r2, r0
 80a3ccc:	460b      	mov	r3, r1
 80a3cce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a3cd2:	f000 fe23 	bl	80a491c <__aeabi_dsub>
 80a3cd6:	b005      	add	sp, #20
 80a3cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3cdc:	4b16      	ldr	r3, [pc, #88]	; (80a3d38 <__kernel_cos+0x248>)
 80a3cde:	2600      	movs	r6, #0
 80a3ce0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80a3ce4:	4f15      	ldr	r7, [pc, #84]	; (80a3d3c <__kernel_cos+0x24c>)
 80a3ce6:	e7c8      	b.n	80a3c7a <__kernel_cos+0x18a>
 80a3ce8:	2000      	movs	r0, #0
 80a3cea:	4910      	ldr	r1, [pc, #64]	; (80a3d2c <__kernel_cos+0x23c>)
 80a3cec:	b005      	add	sp, #20
 80a3cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3cf2:	bf00      	nop
 80a3cf4:	f3af 8000 	nop.w
 80a3cf8:	be8838d4 	.word	0xbe8838d4
 80a3cfc:	bda8fae9 	.word	0xbda8fae9
 80a3d00:	bdb4b1c4 	.word	0xbdb4b1c4
 80a3d04:	3e21ee9e 	.word	0x3e21ee9e
 80a3d08:	809c52ad 	.word	0x809c52ad
 80a3d0c:	3e927e4f 	.word	0x3e927e4f
 80a3d10:	19cb1590 	.word	0x19cb1590
 80a3d14:	3efa01a0 	.word	0x3efa01a0
 80a3d18:	16c15177 	.word	0x16c15177
 80a3d1c:	3f56c16c 	.word	0x3f56c16c
 80a3d20:	5555554c 	.word	0x5555554c
 80a3d24:	3fa55555 	.word	0x3fa55555
 80a3d28:	3fe00000 	.word	0x3fe00000
 80a3d2c:	3ff00000 	.word	0x3ff00000
 80a3d30:	3fd33332 	.word	0x3fd33332
 80a3d34:	3fe90000 	.word	0x3fe90000
 80a3d38:	3fe70000 	.word	0x3fe70000
 80a3d3c:	3fd20000 	.word	0x3fd20000

080a3d40 <__kernel_rem_pio2>:
 80a3d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3d44:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80a3d48:	4cb8      	ldr	r4, [pc, #736]	; (80a402c <__kernel_rem_pio2+0x2ec>)
 80a3d4a:	9da2      	ldr	r5, [sp, #648]	; 0x288
 80a3d4c:	9308      	str	r3, [sp, #32]
 80a3d4e:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 80a3d52:	3b01      	subs	r3, #1
 80a3d54:	f112 0f14 	cmn.w	r2, #20
 80a3d58:	4607      	mov	r7, r0
 80a3d5a:	9405      	str	r4, [sp, #20]
 80a3d5c:	910b      	str	r1, [sp, #44]	; 0x2c
 80a3d5e:	9303      	str	r3, [sp, #12]
 80a3d60:	f2c0 8342 	blt.w	80a43e8 <__kernel_rem_pio2+0x6a8>
 80a3d64:	49b2      	ldr	r1, [pc, #712]	; (80a4030 <__kernel_rem_pio2+0x2f0>)
 80a3d66:	1ed3      	subs	r3, r2, #3
 80a3d68:	fb81 0103 	smull	r0, r1, r1, r3
 80a3d6c:	17db      	asrs	r3, r3, #31
 80a3d6e:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
 80a3d72:	9307      	str	r3, [sp, #28]
 80a3d74:	3301      	adds	r3, #1
 80a3d76:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
 80a3d7a:	00db      	lsls	r3, r3, #3
 80a3d7c:	18d3      	adds	r3, r2, r3
 80a3d7e:	9306      	str	r3, [sp, #24]
 80a3d80:	9a07      	ldr	r2, [sp, #28]
 80a3d82:	9b03      	ldr	r3, [sp, #12]
 80a3d84:	1ad6      	subs	r6, r2, r3
 80a3d86:	9a05      	ldr	r2, [sp, #20]
 80a3d88:	eb12 0903 	adds.w	r9, r2, r3
 80a3d8c:	d41b      	bmi.n	80a3dc6 <__kernel_rem_pio2+0x86>
 80a3d8e:	f109 0901 	add.w	r9, r9, #1
 80a3d92:	2400      	movs	r4, #0
 80a3d94:	2500      	movs	r5, #0
 80a3d96:	f8dd a28c 	ldr.w	sl, [sp, #652]	; 0x28c
 80a3d9a:	44b1      	add	r9, r6
 80a3d9c:	f10d 0880 	add.w	r8, sp, #128	; 0x80
 80a3da0:	e008      	b.n	80a3db4 <__kernel_rem_pio2+0x74>
 80a3da2:	f85a 0026 	ldr.w	r0, [sl, r6, lsl #2]
 80a3da6:	f000 ff07 	bl	80a4bb8 <__aeabi_i2d>
 80a3daa:	3601      	adds	r6, #1
 80a3dac:	454e      	cmp	r6, r9
 80a3dae:	e8e8 0102 	strd	r0, r1, [r8], #8
 80a3db2:	d008      	beq.n	80a3dc6 <__kernel_rem_pio2+0x86>
 80a3db4:	2e00      	cmp	r6, #0
 80a3db6:	daf4      	bge.n	80a3da2 <__kernel_rem_pio2+0x62>
 80a3db8:	4620      	mov	r0, r4
 80a3dba:	4629      	mov	r1, r5
 80a3dbc:	3601      	adds	r6, #1
 80a3dbe:	454e      	cmp	r6, r9
 80a3dc0:	e8e8 0102 	strd	r0, r1, [r8], #8
 80a3dc4:	d1f6      	bne.n	80a3db4 <__kernel_rem_pio2+0x74>
 80a3dc6:	9b05      	ldr	r3, [sp, #20]
 80a3dc8:	2b00      	cmp	r3, #0
 80a3dca:	f2c0 83bc 	blt.w	80a4546 <__kernel_rem_pio2+0x806>
 80a3dce:	9b08      	ldr	r3, [sp, #32]
 80a3dd0:	aa20      	add	r2, sp, #128	; 0x80
 80a3dd2:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 80a3dd6:	00da      	lsls	r2, r3, #3
 80a3dd8:	9202      	str	r2, [sp, #8]
 80a3dda:	9a05      	ldr	r2, [sp, #20]
 80a3ddc:	f1a7 0108 	sub.w	r1, r7, #8
 80a3de0:	441a      	add	r2, r3
 80a3de2:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80a3de6:	9104      	str	r1, [sp, #16]
 80a3de8:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80a3dec:	9201      	str	r2, [sp, #4]
 80a3dee:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
 80a3df2:	9b03      	ldr	r3, [sp, #12]
 80a3df4:	2b00      	cmp	r3, #0
 80a3df6:	f2c0 81ae 	blt.w	80a4156 <__kernel_rem_pio2+0x416>
 80a3dfa:	4657      	mov	r7, sl
 80a3dfc:	2400      	movs	r4, #0
 80a3dfe:	2500      	movs	r5, #0
 80a3e00:	9e04      	ldr	r6, [sp, #16]
 80a3e02:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
 80a3e06:	e9f6 0102 	ldrd	r0, r1, [r6, #8]!
 80a3e0a:	f000 ff3f 	bl	80a4c8c <__aeabi_dmul>
 80a3e0e:	4602      	mov	r2, r0
 80a3e10:	460b      	mov	r3, r1
 80a3e12:	4620      	mov	r0, r4
 80a3e14:	4629      	mov	r1, r5
 80a3e16:	f000 fd83 	bl	80a4920 <__adddf3>
 80a3e1a:	4546      	cmp	r6, r8
 80a3e1c:	4604      	mov	r4, r0
 80a3e1e:	460d      	mov	r5, r1
 80a3e20:	d1ef      	bne.n	80a3e02 <__kernel_rem_pio2+0xc2>
 80a3e22:	9b01      	ldr	r3, [sp, #4]
 80a3e24:	f109 0901 	add.w	r9, r9, #1
 80a3e28:	4599      	cmp	r9, r3
 80a3e2a:	e8eb 4502 	strd	r4, r5, [fp], #8
 80a3e2e:	f10a 0a08 	add.w	sl, sl, #8
 80a3e32:	d1de      	bne.n	80a3df2 <__kernel_rem_pio2+0xb2>
 80a3e34:	9b04      	ldr	r3, [sp, #16]
 80a3e36:	f8dd b008 	ldr.w	fp, [sp, #8]
 80a3e3a:	aa0b      	add	r2, sp, #44	; 0x2c
 80a3e3c:	449b      	add	fp, r3
 80a3e3e:	9b05      	ldr	r3, [sp, #20]
 80a3e40:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80a3e44:	920a      	str	r2, [sp, #40]	; 0x28
 80a3e46:	aa0c      	add	r2, sp, #48	; 0x30
 80a3e48:	9301      	str	r3, [sp, #4]
 80a3e4a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80a3e4e:	3b08      	subs	r3, #8
 80a3e50:	9309      	str	r3, [sp, #36]	; 0x24
 80a3e52:	9a01      	ldr	r2, [sp, #4]
 80a3e54:	ab98      	add	r3, sp, #608	; 0x260
 80a3e56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80a3e5a:	2a00      	cmp	r2, #0
 80a3e5c:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 80a3e60:	dd29      	ble.n	80a3eb6 <__kernel_rem_pio2+0x176>
 80a3e62:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 80a3e66:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80a3e6a:	eb0a 08c2 	add.w	r8, sl, r2, lsl #3
 80a3e6e:	2200      	movs	r2, #0
 80a3e70:	4b70      	ldr	r3, [pc, #448]	; (80a4034 <__kernel_rem_pio2+0x2f4>)
 80a3e72:	4620      	mov	r0, r4
 80a3e74:	4629      	mov	r1, r5
 80a3e76:	f000 ff09 	bl	80a4c8c <__aeabi_dmul>
 80a3e7a:	f001 f9b7 	bl	80a51ec <__aeabi_d2iz>
 80a3e7e:	f000 fe9b 	bl	80a4bb8 <__aeabi_i2d>
 80a3e82:	2200      	movs	r2, #0
 80a3e84:	4b6c      	ldr	r3, [pc, #432]	; (80a4038 <__kernel_rem_pio2+0x2f8>)
 80a3e86:	4606      	mov	r6, r0
 80a3e88:	460f      	mov	r7, r1
 80a3e8a:	f000 feff 	bl	80a4c8c <__aeabi_dmul>
 80a3e8e:	4602      	mov	r2, r0
 80a3e90:	460b      	mov	r3, r1
 80a3e92:	4620      	mov	r0, r4
 80a3e94:	4629      	mov	r1, r5
 80a3e96:	f000 fd41 	bl	80a491c <__aeabi_dsub>
 80a3e9a:	f001 f9a7 	bl	80a51ec <__aeabi_d2iz>
 80a3e9e:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 80a3ea2:	f849 0b04 	str.w	r0, [r9], #4
 80a3ea6:	4639      	mov	r1, r7
 80a3ea8:	4630      	mov	r0, r6
 80a3eaa:	f000 fd39 	bl	80a4920 <__adddf3>
 80a3eae:	45d0      	cmp	r8, sl
 80a3eb0:	4604      	mov	r4, r0
 80a3eb2:	460d      	mov	r5, r1
 80a3eb4:	d1db      	bne.n	80a3e6e <__kernel_rem_pio2+0x12e>
 80a3eb6:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80a3eba:	4620      	mov	r0, r4
 80a3ebc:	4629      	mov	r1, r5
 80a3ebe:	464a      	mov	r2, r9
 80a3ec0:	f000 fcaa 	bl	80a4818 <scalbn>
 80a3ec4:	2200      	movs	r2, #0
 80a3ec6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80a3eca:	4604      	mov	r4, r0
 80a3ecc:	460d      	mov	r5, r1
 80a3ece:	f000 fedd 	bl	80a4c8c <__aeabi_dmul>
 80a3ed2:	f000 fc25 	bl	80a4720 <floor>
 80a3ed6:	2200      	movs	r2, #0
 80a3ed8:	4b58      	ldr	r3, [pc, #352]	; (80a403c <__kernel_rem_pio2+0x2fc>)
 80a3eda:	f000 fed7 	bl	80a4c8c <__aeabi_dmul>
 80a3ede:	4602      	mov	r2, r0
 80a3ee0:	460b      	mov	r3, r1
 80a3ee2:	4620      	mov	r0, r4
 80a3ee4:	4629      	mov	r1, r5
 80a3ee6:	f000 fd19 	bl	80a491c <__aeabi_dsub>
 80a3eea:	460d      	mov	r5, r1
 80a3eec:	4604      	mov	r4, r0
 80a3eee:	f001 f97d 	bl	80a51ec <__aeabi_d2iz>
 80a3ef2:	4680      	mov	r8, r0
 80a3ef4:	f000 fe60 	bl	80a4bb8 <__aeabi_i2d>
 80a3ef8:	460b      	mov	r3, r1
 80a3efa:	4602      	mov	r2, r0
 80a3efc:	4629      	mov	r1, r5
 80a3efe:	4620      	mov	r0, r4
 80a3f00:	f000 fd0c 	bl	80a491c <__aeabi_dsub>
 80a3f04:	464b      	mov	r3, r9
 80a3f06:	2b00      	cmp	r3, #0
 80a3f08:	4606      	mov	r6, r0
 80a3f0a:	460f      	mov	r7, r1
 80a3f0c:	f340 8098 	ble.w	80a4040 <__kernel_rem_pio2+0x300>
 80a3f10:	9a01      	ldr	r2, [sp, #4]
 80a3f12:	a90c      	add	r1, sp, #48	; 0x30
 80a3f14:	3a01      	subs	r2, #1
 80a3f16:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
 80a3f1a:	f1c9 0318 	rsb	r3, r9, #24
 80a3f1e:	fa45 f103 	asr.w	r1, r5, r3
 80a3f22:	fa01 f303 	lsl.w	r3, r1, r3
 80a3f26:	1aed      	subs	r5, r5, r3
 80a3f28:	ab0c      	add	r3, sp, #48	; 0x30
 80a3f2a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80a3f2e:	f1c9 0317 	rsb	r3, r9, #23
 80a3f32:	411d      	asrs	r5, r3
 80a3f34:	2d00      	cmp	r5, #0
 80a3f36:	4488      	add	r8, r1
 80a3f38:	f300 808c 	bgt.w	80a4054 <__kernel_rem_pio2+0x314>
 80a3f3c:	2200      	movs	r2, #0
 80a3f3e:	2300      	movs	r3, #0
 80a3f40:	4630      	mov	r0, r6
 80a3f42:	4639      	mov	r1, r7
 80a3f44:	f001 f90a 	bl	80a515c <__aeabi_dcmpeq>
 80a3f48:	2800      	cmp	r0, #0
 80a3f4a:	f000 8254 	beq.w	80a43f6 <__kernel_rem_pio2+0x6b6>
 80a3f4e:	9b01      	ldr	r3, [sp, #4]
 80a3f50:	9a05      	ldr	r2, [sp, #20]
 80a3f52:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 80a3f56:	4552      	cmp	r2, sl
 80a3f58:	dc10      	bgt.n	80a3f7c <__kernel_rem_pio2+0x23c>
 80a3f5a:	2200      	movs	r2, #0
 80a3f5c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80a3f60:	3b01      	subs	r3, #1
 80a3f62:	a90c      	add	r1, sp, #48	; 0x30
 80a3f64:	980a      	ldr	r0, [sp, #40]	; 0x28
 80a3f66:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80a3f6a:	f853 1904 	ldr.w	r1, [r3], #-4
 80a3f6e:	4283      	cmp	r3, r0
 80a3f70:	ea42 0201 	orr.w	r2, r2, r1
 80a3f74:	d1f9      	bne.n	80a3f6a <__kernel_rem_pio2+0x22a>
 80a3f76:	2a00      	cmp	r2, #0
 80a3f78:	f040 80f0 	bne.w	80a415c <__kernel_rem_pio2+0x41c>
 80a3f7c:	9b05      	ldr	r3, [sp, #20]
 80a3f7e:	aa0c      	add	r2, sp, #48	; 0x30
 80a3f80:	3b01      	subs	r3, #1
 80a3f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80a3f86:	2b00      	cmp	r3, #0
 80a3f88:	f040 80e0 	bne.w	80a414c <__kernel_rem_pio2+0x40c>
 80a3f8c:	2301      	movs	r3, #1
 80a3f8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a3f90:	f852 1904 	ldr.w	r1, [r2], #-4
 80a3f94:	3301      	adds	r3, #1
 80a3f96:	2900      	cmp	r1, #0
 80a3f98:	d0fa      	beq.n	80a3f90 <__kernel_rem_pio2+0x250>
 80a3f9a:	9a01      	ldr	r2, [sp, #4]
 80a3f9c:	18d3      	adds	r3, r2, r3
 80a3f9e:	9302      	str	r3, [sp, #8]
 80a3fa0:	1c53      	adds	r3, r2, #1
 80a3fa2:	4699      	mov	r9, r3
 80a3fa4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80a3fa8:	9a08      	ldr	r2, [sp, #32]
 80a3faa:	4490      	add	r8, r2
 80a3fac:	9a07      	ldr	r2, [sp, #28]
 80a3fae:	eb02 0a03 	add.w	sl, r2, r3
 80a3fb2:	f10a 4a80 	add.w	sl, sl, #1073741824	; 0x40000000
 80a3fb6:	9aa3      	ldr	r2, [sp, #652]	; 0x28c
 80a3fb8:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80a3fbc:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 80a3fc0:	aa20      	add	r2, sp, #128	; 0x80
 80a3fc2:	eb02 08c8 	add.w	r8, r2, r8, lsl #3
 80a3fc6:	aa70      	add	r2, sp, #448	; 0x1c0
 80a3fc8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80a3fcc:	9301      	str	r3, [sp, #4]
 80a3fce:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 80a3fd2:	f000 fdf1 	bl	80a4bb8 <__aeabi_i2d>
 80a3fd6:	9b03      	ldr	r3, [sp, #12]
 80a3fd8:	4647      	mov	r7, r8
 80a3fda:	2b00      	cmp	r3, #0
 80a3fdc:	f108 0808 	add.w	r8, r8, #8
 80a3fe0:	e948 0102 	strd	r0, r1, [r8, #-8]
 80a3fe4:	db1f      	blt.n	80a4026 <__kernel_rem_pio2+0x2e6>
 80a3fe6:	2400      	movs	r4, #0
 80a3fe8:	2500      	movs	r5, #0
 80a3fea:	9e04      	ldr	r6, [sp, #16]
 80a3fec:	3f08      	subs	r7, #8
 80a3fee:	e001      	b.n	80a3ff4 <__kernel_rem_pio2+0x2b4>
 80a3ff0:	e877 0102 	ldrd	r0, r1, [r7], #-8
 80a3ff4:	e9f6 2302 	ldrd	r2, r3, [r6, #8]!
 80a3ff8:	f000 fe48 	bl	80a4c8c <__aeabi_dmul>
 80a3ffc:	4602      	mov	r2, r0
 80a3ffe:	460b      	mov	r3, r1
 80a4000:	4620      	mov	r0, r4
 80a4002:	4629      	mov	r1, r5
 80a4004:	f000 fc8c 	bl	80a4920 <__adddf3>
 80a4008:	455e      	cmp	r6, fp
 80a400a:	4604      	mov	r4, r0
 80a400c:	460d      	mov	r5, r1
 80a400e:	d1ef      	bne.n	80a3ff0 <__kernel_rem_pio2+0x2b0>
 80a4010:	9b01      	ldr	r3, [sp, #4]
 80a4012:	f109 0901 	add.w	r9, r9, #1
 80a4016:	e8e3 4502 	strd	r4, r5, [r3], #8
 80a401a:	9301      	str	r3, [sp, #4]
 80a401c:	9b02      	ldr	r3, [sp, #8]
 80a401e:	4599      	cmp	r9, r3
 80a4020:	ddd5      	ble.n	80a3fce <__kernel_rem_pio2+0x28e>
 80a4022:	9301      	str	r3, [sp, #4]
 80a4024:	e715      	b.n	80a3e52 <__kernel_rem_pio2+0x112>
 80a4026:	2400      	movs	r4, #0
 80a4028:	2500      	movs	r5, #0
 80a402a:	e7f1      	b.n	80a4010 <__kernel_rem_pio2+0x2d0>
 80a402c:	080a5bd8 	.word	0x080a5bd8
 80a4030:	2aaaaaab 	.word	0x2aaaaaab
 80a4034:	3e700000 	.word	0x3e700000
 80a4038:	41700000 	.word	0x41700000
 80a403c:	40200000 	.word	0x40200000
 80a4040:	d16b      	bne.n	80a411a <__kernel_rem_pio2+0x3da>
 80a4042:	9b01      	ldr	r3, [sp, #4]
 80a4044:	aa0c      	add	r2, sp, #48	; 0x30
 80a4046:	3b01      	subs	r3, #1
 80a4048:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 80a404c:	15ed      	asrs	r5, r5, #23
 80a404e:	2d00      	cmp	r5, #0
 80a4050:	f77f af74 	ble.w	80a3f3c <__kernel_rem_pio2+0x1fc>
 80a4054:	9b01      	ldr	r3, [sp, #4]
 80a4056:	f108 0801 	add.w	r8, r8, #1
 80a405a:	2b00      	cmp	r3, #0
 80a405c:	f340 81c9 	ble.w	80a43f2 <__kernel_rem_pio2+0x6b2>
 80a4060:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80a4062:	2c00      	cmp	r4, #0
 80a4064:	d151      	bne.n	80a410a <__kernel_rem_pio2+0x3ca>
 80a4066:	9b01      	ldr	r3, [sp, #4]
 80a4068:	2b01      	cmp	r3, #1
 80a406a:	d020      	beq.n	80a40ae <__kernel_rem_pio2+0x36e>
 80a406c:	2201      	movs	r2, #1
 80a406e:	ab0c      	add	r3, sp, #48	; 0x30
 80a4070:	f853 4f04 	ldr.w	r4, [r3, #4]!
 80a4074:	2c00      	cmp	r4, #0
 80a4076:	d04b      	beq.n	80a4110 <__kernel_rem_pio2+0x3d0>
 80a4078:	1c53      	adds	r3, r2, #1
 80a407a:	a90c      	add	r1, sp, #48	; 0x30
 80a407c:	f1c4 7480 	rsb	r4, r4, #16777216	; 0x1000000
 80a4080:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
 80a4084:	9901      	ldr	r1, [sp, #4]
 80a4086:	4299      	cmp	r1, r3
 80a4088:	dd10      	ble.n	80a40ac <__kernel_rem_pio2+0x36c>
 80a408a:	ac0c      	add	r4, sp, #48	; 0x30
 80a408c:	aa0c      	add	r2, sp, #48	; 0x30
 80a408e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80a4092:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80a4096:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80a409a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80a409e:	e000      	b.n	80a40a2 <__kernel_rem_pio2+0x362>
 80a40a0:	681a      	ldr	r2, [r3, #0]
 80a40a2:	1a82      	subs	r2, r0, r2
 80a40a4:	f843 2b04 	str.w	r2, [r3], #4
 80a40a8:	428b      	cmp	r3, r1
 80a40aa:	d1f9      	bne.n	80a40a0 <__kernel_rem_pio2+0x360>
 80a40ac:	2401      	movs	r4, #1
 80a40ae:	9b06      	ldr	r3, [sp, #24]
 80a40b0:	2b00      	cmp	r3, #0
 80a40b2:	dd0e      	ble.n	80a40d2 <__kernel_rem_pio2+0x392>
 80a40b4:	2b01      	cmp	r3, #1
 80a40b6:	f000 818c 	beq.w	80a43d2 <__kernel_rem_pio2+0x692>
 80a40ba:	2b02      	cmp	r3, #2
 80a40bc:	d109      	bne.n	80a40d2 <__kernel_rem_pio2+0x392>
 80a40be:	9b01      	ldr	r3, [sp, #4]
 80a40c0:	a90c      	add	r1, sp, #48	; 0x30
 80a40c2:	1e5a      	subs	r2, r3, #1
 80a40c4:	ab0c      	add	r3, sp, #48	; 0x30
 80a40c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a40ca:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80a40ce:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80a40d2:	2d02      	cmp	r5, #2
 80a40d4:	f47f af32 	bne.w	80a3f3c <__kernel_rem_pio2+0x1fc>
 80a40d8:	4632      	mov	r2, r6
 80a40da:	463b      	mov	r3, r7
 80a40dc:	2000      	movs	r0, #0
 80a40de:	497a      	ldr	r1, [pc, #488]	; (80a42c8 <__kernel_rem_pio2+0x588>)
 80a40e0:	f000 fc1c 	bl	80a491c <__aeabi_dsub>
 80a40e4:	4606      	mov	r6, r0
 80a40e6:	460f      	mov	r7, r1
 80a40e8:	2c00      	cmp	r4, #0
 80a40ea:	f43f af27 	beq.w	80a3f3c <__kernel_rem_pio2+0x1fc>
 80a40ee:	9a06      	ldr	r2, [sp, #24]
 80a40f0:	2000      	movs	r0, #0
 80a40f2:	4975      	ldr	r1, [pc, #468]	; (80a42c8 <__kernel_rem_pio2+0x588>)
 80a40f4:	f000 fb90 	bl	80a4818 <scalbn>
 80a40f8:	4602      	mov	r2, r0
 80a40fa:	460b      	mov	r3, r1
 80a40fc:	4630      	mov	r0, r6
 80a40fe:	4639      	mov	r1, r7
 80a4100:	f000 fc0c 	bl	80a491c <__aeabi_dsub>
 80a4104:	4606      	mov	r6, r0
 80a4106:	460f      	mov	r7, r1
 80a4108:	e718      	b.n	80a3f3c <__kernel_rem_pio2+0x1fc>
 80a410a:	2301      	movs	r3, #1
 80a410c:	2200      	movs	r2, #0
 80a410e:	e7b4      	b.n	80a407a <__kernel_rem_pio2+0x33a>
 80a4110:	9901      	ldr	r1, [sp, #4]
 80a4112:	3201      	adds	r2, #1
 80a4114:	428a      	cmp	r2, r1
 80a4116:	d1ab      	bne.n	80a4070 <__kernel_rem_pio2+0x330>
 80a4118:	e7c9      	b.n	80a40ae <__kernel_rem_pio2+0x36e>
 80a411a:	2200      	movs	r2, #0
 80a411c:	4b6b      	ldr	r3, [pc, #428]	; (80a42cc <__kernel_rem_pio2+0x58c>)
 80a411e:	f001 f83b 	bl	80a5198 <__aeabi_dcmpge>
 80a4122:	4605      	mov	r5, r0
 80a4124:	2800      	cmp	r0, #0
 80a4126:	f43f af09 	beq.w	80a3f3c <__kernel_rem_pio2+0x1fc>
 80a412a:	9b01      	ldr	r3, [sp, #4]
 80a412c:	f108 0801 	add.w	r8, r8, #1
 80a4130:	2b00      	cmp	r3, #0
 80a4132:	bfc8      	it	gt
 80a4134:	2502      	movgt	r5, #2
 80a4136:	dc93      	bgt.n	80a4060 <__kernel_rem_pio2+0x320>
 80a4138:	4632      	mov	r2, r6
 80a413a:	463b      	mov	r3, r7
 80a413c:	2000      	movs	r0, #0
 80a413e:	4962      	ldr	r1, [pc, #392]	; (80a42c8 <__kernel_rem_pio2+0x588>)
 80a4140:	f000 fbec 	bl	80a491c <__aeabi_dsub>
 80a4144:	2502      	movs	r5, #2
 80a4146:	4606      	mov	r6, r0
 80a4148:	460f      	mov	r7, r1
 80a414a:	e6f7      	b.n	80a3f3c <__kernel_rem_pio2+0x1fc>
 80a414c:	9b01      	ldr	r3, [sp, #4]
 80a414e:	3301      	adds	r3, #1
 80a4150:	4699      	mov	r9, r3
 80a4152:	9302      	str	r3, [sp, #8]
 80a4154:	e726      	b.n	80a3fa4 <__kernel_rem_pio2+0x264>
 80a4156:	2400      	movs	r4, #0
 80a4158:	2500      	movs	r5, #0
 80a415a:	e662      	b.n	80a3e22 <__kernel_rem_pio2+0xe2>
 80a415c:	9b06      	ldr	r3, [sp, #24]
 80a415e:	9503      	str	r5, [sp, #12]
 80a4160:	f1a3 0218 	sub.w	r2, r3, #24
 80a4164:	ab0c      	add	r3, sp, #48	; 0x30
 80a4166:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
 80a416a:	f8cd 801c 	str.w	r8, [sp, #28]
 80a416e:	9206      	str	r2, [sp, #24]
 80a4170:	b973      	cbnz	r3, 80a4190 <__kernel_rem_pio2+0x450>
 80a4172:	9b01      	ldr	r3, [sp, #4]
 80a4174:	a90c      	add	r1, sp, #48	; 0x30
 80a4176:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80a417a:	3b02      	subs	r3, #2
 80a417c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80a4180:	f853 1904 	ldr.w	r1, [r3], #-4
 80a4184:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80a4188:	3a18      	subs	r2, #24
 80a418a:	2900      	cmp	r1, #0
 80a418c:	d0f8      	beq.n	80a4180 <__kernel_rem_pio2+0x440>
 80a418e:	9206      	str	r2, [sp, #24]
 80a4190:	2000      	movs	r0, #0
 80a4192:	9a06      	ldr	r2, [sp, #24]
 80a4194:	494c      	ldr	r1, [pc, #304]	; (80a42c8 <__kernel_rem_pio2+0x588>)
 80a4196:	f000 fb3f 	bl	80a4818 <scalbn>
 80a419a:	f1ba 0f00 	cmp.w	sl, #0
 80a419e:	4604      	mov	r4, r0
 80a41a0:	460d      	mov	r5, r1
 80a41a2:	f2c0 81d7 	blt.w	80a4554 <__kernel_rem_pio2+0x814>
 80a41a6:	f04f 0800 	mov.w	r8, #0
 80a41aa:	ab70      	add	r3, sp, #448	; 0x1c0
 80a41ac:	eb03 0bca 	add.w	fp, r3, sl, lsl #3
 80a41b0:	aa0c      	add	r2, sp, #48	; 0x30
 80a41b2:	f10a 0301 	add.w	r3, sl, #1
 80a41b6:	9306      	str	r3, [sp, #24]
 80a41b8:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 80a41bc:	f8df 9110 	ldr.w	r9, [pc, #272]	; 80a42d0 <__kernel_rem_pio2+0x590>
 80a41c0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80a41c4:	9304      	str	r3, [sp, #16]
 80a41c6:	f10b 0708 	add.w	r7, fp, #8
 80a41ca:	f856 0d04 	ldr.w	r0, [r6, #-4]!
 80a41ce:	f000 fcf3 	bl	80a4bb8 <__aeabi_i2d>
 80a41d2:	4622      	mov	r2, r4
 80a41d4:	462b      	mov	r3, r5
 80a41d6:	f000 fd59 	bl	80a4c8c <__aeabi_dmul>
 80a41da:	464b      	mov	r3, r9
 80a41dc:	e967 0102 	strd	r0, r1, [r7, #-8]!
 80a41e0:	4642      	mov	r2, r8
 80a41e2:	4620      	mov	r0, r4
 80a41e4:	4629      	mov	r1, r5
 80a41e6:	f000 fd51 	bl	80a4c8c <__aeabi_dmul>
 80a41ea:	ab0c      	add	r3, sp, #48	; 0x30
 80a41ec:	429e      	cmp	r6, r3
 80a41ee:	4604      	mov	r4, r0
 80a41f0:	460d      	mov	r5, r1
 80a41f2:	d1ea      	bne.n	80a41ca <__kernel_rem_pio2+0x48a>
 80a41f4:	ab48      	add	r3, sp, #288	; 0x120
 80a41f6:	e9cd 3a01 	strd	r3, sl, [sp, #4]
 80a41fa:	f8dd a014 	ldr.w	sl, [sp, #20]
 80a41fe:	f04f 0900 	mov.w	r9, #0
 80a4202:	f1ba 0f00 	cmp.w	sl, #0
 80a4206:	db2c      	blt.n	80a4262 <__kernel_rem_pio2+0x522>
 80a4208:	a32d      	add	r3, pc, #180	; (adr r3, 80a42c0 <__kernel_rem_pio2+0x580>)
 80a420a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a420e:	465f      	mov	r7, fp
 80a4210:	2600      	movs	r6, #0
 80a4212:	2400      	movs	r4, #0
 80a4214:	2500      	movs	r5, #0
 80a4216:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 80a42d4 <__kernel_rem_pio2+0x594>
 80a421a:	e003      	b.n	80a4224 <__kernel_rem_pio2+0x4e4>
 80a421c:	45b1      	cmp	r9, r6
 80a421e:	db10      	blt.n	80a4242 <__kernel_rem_pio2+0x502>
 80a4220:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 80a4224:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 80a4228:	f000 fd30 	bl	80a4c8c <__aeabi_dmul>
 80a422c:	4602      	mov	r2, r0
 80a422e:	460b      	mov	r3, r1
 80a4230:	4620      	mov	r0, r4
 80a4232:	4629      	mov	r1, r5
 80a4234:	f000 fb74 	bl	80a4920 <__adddf3>
 80a4238:	3601      	adds	r6, #1
 80a423a:	45b2      	cmp	sl, r6
 80a423c:	4604      	mov	r4, r0
 80a423e:	460d      	mov	r5, r1
 80a4240:	daec      	bge.n	80a421c <__kernel_rem_pio2+0x4dc>
 80a4242:	9b01      	ldr	r3, [sp, #4]
 80a4244:	9a02      	ldr	r2, [sp, #8]
 80a4246:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80a424a:	4591      	cmp	r9, r2
 80a424c:	e9c3 4500 	strd	r4, r5, [r3]
 80a4250:	f1ab 0b08 	sub.w	fp, fp, #8
 80a4254:	f109 0301 	add.w	r3, r9, #1
 80a4258:	d006      	beq.n	80a4268 <__kernel_rem_pio2+0x528>
 80a425a:	f1ba 0f00 	cmp.w	sl, #0
 80a425e:	4699      	mov	r9, r3
 80a4260:	dad2      	bge.n	80a4208 <__kernel_rem_pio2+0x4c8>
 80a4262:	2400      	movs	r4, #0
 80a4264:	2500      	movs	r5, #0
 80a4266:	e7ec      	b.n	80a4242 <__kernel_rem_pio2+0x502>
 80a4268:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80a426a:	f8dd a008 	ldr.w	sl, [sp, #8]
 80a426e:	2b02      	cmp	r3, #2
 80a4270:	dc32      	bgt.n	80a42d8 <__kernel_rem_pio2+0x598>
 80a4272:	2b00      	cmp	r3, #0
 80a4274:	f300 80f2 	bgt.w	80a445c <__kernel_rem_pio2+0x71c>
 80a4278:	d118      	bne.n	80a42ac <__kernel_rem_pio2+0x56c>
 80a427a:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80a427c:	9d04      	ldr	r5, [sp, #16]
 80a427e:	461c      	mov	r4, r3
 80a4280:	9e01      	ldr	r6, [sp, #4]
 80a4282:	3508      	adds	r5, #8
 80a4284:	4435      	add	r5, r6
 80a4286:	4618      	mov	r0, r3
 80a4288:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80a428c:	4621      	mov	r1, r4
 80a428e:	f000 fb47 	bl	80a4920 <__adddf3>
 80a4292:	42ae      	cmp	r6, r5
 80a4294:	4603      	mov	r3, r0
 80a4296:	460c      	mov	r4, r1
 80a4298:	d1f5      	bne.n	80a4286 <__kernel_rem_pio2+0x546>
 80a429a:	9a03      	ldr	r2, [sp, #12]
 80a429c:	b10a      	cbz	r2, 80a42a2 <__kernel_rem_pio2+0x562>
 80a429e:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 80a42a2:	4618      	mov	r0, r3
 80a42a4:	4621      	mov	r1, r4
 80a42a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a42a8:	e9c3 0100 	strd	r0, r1, [r3]
 80a42ac:	9b07      	ldr	r3, [sp, #28]
 80a42ae:	f003 0007 	and.w	r0, r3, #7
 80a42b2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80a42b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a42ba:	bf00      	nop
 80a42bc:	f3af 8000 	nop.w
 80a42c0:	40000000 	.word	0x40000000
 80a42c4:	3ff921fb 	.word	0x3ff921fb
 80a42c8:	3ff00000 	.word	0x3ff00000
 80a42cc:	3fe00000 	.word	0x3fe00000
 80a42d0:	3e700000 	.word	0x3e700000
 80a42d4:	080a5ba0 	.word	0x080a5ba0
 80a42d8:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80a42da:	2b03      	cmp	r3, #3
 80a42dc:	d1e6      	bne.n	80a42ac <__kernel_rem_pio2+0x56c>
 80a42de:	f1ba 0f00 	cmp.w	sl, #0
 80a42e2:	f000 814d 	beq.w	80a4580 <__kernel_rem_pio2+0x840>
 80a42e6:	9b01      	ldr	r3, [sp, #4]
 80a42e8:	9a04      	ldr	r2, [sp, #16]
 80a42ea:	4413      	add	r3, r2
 80a42ec:	469b      	mov	fp, r3
 80a42ee:	e9d3 4500 	ldrd	r4, r5, [r3]
 80a42f2:	e95b 6702 	ldrd	r6, r7, [fp, #-8]
 80a42f6:	4620      	mov	r0, r4
 80a42f8:	4629      	mov	r1, r5
 80a42fa:	4632      	mov	r2, r6
 80a42fc:	463b      	mov	r3, r7
 80a42fe:	f000 fb0f 	bl	80a4920 <__adddf3>
 80a4302:	46a0      	mov	r8, r4
 80a4304:	46a9      	mov	r9, r5
 80a4306:	4604      	mov	r4, r0
 80a4308:	460d      	mov	r5, r1
 80a430a:	4622      	mov	r2, r4
 80a430c:	462b      	mov	r3, r5
 80a430e:	4630      	mov	r0, r6
 80a4310:	4639      	mov	r1, r7
 80a4312:	f000 fb03 	bl	80a491c <__aeabi_dsub>
 80a4316:	464b      	mov	r3, r9
 80a4318:	4642      	mov	r2, r8
 80a431a:	f000 fb01 	bl	80a4920 <__adddf3>
 80a431e:	e9cb 0100 	strd	r0, r1, [fp]
 80a4322:	e96b 4502 	strd	r4, r5, [fp, #-8]!
 80a4326:	9b01      	ldr	r3, [sp, #4]
 80a4328:	455b      	cmp	r3, fp
 80a432a:	d1e2      	bne.n	80a42f2 <__kernel_rem_pio2+0x5b2>
 80a432c:	f1ba 0f01 	cmp.w	sl, #1
 80a4330:	f340 8126 	ble.w	80a4580 <__kernel_rem_pio2+0x840>
 80a4334:	9b04      	ldr	r3, [sp, #16]
 80a4336:	9a01      	ldr	r2, [sp, #4]
 80a4338:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 80a433c:	4413      	add	r3, r2
 80a433e:	469a      	mov	sl, r3
 80a4340:	e9d3 4500 	ldrd	r4, r5, [r3]
 80a4344:	9302      	str	r3, [sp, #8]
 80a4346:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 80a434a:	4620      	mov	r0, r4
 80a434c:	4629      	mov	r1, r5
 80a434e:	4632      	mov	r2, r6
 80a4350:	463b      	mov	r3, r7
 80a4352:	f000 fae5 	bl	80a4920 <__adddf3>
 80a4356:	46a0      	mov	r8, r4
 80a4358:	46a9      	mov	r9, r5
 80a435a:	4604      	mov	r4, r0
 80a435c:	460d      	mov	r5, r1
 80a435e:	4622      	mov	r2, r4
 80a4360:	462b      	mov	r3, r5
 80a4362:	4630      	mov	r0, r6
 80a4364:	4639      	mov	r1, r7
 80a4366:	f000 fad9 	bl	80a491c <__aeabi_dsub>
 80a436a:	4642      	mov	r2, r8
 80a436c:	464b      	mov	r3, r9
 80a436e:	f000 fad7 	bl	80a4920 <__adddf3>
 80a4372:	e9ca 0100 	strd	r0, r1, [sl]
 80a4376:	e96a 4502 	strd	r4, r5, [sl, #-8]!
 80a437a:	45d3      	cmp	fp, sl
 80a437c:	d1e3      	bne.n	80a4346 <__kernel_rem_pio2+0x606>
 80a437e:	2300      	movs	r3, #0
 80a4380:	461e      	mov	r6, r3
 80a4382:	9c02      	ldr	r4, [sp, #8]
 80a4384:	9a01      	ldr	r2, [sp, #4]
 80a4386:	3408      	adds	r4, #8
 80a4388:	f102 0510 	add.w	r5, r2, #16
 80a438c:	4618      	mov	r0, r3
 80a438e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80a4392:	4631      	mov	r1, r6
 80a4394:	f000 fac4 	bl	80a4920 <__adddf3>
 80a4398:	42a5      	cmp	r5, r4
 80a439a:	4603      	mov	r3, r0
 80a439c:	460e      	mov	r6, r1
 80a439e:	d1f5      	bne.n	80a438c <__kernel_rem_pio2+0x64c>
 80a43a0:	9a03      	ldr	r2, [sp, #12]
 80a43a2:	2a00      	cmp	r2, #0
 80a43a4:	f040 80a4 	bne.w	80a44f0 <__kernel_rem_pio2+0x7b0>
 80a43a8:	4618      	mov	r0, r3
 80a43aa:	4631      	mov	r1, r6
 80a43ac:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80a43ae:	9b01      	ldr	r3, [sp, #4]
 80a43b0:	e9c4 0104 	strd	r0, r1, [r4, #16]
 80a43b4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80a43b8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80a43bc:	e9dd 2348 	ldrd	r2, r3, [sp, #288]	; 0x120
 80a43c0:	e9c4 2300 	strd	r2, r3, [r4]
 80a43c4:	9b07      	ldr	r3, [sp, #28]
 80a43c6:	f003 0007 	and.w	r0, r3, #7
 80a43ca:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80a43ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a43d2:	9b01      	ldr	r3, [sp, #4]
 80a43d4:	a90c      	add	r1, sp, #48	; 0x30
 80a43d6:	1e5a      	subs	r2, r3, #1
 80a43d8:	ab0c      	add	r3, sp, #48	; 0x30
 80a43da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a43de:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80a43e2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80a43e6:	e674      	b.n	80a40d2 <__kernel_rem_pio2+0x392>
 80a43e8:	2100      	movs	r1, #0
 80a43ea:	f06f 0317 	mvn.w	r3, #23
 80a43ee:	9107      	str	r1, [sp, #28]
 80a43f0:	e4c4      	b.n	80a3d7c <__kernel_rem_pio2+0x3c>
 80a43f2:	2400      	movs	r4, #0
 80a43f4:	e65b      	b.n	80a40ae <__kernel_rem_pio2+0x36e>
 80a43f6:	9c06      	ldr	r4, [sp, #24]
 80a43f8:	4630      	mov	r0, r6
 80a43fa:	4639      	mov	r1, r7
 80a43fc:	4262      	negs	r2, r4
 80a43fe:	9503      	str	r5, [sp, #12]
 80a4400:	f8cd 801c 	str.w	r8, [sp, #28]
 80a4404:	f000 fa08 	bl	80a4818 <scalbn>
 80a4408:	2200      	movs	r2, #0
 80a440a:	4b5f      	ldr	r3, [pc, #380]	; (80a4588 <__kernel_rem_pio2+0x848>)
 80a440c:	4606      	mov	r6, r0
 80a440e:	460f      	mov	r7, r1
 80a4410:	f000 fec2 	bl	80a5198 <__aeabi_dcmpge>
 80a4414:	2800      	cmp	r0, #0
 80a4416:	d061      	beq.n	80a44dc <__kernel_rem_pio2+0x79c>
 80a4418:	2200      	movs	r2, #0
 80a441a:	4b5c      	ldr	r3, [pc, #368]	; (80a458c <__kernel_rem_pio2+0x84c>)
 80a441c:	3418      	adds	r4, #24
 80a441e:	4630      	mov	r0, r6
 80a4420:	4639      	mov	r1, r7
 80a4422:	9406      	str	r4, [sp, #24]
 80a4424:	f000 fc32 	bl	80a4c8c <__aeabi_dmul>
 80a4428:	f000 fee0 	bl	80a51ec <__aeabi_d2iz>
 80a442c:	4604      	mov	r4, r0
 80a442e:	f000 fbc3 	bl	80a4bb8 <__aeabi_i2d>
 80a4432:	2200      	movs	r2, #0
 80a4434:	4b54      	ldr	r3, [pc, #336]	; (80a4588 <__kernel_rem_pio2+0x848>)
 80a4436:	f000 fc29 	bl	80a4c8c <__aeabi_dmul>
 80a443a:	460b      	mov	r3, r1
 80a443c:	4602      	mov	r2, r0
 80a443e:	4639      	mov	r1, r7
 80a4440:	4630      	mov	r0, r6
 80a4442:	f000 fa6b 	bl	80a491c <__aeabi_dsub>
 80a4446:	f000 fed1 	bl	80a51ec <__aeabi_d2iz>
 80a444a:	9d01      	ldr	r5, [sp, #4]
 80a444c:	ab0c      	add	r3, sp, #48	; 0x30
 80a444e:	f105 0a01 	add.w	sl, r5, #1
 80a4452:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 80a4456:	f843 402a 	str.w	r4, [r3, sl, lsl #2]
 80a445a:	e699      	b.n	80a4190 <__kernel_rem_pio2+0x450>
 80a445c:	2600      	movs	r6, #0
 80a445e:	4634      	mov	r4, r6
 80a4460:	9f01      	ldr	r7, [sp, #4]
 80a4462:	9b06      	ldr	r3, [sp, #24]
 80a4464:	eb07 05c3 	add.w	r5, r7, r3, lsl #3
 80a4468:	4630      	mov	r0, r6
 80a446a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80a446e:	4621      	mov	r1, r4
 80a4470:	f000 fa56 	bl	80a4920 <__adddf3>
 80a4474:	42af      	cmp	r7, r5
 80a4476:	4606      	mov	r6, r0
 80a4478:	460c      	mov	r4, r1
 80a447a:	d1f5      	bne.n	80a4468 <__kernel_rem_pio2+0x728>
 80a447c:	9b03      	ldr	r3, [sp, #12]
 80a447e:	2b00      	cmp	r3, #0
 80a4480:	d150      	bne.n	80a4524 <__kernel_rem_pio2+0x7e4>
 80a4482:	4630      	mov	r0, r6
 80a4484:	4621      	mov	r1, r4
 80a4486:	4623      	mov	r3, r4
 80a4488:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80a448a:	4632      	mov	r2, r6
 80a448c:	e9c4 0100 	strd	r0, r1, [r4]
 80a4490:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80a4494:	f000 fa42 	bl	80a491c <__aeabi_dsub>
 80a4498:	f1ba 0f00 	cmp.w	sl, #0
 80a449c:	4603      	mov	r3, r0
 80a449e:	460e      	mov	r6, r1
 80a44a0:	dd10      	ble.n	80a44c4 <__kernel_rem_pio2+0x784>
 80a44a2:	2401      	movs	r4, #1
 80a44a4:	ad48      	add	r5, sp, #288	; 0x120
 80a44a6:	4618      	mov	r0, r3
 80a44a8:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 80a44ac:	4631      	mov	r1, r6
 80a44ae:	f000 fa37 	bl	80a4920 <__adddf3>
 80a44b2:	3401      	adds	r4, #1
 80a44b4:	45a2      	cmp	sl, r4
 80a44b6:	4603      	mov	r3, r0
 80a44b8:	460e      	mov	r6, r1
 80a44ba:	daf4      	bge.n	80a44a6 <__kernel_rem_pio2+0x766>
 80a44bc:	9a03      	ldr	r2, [sp, #12]
 80a44be:	b10a      	cbz	r2, 80a44c4 <__kernel_rem_pio2+0x784>
 80a44c0:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 80a44c4:	4618      	mov	r0, r3
 80a44c6:	4631      	mov	r1, r6
 80a44c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a44ca:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80a44ce:	9b07      	ldr	r3, [sp, #28]
 80a44d0:	f003 0007 	and.w	r0, r3, #7
 80a44d4:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80a44d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a44dc:	4630      	mov	r0, r6
 80a44de:	4639      	mov	r1, r7
 80a44e0:	f000 fe84 	bl	80a51ec <__aeabi_d2iz>
 80a44e4:	9b01      	ldr	r3, [sp, #4]
 80a44e6:	aa0c      	add	r2, sp, #48	; 0x30
 80a44e8:	469a      	mov	sl, r3
 80a44ea:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 80a44ee:	e64f      	b.n	80a4190 <__kernel_rem_pio2+0x450>
 80a44f0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80a44f2:	9c01      	ldr	r4, [sp, #4]
 80a44f4:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 80a44f8:	616e      	str	r6, [r5, #20]
 80a44fa:	4626      	mov	r6, r4
 80a44fc:	6820      	ldr	r0, [r4, #0]
 80a44fe:	68a2      	ldr	r2, [r4, #8]
 80a4500:	6864      	ldr	r4, [r4, #4]
 80a4502:	612b      	str	r3, [r5, #16]
 80a4504:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80a4508:	68f4      	ldr	r4, [r6, #12]
 80a450a:	e9c5 0100 	strd	r0, r1, [r5]
 80a450e:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 80a4512:	e9c5 2302 	strd	r2, r3, [r5, #8]
 80a4516:	9b07      	ldr	r3, [sp, #28]
 80a4518:	f003 0007 	and.w	r0, r3, #7
 80a451c:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80a4520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a4524:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80a4526:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80a452a:	6006      	str	r6, [r0, #0]
 80a452c:	4632      	mov	r2, r6
 80a452e:	4623      	mov	r3, r4
 80a4530:	6041      	str	r1, [r0, #4]
 80a4532:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80a4536:	f000 f9f1 	bl	80a491c <__aeabi_dsub>
 80a453a:	f1ba 0f00 	cmp.w	sl, #0
 80a453e:	4603      	mov	r3, r0
 80a4540:	460e      	mov	r6, r1
 80a4542:	dcae      	bgt.n	80a44a2 <__kernel_rem_pio2+0x762>
 80a4544:	e7bc      	b.n	80a44c0 <__kernel_rem_pio2+0x780>
 80a4546:	f1a7 0308 	sub.w	r3, r7, #8
 80a454a:	9304      	str	r3, [sp, #16]
 80a454c:	9b08      	ldr	r3, [sp, #32]
 80a454e:	00db      	lsls	r3, r3, #3
 80a4550:	9302      	str	r3, [sp, #8]
 80a4552:	e46f      	b.n	80a3e34 <__kernel_rem_pio2+0xf4>
 80a4554:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80a4556:	2b02      	cmp	r3, #2
 80a4558:	dc06      	bgt.n	80a4568 <__kernel_rem_pio2+0x828>
 80a455a:	2b00      	cmp	r3, #0
 80a455c:	dc0d      	bgt.n	80a457a <__kernel_rem_pio2+0x83a>
 80a455e:	f47f aea5 	bne.w	80a42ac <__kernel_rem_pio2+0x56c>
 80a4562:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80a4564:	461c      	mov	r4, r3
 80a4566:	e698      	b.n	80a429a <__kernel_rem_pio2+0x55a>
 80a4568:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80a456a:	2b03      	cmp	r3, #3
 80a456c:	f47f ae9e 	bne.w	80a42ac <__kernel_rem_pio2+0x56c>
 80a4570:	2300      	movs	r3, #0
 80a4572:	aa48      	add	r2, sp, #288	; 0x120
 80a4574:	461e      	mov	r6, r3
 80a4576:	9201      	str	r2, [sp, #4]
 80a4578:	e712      	b.n	80a43a0 <__kernel_rem_pio2+0x660>
 80a457a:	2600      	movs	r6, #0
 80a457c:	4634      	mov	r4, r6
 80a457e:	e77d      	b.n	80a447c <__kernel_rem_pio2+0x73c>
 80a4580:	2300      	movs	r3, #0
 80a4582:	461e      	mov	r6, r3
 80a4584:	e70c      	b.n	80a43a0 <__kernel_rem_pio2+0x660>
 80a4586:	bf00      	nop
 80a4588:	41700000 	.word	0x41700000
 80a458c:	3e700000 	.word	0x3e700000

080a4590 <__kernel_sin>:
 80a4590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a4594:	b085      	sub	sp, #20
 80a4596:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80a459a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80a459e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80a45a2:	4682      	mov	sl, r0
 80a45a4:	9101      	str	r1, [sp, #4]
 80a45a6:	da04      	bge.n	80a45b2 <__kernel_sin+0x22>
 80a45a8:	f000 fe20 	bl	80a51ec <__aeabi_d2iz>
 80a45ac:	2800      	cmp	r0, #0
 80a45ae:	f000 808e 	beq.w	80a46ce <__kernel_sin+0x13e>
 80a45b2:	9b01      	ldr	r3, [sp, #4]
 80a45b4:	4652      	mov	r2, sl
 80a45b6:	4619      	mov	r1, r3
 80a45b8:	4650      	mov	r0, sl
 80a45ba:	f000 fb67 	bl	80a4c8c <__aeabi_dmul>
 80a45be:	4604      	mov	r4, r0
 80a45c0:	460d      	mov	r5, r1
 80a45c2:	9b01      	ldr	r3, [sp, #4]
 80a45c4:	4622      	mov	r2, r4
 80a45c6:	4619      	mov	r1, r3
 80a45c8:	4650      	mov	r0, sl
 80a45ca:	462b      	mov	r3, r5
 80a45cc:	f000 fb5e 	bl	80a4c8c <__aeabi_dmul>
 80a45d0:	a343      	add	r3, pc, #268	; (adr r3, 80a46e0 <__kernel_sin+0x150>)
 80a45d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a45d6:	4606      	mov	r6, r0
 80a45d8:	460f      	mov	r7, r1
 80a45da:	4620      	mov	r0, r4
 80a45dc:	4629      	mov	r1, r5
 80a45de:	f000 fb55 	bl	80a4c8c <__aeabi_dmul>
 80a45e2:	a341      	add	r3, pc, #260	; (adr r3, 80a46e8 <__kernel_sin+0x158>)
 80a45e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a45e8:	f000 f998 	bl	80a491c <__aeabi_dsub>
 80a45ec:	4622      	mov	r2, r4
 80a45ee:	462b      	mov	r3, r5
 80a45f0:	f000 fb4c 	bl	80a4c8c <__aeabi_dmul>
 80a45f4:	a33e      	add	r3, pc, #248	; (adr r3, 80a46f0 <__kernel_sin+0x160>)
 80a45f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a45fa:	f000 f991 	bl	80a4920 <__adddf3>
 80a45fe:	4622      	mov	r2, r4
 80a4600:	462b      	mov	r3, r5
 80a4602:	f000 fb43 	bl	80a4c8c <__aeabi_dmul>
 80a4606:	a33c      	add	r3, pc, #240	; (adr r3, 80a46f8 <__kernel_sin+0x168>)
 80a4608:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a460c:	f000 f986 	bl	80a491c <__aeabi_dsub>
 80a4610:	4622      	mov	r2, r4
 80a4612:	462b      	mov	r3, r5
 80a4614:	f000 fb3a 	bl	80a4c8c <__aeabi_dmul>
 80a4618:	a339      	add	r3, pc, #228	; (adr r3, 80a4700 <__kernel_sin+0x170>)
 80a461a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a461e:	f000 f97f 	bl	80a4920 <__adddf3>
 80a4622:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80a4624:	4680      	mov	r8, r0
 80a4626:	4689      	mov	r9, r1
 80a4628:	b3bb      	cbz	r3, 80a469a <__kernel_sin+0x10a>
 80a462a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a462e:	2200      	movs	r2, #0
 80a4630:	4b37      	ldr	r3, [pc, #220]	; (80a4710 <__kernel_sin+0x180>)
 80a4632:	f000 fb2b 	bl	80a4c8c <__aeabi_dmul>
 80a4636:	4642      	mov	r2, r8
 80a4638:	464b      	mov	r3, r9
 80a463a:	4680      	mov	r8, r0
 80a463c:	4689      	mov	r9, r1
 80a463e:	4630      	mov	r0, r6
 80a4640:	4639      	mov	r1, r7
 80a4642:	f000 fb23 	bl	80a4c8c <__aeabi_dmul>
 80a4646:	4602      	mov	r2, r0
 80a4648:	460b      	mov	r3, r1
 80a464a:	4640      	mov	r0, r8
 80a464c:	4649      	mov	r1, r9
 80a464e:	f000 f965 	bl	80a491c <__aeabi_dsub>
 80a4652:	4622      	mov	r2, r4
 80a4654:	462b      	mov	r3, r5
 80a4656:	f000 fb19 	bl	80a4c8c <__aeabi_dmul>
 80a465a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a465e:	f000 f95d 	bl	80a491c <__aeabi_dsub>
 80a4662:	a329      	add	r3, pc, #164	; (adr r3, 80a4708 <__kernel_sin+0x178>)
 80a4664:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4668:	4604      	mov	r4, r0
 80a466a:	460d      	mov	r5, r1
 80a466c:	4630      	mov	r0, r6
 80a466e:	4639      	mov	r1, r7
 80a4670:	f000 fb0c 	bl	80a4c8c <__aeabi_dmul>
 80a4674:	4602      	mov	r2, r0
 80a4676:	460b      	mov	r3, r1
 80a4678:	4620      	mov	r0, r4
 80a467a:	4629      	mov	r1, r5
 80a467c:	f000 f950 	bl	80a4920 <__adddf3>
 80a4680:	4602      	mov	r2, r0
 80a4682:	460b      	mov	r3, r1
 80a4684:	4650      	mov	r0, sl
 80a4686:	9901      	ldr	r1, [sp, #4]
 80a4688:	f000 f948 	bl	80a491c <__aeabi_dsub>
 80a468c:	4682      	mov	sl, r0
 80a468e:	468b      	mov	fp, r1
 80a4690:	4650      	mov	r0, sl
 80a4692:	4659      	mov	r1, fp
 80a4694:	b005      	add	sp, #20
 80a4696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a469a:	4602      	mov	r2, r0
 80a469c:	460b      	mov	r3, r1
 80a469e:	4620      	mov	r0, r4
 80a46a0:	4629      	mov	r1, r5
 80a46a2:	f000 faf3 	bl	80a4c8c <__aeabi_dmul>
 80a46a6:	a318      	add	r3, pc, #96	; (adr r3, 80a4708 <__kernel_sin+0x178>)
 80a46a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a46ac:	f000 f936 	bl	80a491c <__aeabi_dsub>
 80a46b0:	4632      	mov	r2, r6
 80a46b2:	463b      	mov	r3, r7
 80a46b4:	f000 faea 	bl	80a4c8c <__aeabi_dmul>
 80a46b8:	4652      	mov	r2, sl
 80a46ba:	9b01      	ldr	r3, [sp, #4]
 80a46bc:	f000 f930 	bl	80a4920 <__adddf3>
 80a46c0:	4682      	mov	sl, r0
 80a46c2:	468b      	mov	fp, r1
 80a46c4:	4650      	mov	r0, sl
 80a46c6:	4659      	mov	r1, fp
 80a46c8:	b005      	add	sp, #20
 80a46ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a46ce:	f8dd b004 	ldr.w	fp, [sp, #4]
 80a46d2:	4650      	mov	r0, sl
 80a46d4:	4659      	mov	r1, fp
 80a46d6:	b005      	add	sp, #20
 80a46d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a46dc:	f3af 8000 	nop.w
 80a46e0:	5acfd57c 	.word	0x5acfd57c
 80a46e4:	3de5d93a 	.word	0x3de5d93a
 80a46e8:	8a2b9ceb 	.word	0x8a2b9ceb
 80a46ec:	3e5ae5e6 	.word	0x3e5ae5e6
 80a46f0:	57b1fe7d 	.word	0x57b1fe7d
 80a46f4:	3ec71de3 	.word	0x3ec71de3
 80a46f8:	19c161d5 	.word	0x19c161d5
 80a46fc:	3f2a01a0 	.word	0x3f2a01a0
 80a4700:	1110f8a6 	.word	0x1110f8a6
 80a4704:	3f811111 	.word	0x3f811111
 80a4708:	55555549 	.word	0x55555549
 80a470c:	3fc55555 	.word	0x3fc55555
 80a4710:	3fe00000 	.word	0x3fe00000

080a4714 <fabs>:
 80a4714:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a4718:	4770      	bx	lr
 80a471a:	bf00      	nop
 80a471c:	0000      	movs	r0, r0
	...

080a4720 <floor>:
 80a4720:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80a4724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a4726:	f2a2 35ff 	subw	r5, r2, #1023	; 0x3ff
 80a472a:	2d13      	cmp	r5, #19
 80a472c:	460b      	mov	r3, r1
 80a472e:	4684      	mov	ip, r0
 80a4730:	460c      	mov	r4, r1
 80a4732:	4606      	mov	r6, r0
 80a4734:	dc30      	bgt.n	80a4798 <floor+0x78>
 80a4736:	2d00      	cmp	r5, #0
 80a4738:	db1e      	blt.n	80a4778 <floor+0x58>
 80a473a:	4f35      	ldr	r7, [pc, #212]	; (80a4810 <floor+0xf0>)
 80a473c:	412f      	asrs	r7, r5
 80a473e:	ea01 0207 	and.w	r2, r1, r7
 80a4742:	4302      	orrs	r2, r0
 80a4744:	d015      	beq.n	80a4772 <floor+0x52>
 80a4746:	a330      	add	r3, pc, #192	; (adr r3, 80a4808 <floor+0xe8>)
 80a4748:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a474c:	f000 f8e8 	bl	80a4920 <__adddf3>
 80a4750:	2200      	movs	r2, #0
 80a4752:	2300      	movs	r3, #0
 80a4754:	f000 fd2a 	bl	80a51ac <__aeabi_dcmpgt>
 80a4758:	b148      	cbz	r0, 80a476e <floor+0x4e>
 80a475a:	2c00      	cmp	r4, #0
 80a475c:	da04      	bge.n	80a4768 <floor+0x48>
 80a475e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80a4762:	fa43 f505 	asr.w	r5, r3, r5
 80a4766:	442c      	add	r4, r5
 80a4768:	2600      	movs	r6, #0
 80a476a:	ea24 0407 	bic.w	r4, r4, r7
 80a476e:	4623      	mov	r3, r4
 80a4770:	46b4      	mov	ip, r6
 80a4772:	4660      	mov	r0, ip
 80a4774:	4619      	mov	r1, r3
 80a4776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a4778:	a323      	add	r3, pc, #140	; (adr r3, 80a4808 <floor+0xe8>)
 80a477a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a477e:	f000 f8cf 	bl	80a4920 <__adddf3>
 80a4782:	2200      	movs	r2, #0
 80a4784:	2300      	movs	r3, #0
 80a4786:	f000 fd11 	bl	80a51ac <__aeabi_dcmpgt>
 80a478a:	2800      	cmp	r0, #0
 80a478c:	d0ef      	beq.n	80a476e <floor+0x4e>
 80a478e:	2c00      	cmp	r4, #0
 80a4790:	db24      	blt.n	80a47dc <floor+0xbc>
 80a4792:	2600      	movs	r6, #0
 80a4794:	4634      	mov	r4, r6
 80a4796:	e7ea      	b.n	80a476e <floor+0x4e>
 80a4798:	2d33      	cmp	r5, #51	; 0x33
 80a479a:	dd08      	ble.n	80a47ae <floor+0x8e>
 80a479c:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80a47a0:	d1e7      	bne.n	80a4772 <floor+0x52>
 80a47a2:	4602      	mov	r2, r0
 80a47a4:	f000 f8bc 	bl	80a4920 <__adddf3>
 80a47a8:	4684      	mov	ip, r0
 80a47aa:	460b      	mov	r3, r1
 80a47ac:	e7e1      	b.n	80a4772 <floor+0x52>
 80a47ae:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80a47b2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80a47b6:	40d7      	lsrs	r7, r2
 80a47b8:	4207      	tst	r7, r0
 80a47ba:	d0da      	beq.n	80a4772 <floor+0x52>
 80a47bc:	a312      	add	r3, pc, #72	; (adr r3, 80a4808 <floor+0xe8>)
 80a47be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a47c2:	f000 f8ad 	bl	80a4920 <__adddf3>
 80a47c6:	2200      	movs	r2, #0
 80a47c8:	2300      	movs	r3, #0
 80a47ca:	f000 fcef 	bl	80a51ac <__aeabi_dcmpgt>
 80a47ce:	2800      	cmp	r0, #0
 80a47d0:	d0cd      	beq.n	80a476e <floor+0x4e>
 80a47d2:	2c00      	cmp	r4, #0
 80a47d4:	db0b      	blt.n	80a47ee <floor+0xce>
 80a47d6:	ea26 0607 	bic.w	r6, r6, r7
 80a47da:	e7c8      	b.n	80a476e <floor+0x4e>
 80a47dc:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80a47e0:	4a0c      	ldr	r2, [pc, #48]	; (80a4814 <floor+0xf4>)
 80a47e2:	431e      	orrs	r6, r3
 80a47e4:	2e00      	cmp	r6, #0
 80a47e6:	bf18      	it	ne
 80a47e8:	4614      	movne	r4, r2
 80a47ea:	2600      	movs	r6, #0
 80a47ec:	e7bf      	b.n	80a476e <floor+0x4e>
 80a47ee:	2d14      	cmp	r5, #20
 80a47f0:	d008      	beq.n	80a4804 <floor+0xe4>
 80a47f2:	2301      	movs	r3, #1
 80a47f4:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
 80a47f8:	fa03 f505 	lsl.w	r5, r3, r5
 80a47fc:	19ae      	adds	r6, r5, r6
 80a47fe:	bf28      	it	cs
 80a4800:	18e4      	addcs	r4, r4, r3
 80a4802:	e7e8      	b.n	80a47d6 <floor+0xb6>
 80a4804:	3401      	adds	r4, #1
 80a4806:	e7e6      	b.n	80a47d6 <floor+0xb6>
 80a4808:	8800759c 	.word	0x8800759c
 80a480c:	7e37e43c 	.word	0x7e37e43c
 80a4810:	000fffff 	.word	0x000fffff
 80a4814:	bff00000 	.word	0xbff00000

080a4818 <scalbn>:
 80a4818:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80a481c:	b570      	push	{r4, r5, r6, lr}
 80a481e:	468c      	mov	ip, r1
 80a4820:	4604      	mov	r4, r0
 80a4822:	460d      	mov	r5, r1
 80a4824:	4616      	mov	r6, r2
 80a4826:	bb7b      	cbnz	r3, 80a4888 <scalbn+0x70>
 80a4828:	4603      	mov	r3, r0
 80a482a:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80a482e:	ea5c 0303 	orrs.w	r3, ip, r3
 80a4832:	d028      	beq.n	80a4886 <scalbn+0x6e>
 80a4834:	4b32      	ldr	r3, [pc, #200]	; (80a4900 <scalbn+0xe8>)
 80a4836:	2200      	movs	r2, #0
 80a4838:	f000 fa28 	bl	80a4c8c <__aeabi_dmul>
 80a483c:	4b31      	ldr	r3, [pc, #196]	; (80a4904 <scalbn+0xec>)
 80a483e:	4604      	mov	r4, r0
 80a4840:	429e      	cmp	r6, r3
 80a4842:	460d      	mov	r5, r1
 80a4844:	db1a      	blt.n	80a487c <scalbn+0x64>
 80a4846:	468c      	mov	ip, r1
 80a4848:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80a484c:	3b36      	subs	r3, #54	; 0x36
 80a484e:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80a4852:	4433      	add	r3, r6
 80a4854:	4293      	cmp	r3, r2
 80a4856:	dc20      	bgt.n	80a489a <scalbn+0x82>
 80a4858:	2b00      	cmp	r3, #0
 80a485a:	dc3e      	bgt.n	80a48da <scalbn+0xc2>
 80a485c:	f113 0f35 	cmn.w	r3, #53	; 0x35
 80a4860:	da2c      	bge.n	80a48bc <scalbn+0xa4>
 80a4862:	f24c 3350 	movw	r3, #50000	; 0xc350
 80a4866:	429e      	cmp	r6, r3
 80a4868:	dc17      	bgt.n	80a489a <scalbn+0x82>
 80a486a:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80a486e:	f043 71d2 	orr.w	r1, r3, #27525120	; 0x1a40000
 80a4872:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 80a4876:	4824      	ldr	r0, [pc, #144]	; (80a4908 <scalbn+0xf0>)
 80a4878:	f041 011f 	orr.w	r1, r1, #31
 80a487c:	a31c      	add	r3, pc, #112	; (adr r3, 80a48f0 <scalbn+0xd8>)
 80a487e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4882:	f000 fa03 	bl	80a4c8c <__aeabi_dmul>
 80a4886:	bd70      	pop	{r4, r5, r6, pc}
 80a4888:	f240 7eff 	movw	lr, #2047	; 0x7ff
 80a488c:	4573      	cmp	r3, lr
 80a488e:	d1de      	bne.n	80a484e <scalbn+0x36>
 80a4890:	4602      	mov	r2, r0
 80a4892:	460b      	mov	r3, r1
 80a4894:	f000 f844 	bl	80a4920 <__adddf3>
 80a4898:	bd70      	pop	{r4, r5, r6, pc}
 80a489a:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80a489e:	f043 41fc 	orr.w	r1, r3, #2113929216	; 0x7e000000
 80a48a2:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 80a48a6:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 80a48aa:	a313      	add	r3, pc, #76	; (adr r3, 80a48f8 <scalbn+0xe0>)
 80a48ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a48b0:	4816      	ldr	r0, [pc, #88]	; (80a490c <scalbn+0xf4>)
 80a48b2:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 80a48b6:	f000 f9e9 	bl	80a4c8c <__aeabi_dmul>
 80a48ba:	bd70      	pop	{r4, r5, r6, pc}
 80a48bc:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
 80a48c0:	f103 0136 	add.w	r1, r3, #54	; 0x36
 80a48c4:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
 80a48c8:	ea4c 5501 	orr.w	r5, ip, r1, lsl #20
 80a48cc:	2200      	movs	r2, #0
 80a48ce:	4620      	mov	r0, r4
 80a48d0:	4629      	mov	r1, r5
 80a48d2:	4b0f      	ldr	r3, [pc, #60]	; (80a4910 <scalbn+0xf8>)
 80a48d4:	f000 f9da 	bl	80a4c8c <__aeabi_dmul>
 80a48d8:	bd70      	pop	{r4, r5, r6, pc}
 80a48da:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
 80a48de:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
 80a48e2:	4620      	mov	r0, r4
 80a48e4:	ea4c 5103 	orr.w	r1, ip, r3, lsl #20
 80a48e8:	bd70      	pop	{r4, r5, r6, pc}
 80a48ea:	bf00      	nop
 80a48ec:	f3af 8000 	nop.w
 80a48f0:	c2f8f359 	.word	0xc2f8f359
 80a48f4:	01a56e1f 	.word	0x01a56e1f
 80a48f8:	8800759c 	.word	0x8800759c
 80a48fc:	7e37e43c 	.word	0x7e37e43c
 80a4900:	43500000 	.word	0x43500000
 80a4904:	ffff3cb0 	.word	0xffff3cb0
 80a4908:	c2f8f359 	.word	0xc2f8f359
 80a490c:	8800759c 	.word	0x8800759c
 80a4910:	3c900000 	.word	0x3c900000

080a4914 <__aeabi_drsub>:
 80a4914:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a4918:	e002      	b.n	80a4920 <__adddf3>
 80a491a:	bf00      	nop

080a491c <__aeabi_dsub>:
 80a491c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a4920 <__adddf3>:
 80a4920:	b530      	push	{r4, r5, lr}
 80a4922:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a4926:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a492a:	ea94 0f05 	teq	r4, r5
 80a492e:	bf08      	it	eq
 80a4930:	ea90 0f02 	teqeq	r0, r2
 80a4934:	bf1f      	itttt	ne
 80a4936:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a493a:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a493e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a4942:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a4946:	f000 80e2 	beq.w	80a4b0e <__adddf3+0x1ee>
 80a494a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a494e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a4952:	bfb8      	it	lt
 80a4954:	426d      	neglt	r5, r5
 80a4956:	dd0c      	ble.n	80a4972 <__adddf3+0x52>
 80a4958:	442c      	add	r4, r5
 80a495a:	ea80 0202 	eor.w	r2, r0, r2
 80a495e:	ea81 0303 	eor.w	r3, r1, r3
 80a4962:	ea82 0000 	eor.w	r0, r2, r0
 80a4966:	ea83 0101 	eor.w	r1, r3, r1
 80a496a:	ea80 0202 	eor.w	r2, r0, r2
 80a496e:	ea81 0303 	eor.w	r3, r1, r3
 80a4972:	2d36      	cmp	r5, #54	; 0x36
 80a4974:	bf88      	it	hi
 80a4976:	bd30      	pophi	{r4, r5, pc}
 80a4978:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a497c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a4980:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a4984:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a4988:	d002      	beq.n	80a4990 <__adddf3+0x70>
 80a498a:	4240      	negs	r0, r0
 80a498c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a4990:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a4994:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a4998:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a499c:	d002      	beq.n	80a49a4 <__adddf3+0x84>
 80a499e:	4252      	negs	r2, r2
 80a49a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a49a4:	ea94 0f05 	teq	r4, r5
 80a49a8:	f000 80a7 	beq.w	80a4afa <__adddf3+0x1da>
 80a49ac:	f1a4 0401 	sub.w	r4, r4, #1
 80a49b0:	f1d5 0e20 	rsbs	lr, r5, #32
 80a49b4:	db0d      	blt.n	80a49d2 <__adddf3+0xb2>
 80a49b6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a49ba:	fa22 f205 	lsr.w	r2, r2, r5
 80a49be:	1880      	adds	r0, r0, r2
 80a49c0:	f141 0100 	adc.w	r1, r1, #0
 80a49c4:	fa03 f20e 	lsl.w	r2, r3, lr
 80a49c8:	1880      	adds	r0, r0, r2
 80a49ca:	fa43 f305 	asr.w	r3, r3, r5
 80a49ce:	4159      	adcs	r1, r3
 80a49d0:	e00e      	b.n	80a49f0 <__adddf3+0xd0>
 80a49d2:	f1a5 0520 	sub.w	r5, r5, #32
 80a49d6:	f10e 0e20 	add.w	lr, lr, #32
 80a49da:	2a01      	cmp	r2, #1
 80a49dc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a49e0:	bf28      	it	cs
 80a49e2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a49e6:	fa43 f305 	asr.w	r3, r3, r5
 80a49ea:	18c0      	adds	r0, r0, r3
 80a49ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a49f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a49f4:	d507      	bpl.n	80a4a06 <__adddf3+0xe6>
 80a49f6:	f04f 0e00 	mov.w	lr, #0
 80a49fa:	f1dc 0c00 	rsbs	ip, ip, #0
 80a49fe:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a4a02:	eb6e 0101 	sbc.w	r1, lr, r1
 80a4a06:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a4a0a:	d31b      	bcc.n	80a4a44 <__adddf3+0x124>
 80a4a0c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a4a10:	d30c      	bcc.n	80a4a2c <__adddf3+0x10c>
 80a4a12:	0849      	lsrs	r1, r1, #1
 80a4a14:	ea5f 0030 	movs.w	r0, r0, rrx
 80a4a18:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a4a1c:	f104 0401 	add.w	r4, r4, #1
 80a4a20:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a4a24:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a4a28:	f080 809a 	bcs.w	80a4b60 <__adddf3+0x240>
 80a4a2c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a4a30:	bf08      	it	eq
 80a4a32:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a4a36:	f150 0000 	adcs.w	r0, r0, #0
 80a4a3a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a4a3e:	ea41 0105 	orr.w	r1, r1, r5
 80a4a42:	bd30      	pop	{r4, r5, pc}
 80a4a44:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a4a48:	4140      	adcs	r0, r0
 80a4a4a:	eb41 0101 	adc.w	r1, r1, r1
 80a4a4e:	3c01      	subs	r4, #1
 80a4a50:	bf28      	it	cs
 80a4a52:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80a4a56:	d2e9      	bcs.n	80a4a2c <__adddf3+0x10c>
 80a4a58:	f091 0f00 	teq	r1, #0
 80a4a5c:	bf04      	itt	eq
 80a4a5e:	4601      	moveq	r1, r0
 80a4a60:	2000      	moveq	r0, #0
 80a4a62:	fab1 f381 	clz	r3, r1
 80a4a66:	bf08      	it	eq
 80a4a68:	3320      	addeq	r3, #32
 80a4a6a:	f1a3 030b 	sub.w	r3, r3, #11
 80a4a6e:	f1b3 0220 	subs.w	r2, r3, #32
 80a4a72:	da0c      	bge.n	80a4a8e <__adddf3+0x16e>
 80a4a74:	320c      	adds	r2, #12
 80a4a76:	dd08      	ble.n	80a4a8a <__adddf3+0x16a>
 80a4a78:	f102 0c14 	add.w	ip, r2, #20
 80a4a7c:	f1c2 020c 	rsb	r2, r2, #12
 80a4a80:	fa01 f00c 	lsl.w	r0, r1, ip
 80a4a84:	fa21 f102 	lsr.w	r1, r1, r2
 80a4a88:	e00c      	b.n	80a4aa4 <__adddf3+0x184>
 80a4a8a:	f102 0214 	add.w	r2, r2, #20
 80a4a8e:	bfd8      	it	le
 80a4a90:	f1c2 0c20 	rsble	ip, r2, #32
 80a4a94:	fa01 f102 	lsl.w	r1, r1, r2
 80a4a98:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a4a9c:	bfdc      	itt	le
 80a4a9e:	ea41 010c 	orrle.w	r1, r1, ip
 80a4aa2:	4090      	lslle	r0, r2
 80a4aa4:	1ae4      	subs	r4, r4, r3
 80a4aa6:	bfa2      	ittt	ge
 80a4aa8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a4aac:	4329      	orrge	r1, r5
 80a4aae:	bd30      	popge	{r4, r5, pc}
 80a4ab0:	ea6f 0404 	mvn.w	r4, r4
 80a4ab4:	3c1f      	subs	r4, #31
 80a4ab6:	da1c      	bge.n	80a4af2 <__adddf3+0x1d2>
 80a4ab8:	340c      	adds	r4, #12
 80a4aba:	dc0e      	bgt.n	80a4ada <__adddf3+0x1ba>
 80a4abc:	f104 0414 	add.w	r4, r4, #20
 80a4ac0:	f1c4 0220 	rsb	r2, r4, #32
 80a4ac4:	fa20 f004 	lsr.w	r0, r0, r4
 80a4ac8:	fa01 f302 	lsl.w	r3, r1, r2
 80a4acc:	ea40 0003 	orr.w	r0, r0, r3
 80a4ad0:	fa21 f304 	lsr.w	r3, r1, r4
 80a4ad4:	ea45 0103 	orr.w	r1, r5, r3
 80a4ad8:	bd30      	pop	{r4, r5, pc}
 80a4ada:	f1c4 040c 	rsb	r4, r4, #12
 80a4ade:	f1c4 0220 	rsb	r2, r4, #32
 80a4ae2:	fa20 f002 	lsr.w	r0, r0, r2
 80a4ae6:	fa01 f304 	lsl.w	r3, r1, r4
 80a4aea:	ea40 0003 	orr.w	r0, r0, r3
 80a4aee:	4629      	mov	r1, r5
 80a4af0:	bd30      	pop	{r4, r5, pc}
 80a4af2:	fa21 f004 	lsr.w	r0, r1, r4
 80a4af6:	4629      	mov	r1, r5
 80a4af8:	bd30      	pop	{r4, r5, pc}
 80a4afa:	f094 0f00 	teq	r4, #0
 80a4afe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a4b02:	bf06      	itte	eq
 80a4b04:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a4b08:	3401      	addeq	r4, #1
 80a4b0a:	3d01      	subne	r5, #1
 80a4b0c:	e74e      	b.n	80a49ac <__adddf3+0x8c>
 80a4b0e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a4b12:	bf18      	it	ne
 80a4b14:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a4b18:	d029      	beq.n	80a4b6e <__adddf3+0x24e>
 80a4b1a:	ea94 0f05 	teq	r4, r5
 80a4b1e:	bf08      	it	eq
 80a4b20:	ea90 0f02 	teqeq	r0, r2
 80a4b24:	d005      	beq.n	80a4b32 <__adddf3+0x212>
 80a4b26:	ea54 0c00 	orrs.w	ip, r4, r0
 80a4b2a:	bf04      	itt	eq
 80a4b2c:	4619      	moveq	r1, r3
 80a4b2e:	4610      	moveq	r0, r2
 80a4b30:	bd30      	pop	{r4, r5, pc}
 80a4b32:	ea91 0f03 	teq	r1, r3
 80a4b36:	bf1e      	ittt	ne
 80a4b38:	2100      	movne	r1, #0
 80a4b3a:	2000      	movne	r0, #0
 80a4b3c:	bd30      	popne	{r4, r5, pc}
 80a4b3e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a4b42:	d105      	bne.n	80a4b50 <__adddf3+0x230>
 80a4b44:	0040      	lsls	r0, r0, #1
 80a4b46:	4149      	adcs	r1, r1
 80a4b48:	bf28      	it	cs
 80a4b4a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a4b4e:	bd30      	pop	{r4, r5, pc}
 80a4b50:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a4b54:	bf3c      	itt	cc
 80a4b56:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a4b5a:	bd30      	popcc	{r4, r5, pc}
 80a4b5c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a4b60:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a4b64:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a4b68:	f04f 0000 	mov.w	r0, #0
 80a4b6c:	bd30      	pop	{r4, r5, pc}
 80a4b6e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a4b72:	bf1a      	itte	ne
 80a4b74:	4619      	movne	r1, r3
 80a4b76:	4610      	movne	r0, r2
 80a4b78:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a4b7c:	bf1c      	itt	ne
 80a4b7e:	460b      	movne	r3, r1
 80a4b80:	4602      	movne	r2, r0
 80a4b82:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a4b86:	bf06      	itte	eq
 80a4b88:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a4b8c:	ea91 0f03 	teqeq	r1, r3
 80a4b90:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a4b94:	bd30      	pop	{r4, r5, pc}
 80a4b96:	bf00      	nop

080a4b98 <__aeabi_ui2d>:
 80a4b98:	f090 0f00 	teq	r0, #0
 80a4b9c:	bf04      	itt	eq
 80a4b9e:	2100      	moveq	r1, #0
 80a4ba0:	4770      	bxeq	lr
 80a4ba2:	b530      	push	{r4, r5, lr}
 80a4ba4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a4ba8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a4bac:	f04f 0500 	mov.w	r5, #0
 80a4bb0:	f04f 0100 	mov.w	r1, #0
 80a4bb4:	e750      	b.n	80a4a58 <__adddf3+0x138>
 80a4bb6:	bf00      	nop

080a4bb8 <__aeabi_i2d>:
 80a4bb8:	f090 0f00 	teq	r0, #0
 80a4bbc:	bf04      	itt	eq
 80a4bbe:	2100      	moveq	r1, #0
 80a4bc0:	4770      	bxeq	lr
 80a4bc2:	b530      	push	{r4, r5, lr}
 80a4bc4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a4bc8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a4bcc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a4bd0:	bf48      	it	mi
 80a4bd2:	4240      	negmi	r0, r0
 80a4bd4:	f04f 0100 	mov.w	r1, #0
 80a4bd8:	e73e      	b.n	80a4a58 <__adddf3+0x138>
 80a4bda:	bf00      	nop

080a4bdc <__aeabi_f2d>:
 80a4bdc:	0042      	lsls	r2, r0, #1
 80a4bde:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a4be2:	ea4f 0131 	mov.w	r1, r1, rrx
 80a4be6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a4bea:	bf1f      	itttt	ne
 80a4bec:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a4bf0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a4bf4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a4bf8:	4770      	bxne	lr
 80a4bfa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80a4bfe:	bf08      	it	eq
 80a4c00:	4770      	bxeq	lr
 80a4c02:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80a4c06:	bf04      	itt	eq
 80a4c08:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80a4c0c:	4770      	bxeq	lr
 80a4c0e:	b530      	push	{r4, r5, lr}
 80a4c10:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a4c14:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a4c18:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a4c1c:	e71c      	b.n	80a4a58 <__adddf3+0x138>
 80a4c1e:	bf00      	nop

080a4c20 <__aeabi_ul2d>:
 80a4c20:	ea50 0201 	orrs.w	r2, r0, r1
 80a4c24:	bf08      	it	eq
 80a4c26:	4770      	bxeq	lr
 80a4c28:	b530      	push	{r4, r5, lr}
 80a4c2a:	f04f 0500 	mov.w	r5, #0
 80a4c2e:	e00a      	b.n	80a4c46 <__aeabi_l2d+0x16>

080a4c30 <__aeabi_l2d>:
 80a4c30:	ea50 0201 	orrs.w	r2, r0, r1
 80a4c34:	bf08      	it	eq
 80a4c36:	4770      	bxeq	lr
 80a4c38:	b530      	push	{r4, r5, lr}
 80a4c3a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a4c3e:	d502      	bpl.n	80a4c46 <__aeabi_l2d+0x16>
 80a4c40:	4240      	negs	r0, r0
 80a4c42:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a4c46:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a4c4a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a4c4e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a4c52:	f43f aed8 	beq.w	80a4a06 <__adddf3+0xe6>
 80a4c56:	f04f 0203 	mov.w	r2, #3
 80a4c5a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a4c5e:	bf18      	it	ne
 80a4c60:	3203      	addne	r2, #3
 80a4c62:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a4c66:	bf18      	it	ne
 80a4c68:	3203      	addne	r2, #3
 80a4c6a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a4c6e:	f1c2 0320 	rsb	r3, r2, #32
 80a4c72:	fa00 fc03 	lsl.w	ip, r0, r3
 80a4c76:	fa20 f002 	lsr.w	r0, r0, r2
 80a4c7a:	fa01 fe03 	lsl.w	lr, r1, r3
 80a4c7e:	ea40 000e 	orr.w	r0, r0, lr
 80a4c82:	fa21 f102 	lsr.w	r1, r1, r2
 80a4c86:	4414      	add	r4, r2
 80a4c88:	e6bd      	b.n	80a4a06 <__adddf3+0xe6>
 80a4c8a:	bf00      	nop

080a4c8c <__aeabi_dmul>:
 80a4c8c:	b570      	push	{r4, r5, r6, lr}
 80a4c8e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a4c92:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a4c96:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a4c9a:	bf1d      	ittte	ne
 80a4c9c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a4ca0:	ea94 0f0c 	teqne	r4, ip
 80a4ca4:	ea95 0f0c 	teqne	r5, ip
 80a4ca8:	f000 f8de 	bleq	80a4e68 <__aeabi_dmul+0x1dc>
 80a4cac:	442c      	add	r4, r5
 80a4cae:	ea81 0603 	eor.w	r6, r1, r3
 80a4cb2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a4cb6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a4cba:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a4cbe:	bf18      	it	ne
 80a4cc0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a4cc4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a4cc8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a4ccc:	d038      	beq.n	80a4d40 <__aeabi_dmul+0xb4>
 80a4cce:	fba0 ce02 	umull	ip, lr, r0, r2
 80a4cd2:	f04f 0500 	mov.w	r5, #0
 80a4cd6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a4cda:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a4cde:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a4ce2:	f04f 0600 	mov.w	r6, #0
 80a4ce6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a4cea:	f09c 0f00 	teq	ip, #0
 80a4cee:	bf18      	it	ne
 80a4cf0:	f04e 0e01 	orrne.w	lr, lr, #1
 80a4cf4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a4cf8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a4cfc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a4d00:	d204      	bcs.n	80a4d0c <__aeabi_dmul+0x80>
 80a4d02:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a4d06:	416d      	adcs	r5, r5
 80a4d08:	eb46 0606 	adc.w	r6, r6, r6
 80a4d0c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a4d10:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a4d14:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a4d18:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a4d1c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a4d20:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a4d24:	bf88      	it	hi
 80a4d26:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a4d2a:	d81e      	bhi.n	80a4d6a <__aeabi_dmul+0xde>
 80a4d2c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a4d30:	bf08      	it	eq
 80a4d32:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a4d36:	f150 0000 	adcs.w	r0, r0, #0
 80a4d3a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a4d3e:	bd70      	pop	{r4, r5, r6, pc}
 80a4d40:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a4d44:	ea46 0101 	orr.w	r1, r6, r1
 80a4d48:	ea40 0002 	orr.w	r0, r0, r2
 80a4d4c:	ea81 0103 	eor.w	r1, r1, r3
 80a4d50:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a4d54:	bfc2      	ittt	gt
 80a4d56:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a4d5a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a4d5e:	bd70      	popgt	{r4, r5, r6, pc}
 80a4d60:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a4d64:	f04f 0e00 	mov.w	lr, #0
 80a4d68:	3c01      	subs	r4, #1
 80a4d6a:	f300 80ab 	bgt.w	80a4ec4 <__aeabi_dmul+0x238>
 80a4d6e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a4d72:	bfde      	ittt	le
 80a4d74:	2000      	movle	r0, #0
 80a4d76:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a4d7a:	bd70      	pople	{r4, r5, r6, pc}
 80a4d7c:	f1c4 0400 	rsb	r4, r4, #0
 80a4d80:	3c20      	subs	r4, #32
 80a4d82:	da35      	bge.n	80a4df0 <__aeabi_dmul+0x164>
 80a4d84:	340c      	adds	r4, #12
 80a4d86:	dc1b      	bgt.n	80a4dc0 <__aeabi_dmul+0x134>
 80a4d88:	f104 0414 	add.w	r4, r4, #20
 80a4d8c:	f1c4 0520 	rsb	r5, r4, #32
 80a4d90:	fa00 f305 	lsl.w	r3, r0, r5
 80a4d94:	fa20 f004 	lsr.w	r0, r0, r4
 80a4d98:	fa01 f205 	lsl.w	r2, r1, r5
 80a4d9c:	ea40 0002 	orr.w	r0, r0, r2
 80a4da0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a4da4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a4da8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a4dac:	fa21 f604 	lsr.w	r6, r1, r4
 80a4db0:	eb42 0106 	adc.w	r1, r2, r6
 80a4db4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a4db8:	bf08      	it	eq
 80a4dba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a4dbe:	bd70      	pop	{r4, r5, r6, pc}
 80a4dc0:	f1c4 040c 	rsb	r4, r4, #12
 80a4dc4:	f1c4 0520 	rsb	r5, r4, #32
 80a4dc8:	fa00 f304 	lsl.w	r3, r0, r4
 80a4dcc:	fa20 f005 	lsr.w	r0, r0, r5
 80a4dd0:	fa01 f204 	lsl.w	r2, r1, r4
 80a4dd4:	ea40 0002 	orr.w	r0, r0, r2
 80a4dd8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a4ddc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a4de0:	f141 0100 	adc.w	r1, r1, #0
 80a4de4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a4de8:	bf08      	it	eq
 80a4dea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a4dee:	bd70      	pop	{r4, r5, r6, pc}
 80a4df0:	f1c4 0520 	rsb	r5, r4, #32
 80a4df4:	fa00 f205 	lsl.w	r2, r0, r5
 80a4df8:	ea4e 0e02 	orr.w	lr, lr, r2
 80a4dfc:	fa20 f304 	lsr.w	r3, r0, r4
 80a4e00:	fa01 f205 	lsl.w	r2, r1, r5
 80a4e04:	ea43 0302 	orr.w	r3, r3, r2
 80a4e08:	fa21 f004 	lsr.w	r0, r1, r4
 80a4e0c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a4e10:	fa21 f204 	lsr.w	r2, r1, r4
 80a4e14:	ea20 0002 	bic.w	r0, r0, r2
 80a4e18:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a4e1c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a4e20:	bf08      	it	eq
 80a4e22:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a4e26:	bd70      	pop	{r4, r5, r6, pc}
 80a4e28:	f094 0f00 	teq	r4, #0
 80a4e2c:	d10f      	bne.n	80a4e4e <__aeabi_dmul+0x1c2>
 80a4e2e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a4e32:	0040      	lsls	r0, r0, #1
 80a4e34:	eb41 0101 	adc.w	r1, r1, r1
 80a4e38:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a4e3c:	bf08      	it	eq
 80a4e3e:	3c01      	subeq	r4, #1
 80a4e40:	d0f7      	beq.n	80a4e32 <__aeabi_dmul+0x1a6>
 80a4e42:	ea41 0106 	orr.w	r1, r1, r6
 80a4e46:	f095 0f00 	teq	r5, #0
 80a4e4a:	bf18      	it	ne
 80a4e4c:	4770      	bxne	lr
 80a4e4e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a4e52:	0052      	lsls	r2, r2, #1
 80a4e54:	eb43 0303 	adc.w	r3, r3, r3
 80a4e58:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a4e5c:	bf08      	it	eq
 80a4e5e:	3d01      	subeq	r5, #1
 80a4e60:	d0f7      	beq.n	80a4e52 <__aeabi_dmul+0x1c6>
 80a4e62:	ea43 0306 	orr.w	r3, r3, r6
 80a4e66:	4770      	bx	lr
 80a4e68:	ea94 0f0c 	teq	r4, ip
 80a4e6c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a4e70:	bf18      	it	ne
 80a4e72:	ea95 0f0c 	teqne	r5, ip
 80a4e76:	d00c      	beq.n	80a4e92 <__aeabi_dmul+0x206>
 80a4e78:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a4e7c:	bf18      	it	ne
 80a4e7e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a4e82:	d1d1      	bne.n	80a4e28 <__aeabi_dmul+0x19c>
 80a4e84:	ea81 0103 	eor.w	r1, r1, r3
 80a4e88:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a4e8c:	f04f 0000 	mov.w	r0, #0
 80a4e90:	bd70      	pop	{r4, r5, r6, pc}
 80a4e92:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a4e96:	bf06      	itte	eq
 80a4e98:	4610      	moveq	r0, r2
 80a4e9a:	4619      	moveq	r1, r3
 80a4e9c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a4ea0:	d019      	beq.n	80a4ed6 <__aeabi_dmul+0x24a>
 80a4ea2:	ea94 0f0c 	teq	r4, ip
 80a4ea6:	d102      	bne.n	80a4eae <__aeabi_dmul+0x222>
 80a4ea8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a4eac:	d113      	bne.n	80a4ed6 <__aeabi_dmul+0x24a>
 80a4eae:	ea95 0f0c 	teq	r5, ip
 80a4eb2:	d105      	bne.n	80a4ec0 <__aeabi_dmul+0x234>
 80a4eb4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a4eb8:	bf1c      	itt	ne
 80a4eba:	4610      	movne	r0, r2
 80a4ebc:	4619      	movne	r1, r3
 80a4ebe:	d10a      	bne.n	80a4ed6 <__aeabi_dmul+0x24a>
 80a4ec0:	ea81 0103 	eor.w	r1, r1, r3
 80a4ec4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a4ec8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a4ecc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a4ed0:	f04f 0000 	mov.w	r0, #0
 80a4ed4:	bd70      	pop	{r4, r5, r6, pc}
 80a4ed6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a4eda:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a4ede:	bd70      	pop	{r4, r5, r6, pc}

080a4ee0 <__aeabi_ddiv>:
 80a4ee0:	b570      	push	{r4, r5, r6, lr}
 80a4ee2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a4ee6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a4eea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a4eee:	bf1d      	ittte	ne
 80a4ef0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a4ef4:	ea94 0f0c 	teqne	r4, ip
 80a4ef8:	ea95 0f0c 	teqne	r5, ip
 80a4efc:	f000 f8a7 	bleq	80a504e <__aeabi_ddiv+0x16e>
 80a4f00:	eba4 0405 	sub.w	r4, r4, r5
 80a4f04:	ea81 0e03 	eor.w	lr, r1, r3
 80a4f08:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a4f0c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a4f10:	f000 8088 	beq.w	80a5024 <__aeabi_ddiv+0x144>
 80a4f14:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a4f18:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a4f1c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a4f20:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a4f24:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a4f28:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a4f2c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a4f30:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a4f34:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a4f38:	429d      	cmp	r5, r3
 80a4f3a:	bf08      	it	eq
 80a4f3c:	4296      	cmpeq	r6, r2
 80a4f3e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a4f42:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a4f46:	d202      	bcs.n	80a4f4e <__aeabi_ddiv+0x6e>
 80a4f48:	085b      	lsrs	r3, r3, #1
 80a4f4a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4f4e:	1ab6      	subs	r6, r6, r2
 80a4f50:	eb65 0503 	sbc.w	r5, r5, r3
 80a4f54:	085b      	lsrs	r3, r3, #1
 80a4f56:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4f5a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a4f5e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a4f62:	ebb6 0e02 	subs.w	lr, r6, r2
 80a4f66:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a4f6a:	bf22      	ittt	cs
 80a4f6c:	1ab6      	subcs	r6, r6, r2
 80a4f6e:	4675      	movcs	r5, lr
 80a4f70:	ea40 000c 	orrcs.w	r0, r0, ip
 80a4f74:	085b      	lsrs	r3, r3, #1
 80a4f76:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4f7a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a4f7e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a4f82:	bf22      	ittt	cs
 80a4f84:	1ab6      	subcs	r6, r6, r2
 80a4f86:	4675      	movcs	r5, lr
 80a4f88:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a4f8c:	085b      	lsrs	r3, r3, #1
 80a4f8e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4f92:	ebb6 0e02 	subs.w	lr, r6, r2
 80a4f96:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a4f9a:	bf22      	ittt	cs
 80a4f9c:	1ab6      	subcs	r6, r6, r2
 80a4f9e:	4675      	movcs	r5, lr
 80a4fa0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a4fa4:	085b      	lsrs	r3, r3, #1
 80a4fa6:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4faa:	ebb6 0e02 	subs.w	lr, r6, r2
 80a4fae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a4fb2:	bf22      	ittt	cs
 80a4fb4:	1ab6      	subcs	r6, r6, r2
 80a4fb6:	4675      	movcs	r5, lr
 80a4fb8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a4fbc:	ea55 0e06 	orrs.w	lr, r5, r6
 80a4fc0:	d018      	beq.n	80a4ff4 <__aeabi_ddiv+0x114>
 80a4fc2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a4fc6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a4fca:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a4fce:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a4fd2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a4fd6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a4fda:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a4fde:	d1c0      	bne.n	80a4f62 <__aeabi_ddiv+0x82>
 80a4fe0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a4fe4:	d10b      	bne.n	80a4ffe <__aeabi_ddiv+0x11e>
 80a4fe6:	ea41 0100 	orr.w	r1, r1, r0
 80a4fea:	f04f 0000 	mov.w	r0, #0
 80a4fee:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a4ff2:	e7b6      	b.n	80a4f62 <__aeabi_ddiv+0x82>
 80a4ff4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a4ff8:	bf04      	itt	eq
 80a4ffa:	4301      	orreq	r1, r0
 80a4ffc:	2000      	moveq	r0, #0
 80a4ffe:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a5002:	bf88      	it	hi
 80a5004:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a5008:	f63f aeaf 	bhi.w	80a4d6a <__aeabi_dmul+0xde>
 80a500c:	ebb5 0c03 	subs.w	ip, r5, r3
 80a5010:	bf04      	itt	eq
 80a5012:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a5016:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a501a:	f150 0000 	adcs.w	r0, r0, #0
 80a501e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a5022:	bd70      	pop	{r4, r5, r6, pc}
 80a5024:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a5028:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a502c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a5030:	bfc2      	ittt	gt
 80a5032:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a5036:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a503a:	bd70      	popgt	{r4, r5, r6, pc}
 80a503c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a5040:	f04f 0e00 	mov.w	lr, #0
 80a5044:	3c01      	subs	r4, #1
 80a5046:	e690      	b.n	80a4d6a <__aeabi_dmul+0xde>
 80a5048:	ea45 0e06 	orr.w	lr, r5, r6
 80a504c:	e68d      	b.n	80a4d6a <__aeabi_dmul+0xde>
 80a504e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a5052:	ea94 0f0c 	teq	r4, ip
 80a5056:	bf08      	it	eq
 80a5058:	ea95 0f0c 	teqeq	r5, ip
 80a505c:	f43f af3b 	beq.w	80a4ed6 <__aeabi_dmul+0x24a>
 80a5060:	ea94 0f0c 	teq	r4, ip
 80a5064:	d10a      	bne.n	80a507c <__aeabi_ddiv+0x19c>
 80a5066:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a506a:	f47f af34 	bne.w	80a4ed6 <__aeabi_dmul+0x24a>
 80a506e:	ea95 0f0c 	teq	r5, ip
 80a5072:	f47f af25 	bne.w	80a4ec0 <__aeabi_dmul+0x234>
 80a5076:	4610      	mov	r0, r2
 80a5078:	4619      	mov	r1, r3
 80a507a:	e72c      	b.n	80a4ed6 <__aeabi_dmul+0x24a>
 80a507c:	ea95 0f0c 	teq	r5, ip
 80a5080:	d106      	bne.n	80a5090 <__aeabi_ddiv+0x1b0>
 80a5082:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a5086:	f43f aefd 	beq.w	80a4e84 <__aeabi_dmul+0x1f8>
 80a508a:	4610      	mov	r0, r2
 80a508c:	4619      	mov	r1, r3
 80a508e:	e722      	b.n	80a4ed6 <__aeabi_dmul+0x24a>
 80a5090:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a5094:	bf18      	it	ne
 80a5096:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a509a:	f47f aec5 	bne.w	80a4e28 <__aeabi_dmul+0x19c>
 80a509e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a50a2:	f47f af0d 	bne.w	80a4ec0 <__aeabi_dmul+0x234>
 80a50a6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a50aa:	f47f aeeb 	bne.w	80a4e84 <__aeabi_dmul+0x1f8>
 80a50ae:	e712      	b.n	80a4ed6 <__aeabi_dmul+0x24a>

080a50b0 <__gedf2>:
 80a50b0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a50b4:	e006      	b.n	80a50c4 <__cmpdf2+0x4>
 80a50b6:	bf00      	nop

080a50b8 <__ledf2>:
 80a50b8:	f04f 0c01 	mov.w	ip, #1
 80a50bc:	e002      	b.n	80a50c4 <__cmpdf2+0x4>
 80a50be:	bf00      	nop

080a50c0 <__cmpdf2>:
 80a50c0:	f04f 0c01 	mov.w	ip, #1
 80a50c4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a50c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a50cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a50d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a50d4:	bf18      	it	ne
 80a50d6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a50da:	d01b      	beq.n	80a5114 <__cmpdf2+0x54>
 80a50dc:	b001      	add	sp, #4
 80a50de:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a50e2:	bf0c      	ite	eq
 80a50e4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a50e8:	ea91 0f03 	teqne	r1, r3
 80a50ec:	bf02      	ittt	eq
 80a50ee:	ea90 0f02 	teqeq	r0, r2
 80a50f2:	2000      	moveq	r0, #0
 80a50f4:	4770      	bxeq	lr
 80a50f6:	f110 0f00 	cmn.w	r0, #0
 80a50fa:	ea91 0f03 	teq	r1, r3
 80a50fe:	bf58      	it	pl
 80a5100:	4299      	cmppl	r1, r3
 80a5102:	bf08      	it	eq
 80a5104:	4290      	cmpeq	r0, r2
 80a5106:	bf2c      	ite	cs
 80a5108:	17d8      	asrcs	r0, r3, #31
 80a510a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a510e:	f040 0001 	orr.w	r0, r0, #1
 80a5112:	4770      	bx	lr
 80a5114:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a5118:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a511c:	d102      	bne.n	80a5124 <__cmpdf2+0x64>
 80a511e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a5122:	d107      	bne.n	80a5134 <__cmpdf2+0x74>
 80a5124:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a5128:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a512c:	d1d6      	bne.n	80a50dc <__cmpdf2+0x1c>
 80a512e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a5132:	d0d3      	beq.n	80a50dc <__cmpdf2+0x1c>
 80a5134:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a5138:	4770      	bx	lr
 80a513a:	bf00      	nop

080a513c <__aeabi_cdrcmple>:
 80a513c:	4684      	mov	ip, r0
 80a513e:	4610      	mov	r0, r2
 80a5140:	4662      	mov	r2, ip
 80a5142:	468c      	mov	ip, r1
 80a5144:	4619      	mov	r1, r3
 80a5146:	4663      	mov	r3, ip
 80a5148:	e000      	b.n	80a514c <__aeabi_cdcmpeq>
 80a514a:	bf00      	nop

080a514c <__aeabi_cdcmpeq>:
 80a514c:	b501      	push	{r0, lr}
 80a514e:	f7ff ffb7 	bl	80a50c0 <__cmpdf2>
 80a5152:	2800      	cmp	r0, #0
 80a5154:	bf48      	it	mi
 80a5156:	f110 0f00 	cmnmi.w	r0, #0
 80a515a:	bd01      	pop	{r0, pc}

080a515c <__aeabi_dcmpeq>:
 80a515c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5160:	f7ff fff4 	bl	80a514c <__aeabi_cdcmpeq>
 80a5164:	bf0c      	ite	eq
 80a5166:	2001      	moveq	r0, #1
 80a5168:	2000      	movne	r0, #0
 80a516a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a516e:	bf00      	nop

080a5170 <__aeabi_dcmplt>:
 80a5170:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5174:	f7ff ffea 	bl	80a514c <__aeabi_cdcmpeq>
 80a5178:	bf34      	ite	cc
 80a517a:	2001      	movcc	r0, #1
 80a517c:	2000      	movcs	r0, #0
 80a517e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5182:	bf00      	nop

080a5184 <__aeabi_dcmple>:
 80a5184:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5188:	f7ff ffe0 	bl	80a514c <__aeabi_cdcmpeq>
 80a518c:	bf94      	ite	ls
 80a518e:	2001      	movls	r0, #1
 80a5190:	2000      	movhi	r0, #0
 80a5192:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5196:	bf00      	nop

080a5198 <__aeabi_dcmpge>:
 80a5198:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a519c:	f7ff ffce 	bl	80a513c <__aeabi_cdrcmple>
 80a51a0:	bf94      	ite	ls
 80a51a2:	2001      	movls	r0, #1
 80a51a4:	2000      	movhi	r0, #0
 80a51a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a51aa:	bf00      	nop

080a51ac <__aeabi_dcmpgt>:
 80a51ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a51b0:	f7ff ffc4 	bl	80a513c <__aeabi_cdrcmple>
 80a51b4:	bf34      	ite	cc
 80a51b6:	2001      	movcc	r0, #1
 80a51b8:	2000      	movcs	r0, #0
 80a51ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80a51be:	bf00      	nop

080a51c0 <__aeabi_dcmpun>:
 80a51c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a51c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a51c8:	d102      	bne.n	80a51d0 <__aeabi_dcmpun+0x10>
 80a51ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a51ce:	d10a      	bne.n	80a51e6 <__aeabi_dcmpun+0x26>
 80a51d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a51d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a51d8:	d102      	bne.n	80a51e0 <__aeabi_dcmpun+0x20>
 80a51da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a51de:	d102      	bne.n	80a51e6 <__aeabi_dcmpun+0x26>
 80a51e0:	f04f 0000 	mov.w	r0, #0
 80a51e4:	4770      	bx	lr
 80a51e6:	f04f 0001 	mov.w	r0, #1
 80a51ea:	4770      	bx	lr

080a51ec <__aeabi_d2iz>:
 80a51ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a51f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a51f4:	d215      	bcs.n	80a5222 <__aeabi_d2iz+0x36>
 80a51f6:	d511      	bpl.n	80a521c <__aeabi_d2iz+0x30>
 80a51f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a51fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a5200:	d912      	bls.n	80a5228 <__aeabi_d2iz+0x3c>
 80a5202:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a5206:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a520a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a520e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a5212:	fa23 f002 	lsr.w	r0, r3, r2
 80a5216:	bf18      	it	ne
 80a5218:	4240      	negne	r0, r0
 80a521a:	4770      	bx	lr
 80a521c:	f04f 0000 	mov.w	r0, #0
 80a5220:	4770      	bx	lr
 80a5222:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a5226:	d105      	bne.n	80a5234 <__aeabi_d2iz+0x48>
 80a5228:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a522c:	bf08      	it	eq
 80a522e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a5232:	4770      	bx	lr
 80a5234:	f04f 0000 	mov.w	r0, #0
 80a5238:	4770      	bx	lr
 80a523a:	bf00      	nop

080a523c <__aeabi_d2uiz>:
 80a523c:	004a      	lsls	r2, r1, #1
 80a523e:	d211      	bcs.n	80a5264 <__aeabi_d2uiz+0x28>
 80a5240:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a5244:	d211      	bcs.n	80a526a <__aeabi_d2uiz+0x2e>
 80a5246:	d50d      	bpl.n	80a5264 <__aeabi_d2uiz+0x28>
 80a5248:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a524c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a5250:	d40e      	bmi.n	80a5270 <__aeabi_d2uiz+0x34>
 80a5252:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a5256:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a525a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a525e:	fa23 f002 	lsr.w	r0, r3, r2
 80a5262:	4770      	bx	lr
 80a5264:	f04f 0000 	mov.w	r0, #0
 80a5268:	4770      	bx	lr
 80a526a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a526e:	d102      	bne.n	80a5276 <__aeabi_d2uiz+0x3a>
 80a5270:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a5274:	4770      	bx	lr
 80a5276:	f04f 0000 	mov.w	r0, #0
 80a527a:	4770      	bx	lr

080a527c <atexit>:
 80a527c:	2300      	movs	r3, #0
 80a527e:	4601      	mov	r1, r0
 80a5280:	461a      	mov	r2, r3
 80a5282:	4618      	mov	r0, r3
 80a5284:	f000 b916 	b.w	80a54b4 <__register_exitproc>

080a5288 <atoi>:
 80a5288:	220a      	movs	r2, #10
 80a528a:	2100      	movs	r1, #0
 80a528c:	f000 b908 	b.w	80a54a0 <strtol>

080a5290 <memcpy>:
 80a5290:	440a      	add	r2, r1
 80a5292:	4291      	cmp	r1, r2
 80a5294:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80a5298:	d100      	bne.n	80a529c <memcpy+0xc>
 80a529a:	4770      	bx	lr
 80a529c:	b510      	push	{r4, lr}
 80a529e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a52a2:	4291      	cmp	r1, r2
 80a52a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a52a8:	d1f9      	bne.n	80a529e <memcpy+0xe>
 80a52aa:	bd10      	pop	{r4, pc}

080a52ac <memmove>:
 80a52ac:	4288      	cmp	r0, r1
 80a52ae:	b510      	push	{r4, lr}
 80a52b0:	eb01 0402 	add.w	r4, r1, r2
 80a52b4:	d902      	bls.n	80a52bc <memmove+0x10>
 80a52b6:	4284      	cmp	r4, r0
 80a52b8:	4623      	mov	r3, r4
 80a52ba:	d807      	bhi.n	80a52cc <memmove+0x20>
 80a52bc:	1e43      	subs	r3, r0, #1
 80a52be:	42a1      	cmp	r1, r4
 80a52c0:	d008      	beq.n	80a52d4 <memmove+0x28>
 80a52c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a52c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80a52ca:	e7f8      	b.n	80a52be <memmove+0x12>
 80a52cc:	4601      	mov	r1, r0
 80a52ce:	4402      	add	r2, r0
 80a52d0:	428a      	cmp	r2, r1
 80a52d2:	d100      	bne.n	80a52d6 <memmove+0x2a>
 80a52d4:	bd10      	pop	{r4, pc}
 80a52d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80a52da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80a52de:	e7f7      	b.n	80a52d0 <memmove+0x24>

080a52e0 <memset>:
 80a52e0:	4603      	mov	r3, r0
 80a52e2:	4402      	add	r2, r0
 80a52e4:	4293      	cmp	r3, r2
 80a52e6:	d100      	bne.n	80a52ea <memset+0xa>
 80a52e8:	4770      	bx	lr
 80a52ea:	f803 1b01 	strb.w	r1, [r3], #1
 80a52ee:	e7f9      	b.n	80a52e4 <memset+0x4>

080a52f0 <srand>:
 80a52f0:	b538      	push	{r3, r4, r5, lr}
 80a52f2:	4b10      	ldr	r3, [pc, #64]	; (80a5334 <srand+0x44>)
 80a52f4:	4604      	mov	r4, r0
 80a52f6:	681d      	ldr	r5, [r3, #0]
 80a52f8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a52fa:	b9b3      	cbnz	r3, 80a532a <srand+0x3a>
 80a52fc:	2018      	movs	r0, #24
 80a52fe:	f7fc f9db 	bl	80a16b8 <malloc>
 80a5302:	4602      	mov	r2, r0
 80a5304:	63a8      	str	r0, [r5, #56]	; 0x38
 80a5306:	b920      	cbnz	r0, 80a5312 <srand+0x22>
 80a5308:	2142      	movs	r1, #66	; 0x42
 80a530a:	4b0b      	ldr	r3, [pc, #44]	; (80a5338 <srand+0x48>)
 80a530c:	480b      	ldr	r0, [pc, #44]	; (80a533c <srand+0x4c>)
 80a530e:	f7fc fa03 	bl	80a1718 <__assert_func>
 80a5312:	490b      	ldr	r1, [pc, #44]	; (80a5340 <srand+0x50>)
 80a5314:	4b0b      	ldr	r3, [pc, #44]	; (80a5344 <srand+0x54>)
 80a5316:	e9c0 1300 	strd	r1, r3, [r0]
 80a531a:	4b0b      	ldr	r3, [pc, #44]	; (80a5348 <srand+0x58>)
 80a531c:	2100      	movs	r1, #0
 80a531e:	6083      	str	r3, [r0, #8]
 80a5320:	230b      	movs	r3, #11
 80a5322:	8183      	strh	r3, [r0, #12]
 80a5324:	2001      	movs	r0, #1
 80a5326:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80a532a:	2200      	movs	r2, #0
 80a532c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a532e:	611c      	str	r4, [r3, #16]
 80a5330:	615a      	str	r2, [r3, #20]
 80a5332:	bd38      	pop	{r3, r4, r5, pc}
 80a5334:	20001028 	.word	0x20001028
 80a5338:	080a5be8 	.word	0x080a5be8
 80a533c:	080a5bff 	.word	0x080a5bff
 80a5340:	abcd330e 	.word	0xabcd330e
 80a5344:	e66d1234 	.word	0xe66d1234
 80a5348:	0005deec 	.word	0x0005deec

080a534c <strcmp>:
 80a534c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a5350:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a5354:	2a01      	cmp	r2, #1
 80a5356:	bf28      	it	cs
 80a5358:	429a      	cmpcs	r2, r3
 80a535a:	d0f7      	beq.n	80a534c <strcmp>
 80a535c:	1ad0      	subs	r0, r2, r3
 80a535e:	4770      	bx	lr

080a5360 <strdup>:
 80a5360:	4b02      	ldr	r3, [pc, #8]	; (80a536c <strdup+0xc>)
 80a5362:	4601      	mov	r1, r0
 80a5364:	6818      	ldr	r0, [r3, #0]
 80a5366:	f000 b803 	b.w	80a5370 <_strdup_r>
 80a536a:	bf00      	nop
 80a536c:	20001028 	.word	0x20001028

080a5370 <_strdup_r>:
 80a5370:	b570      	push	{r4, r5, r6, lr}
 80a5372:	4604      	mov	r4, r0
 80a5374:	4608      	mov	r0, r1
 80a5376:	460d      	mov	r5, r1
 80a5378:	f000 f80d 	bl	80a5396 <strlen>
 80a537c:	1c46      	adds	r6, r0, #1
 80a537e:	4631      	mov	r1, r6
 80a5380:	4620      	mov	r0, r4
 80a5382:	f7fc f9b9 	bl	80a16f8 <_malloc_r>
 80a5386:	4604      	mov	r4, r0
 80a5388:	b118      	cbz	r0, 80a5392 <_strdup_r+0x22>
 80a538a:	4632      	mov	r2, r6
 80a538c:	4629      	mov	r1, r5
 80a538e:	f7ff ff7f 	bl	80a5290 <memcpy>
 80a5392:	4620      	mov	r0, r4
 80a5394:	bd70      	pop	{r4, r5, r6, pc}

080a5396 <strlen>:
 80a5396:	4603      	mov	r3, r0
 80a5398:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a539c:	2a00      	cmp	r2, #0
 80a539e:	d1fb      	bne.n	80a5398 <strlen+0x2>
 80a53a0:	1a18      	subs	r0, r3, r0
 80a53a2:	3801      	subs	r0, #1
 80a53a4:	4770      	bx	lr
	...

080a53a8 <_strtol_l.constprop.0>:
 80a53a8:	2b01      	cmp	r3, #1
 80a53aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a53ae:	4680      	mov	r8, r0
 80a53b0:	d001      	beq.n	80a53b6 <_strtol_l.constprop.0+0xe>
 80a53b2:	2b24      	cmp	r3, #36	; 0x24
 80a53b4:	d906      	bls.n	80a53c4 <_strtol_l.constprop.0+0x1c>
 80a53b6:	f7fc f9a7 	bl	80a1708 <__errno>
 80a53ba:	2316      	movs	r3, #22
 80a53bc:	6003      	str	r3, [r0, #0]
 80a53be:	2000      	movs	r0, #0
 80a53c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a53c4:	460d      	mov	r5, r1
 80a53c6:	4f35      	ldr	r7, [pc, #212]	; (80a549c <_strtol_l.constprop.0+0xf4>)
 80a53c8:	4628      	mov	r0, r5
 80a53ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a53ce:	5de6      	ldrb	r6, [r4, r7]
 80a53d0:	f016 0608 	ands.w	r6, r6, #8
 80a53d4:	d1f8      	bne.n	80a53c8 <_strtol_l.constprop.0+0x20>
 80a53d6:	2c2d      	cmp	r4, #45	; 0x2d
 80a53d8:	d12f      	bne.n	80a543a <_strtol_l.constprop.0+0x92>
 80a53da:	2601      	movs	r6, #1
 80a53dc:	782c      	ldrb	r4, [r5, #0]
 80a53de:	1c85      	adds	r5, r0, #2
 80a53e0:	2b00      	cmp	r3, #0
 80a53e2:	d057      	beq.n	80a5494 <_strtol_l.constprop.0+0xec>
 80a53e4:	2b10      	cmp	r3, #16
 80a53e6:	d109      	bne.n	80a53fc <_strtol_l.constprop.0+0x54>
 80a53e8:	2c30      	cmp	r4, #48	; 0x30
 80a53ea:	d107      	bne.n	80a53fc <_strtol_l.constprop.0+0x54>
 80a53ec:	7828      	ldrb	r0, [r5, #0]
 80a53ee:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a53f2:	2858      	cmp	r0, #88	; 0x58
 80a53f4:	d149      	bne.n	80a548a <_strtol_l.constprop.0+0xe2>
 80a53f6:	2310      	movs	r3, #16
 80a53f8:	786c      	ldrb	r4, [r5, #1]
 80a53fa:	3502      	adds	r5, #2
 80a53fc:	2700      	movs	r7, #0
 80a53fe:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 80a5402:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 80a5406:	fbbe f9f3 	udiv	r9, lr, r3
 80a540a:	4638      	mov	r0, r7
 80a540c:	fb03 ea19 	mls	sl, r3, r9, lr
 80a5410:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80a5414:	f1bc 0f09 	cmp.w	ip, #9
 80a5418:	d814      	bhi.n	80a5444 <_strtol_l.constprop.0+0x9c>
 80a541a:	4664      	mov	r4, ip
 80a541c:	42a3      	cmp	r3, r4
 80a541e:	dd22      	ble.n	80a5466 <_strtol_l.constprop.0+0xbe>
 80a5420:	2f00      	cmp	r7, #0
 80a5422:	db1d      	blt.n	80a5460 <_strtol_l.constprop.0+0xb8>
 80a5424:	4581      	cmp	r9, r0
 80a5426:	d31b      	bcc.n	80a5460 <_strtol_l.constprop.0+0xb8>
 80a5428:	d101      	bne.n	80a542e <_strtol_l.constprop.0+0x86>
 80a542a:	45a2      	cmp	sl, r4
 80a542c:	db18      	blt.n	80a5460 <_strtol_l.constprop.0+0xb8>
 80a542e:	2701      	movs	r7, #1
 80a5430:	fb00 4003 	mla	r0, r0, r3, r4
 80a5434:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a5438:	e7ea      	b.n	80a5410 <_strtol_l.constprop.0+0x68>
 80a543a:	2c2b      	cmp	r4, #43	; 0x2b
 80a543c:	bf04      	itt	eq
 80a543e:	782c      	ldrbeq	r4, [r5, #0]
 80a5440:	1c85      	addeq	r5, r0, #2
 80a5442:	e7cd      	b.n	80a53e0 <_strtol_l.constprop.0+0x38>
 80a5444:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80a5448:	f1bc 0f19 	cmp.w	ip, #25
 80a544c:	d801      	bhi.n	80a5452 <_strtol_l.constprop.0+0xaa>
 80a544e:	3c37      	subs	r4, #55	; 0x37
 80a5450:	e7e4      	b.n	80a541c <_strtol_l.constprop.0+0x74>
 80a5452:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80a5456:	f1bc 0f19 	cmp.w	ip, #25
 80a545a:	d804      	bhi.n	80a5466 <_strtol_l.constprop.0+0xbe>
 80a545c:	3c57      	subs	r4, #87	; 0x57
 80a545e:	e7dd      	b.n	80a541c <_strtol_l.constprop.0+0x74>
 80a5460:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80a5464:	e7e6      	b.n	80a5434 <_strtol_l.constprop.0+0x8c>
 80a5466:	2f00      	cmp	r7, #0
 80a5468:	da07      	bge.n	80a547a <_strtol_l.constprop.0+0xd2>
 80a546a:	2322      	movs	r3, #34	; 0x22
 80a546c:	4670      	mov	r0, lr
 80a546e:	f8c8 3000 	str.w	r3, [r8]
 80a5472:	2a00      	cmp	r2, #0
 80a5474:	d0a4      	beq.n	80a53c0 <_strtol_l.constprop.0+0x18>
 80a5476:	1e69      	subs	r1, r5, #1
 80a5478:	e005      	b.n	80a5486 <_strtol_l.constprop.0+0xde>
 80a547a:	b106      	cbz	r6, 80a547e <_strtol_l.constprop.0+0xd6>
 80a547c:	4240      	negs	r0, r0
 80a547e:	2a00      	cmp	r2, #0
 80a5480:	d09e      	beq.n	80a53c0 <_strtol_l.constprop.0+0x18>
 80a5482:	2f00      	cmp	r7, #0
 80a5484:	d1f7      	bne.n	80a5476 <_strtol_l.constprop.0+0xce>
 80a5486:	6011      	str	r1, [r2, #0]
 80a5488:	e79a      	b.n	80a53c0 <_strtol_l.constprop.0+0x18>
 80a548a:	2430      	movs	r4, #48	; 0x30
 80a548c:	2b00      	cmp	r3, #0
 80a548e:	d1b5      	bne.n	80a53fc <_strtol_l.constprop.0+0x54>
 80a5490:	2308      	movs	r3, #8
 80a5492:	e7b3      	b.n	80a53fc <_strtol_l.constprop.0+0x54>
 80a5494:	2c30      	cmp	r4, #48	; 0x30
 80a5496:	d0a9      	beq.n	80a53ec <_strtol_l.constprop.0+0x44>
 80a5498:	230a      	movs	r3, #10
 80a549a:	e7af      	b.n	80a53fc <_strtol_l.constprop.0+0x54>
 80a549c:	080a5c59 	.word	0x080a5c59

080a54a0 <strtol>:
 80a54a0:	4613      	mov	r3, r2
 80a54a2:	460a      	mov	r2, r1
 80a54a4:	4601      	mov	r1, r0
 80a54a6:	4802      	ldr	r0, [pc, #8]	; (80a54b0 <strtol+0x10>)
 80a54a8:	6800      	ldr	r0, [r0, #0]
 80a54aa:	f7ff bf7d 	b.w	80a53a8 <_strtol_l.constprop.0>
 80a54ae:	bf00      	nop
 80a54b0:	20001028 	.word	0x20001028

080a54b4 <__register_exitproc>:
 80a54b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a54b8:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 80a5568 <__register_exitproc+0xb4>
 80a54bc:	4606      	mov	r6, r0
 80a54be:	f8d8 0000 	ldr.w	r0, [r8]
 80a54c2:	461f      	mov	r7, r3
 80a54c4:	460d      	mov	r5, r1
 80a54c6:	4691      	mov	r9, r2
 80a54c8:	f000 f858 	bl	80a557c <__retarget_lock_acquire_recursive>
 80a54cc:	4b27      	ldr	r3, [pc, #156]	; (80a556c <__register_exitproc+0xb8>)
 80a54ce:	681c      	ldr	r4, [r3, #0]
 80a54d0:	b934      	cbnz	r4, 80a54e0 <__register_exitproc+0x2c>
 80a54d2:	4c27      	ldr	r4, [pc, #156]	; (80a5570 <__register_exitproc+0xbc>)
 80a54d4:	601c      	str	r4, [r3, #0]
 80a54d6:	4b27      	ldr	r3, [pc, #156]	; (80a5574 <__register_exitproc+0xc0>)
 80a54d8:	b113      	cbz	r3, 80a54e0 <__register_exitproc+0x2c>
 80a54da:	681b      	ldr	r3, [r3, #0]
 80a54dc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80a54e0:	6863      	ldr	r3, [r4, #4]
 80a54e2:	2b1f      	cmp	r3, #31
 80a54e4:	dd07      	ble.n	80a54f6 <__register_exitproc+0x42>
 80a54e6:	f8d8 0000 	ldr.w	r0, [r8]
 80a54ea:	f000 f849 	bl	80a5580 <__retarget_lock_release_recursive>
 80a54ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a54f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a54f6:	b35e      	cbz	r6, 80a5550 <__register_exitproc+0x9c>
 80a54f8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80a54fc:	b988      	cbnz	r0, 80a5522 <__register_exitproc+0x6e>
 80a54fe:	4b1e      	ldr	r3, [pc, #120]	; (80a5578 <__register_exitproc+0xc4>)
 80a5500:	b923      	cbnz	r3, 80a550c <__register_exitproc+0x58>
 80a5502:	f8d8 0000 	ldr.w	r0, [r8]
 80a5506:	f000 f83a 	bl	80a557e <__retarget_lock_release>
 80a550a:	e7f0      	b.n	80a54ee <__register_exitproc+0x3a>
 80a550c:	f44f 7084 	mov.w	r0, #264	; 0x108
 80a5510:	f7fc f8d2 	bl	80a16b8 <malloc>
 80a5514:	2800      	cmp	r0, #0
 80a5516:	d0f4      	beq.n	80a5502 <__register_exitproc+0x4e>
 80a5518:	2300      	movs	r3, #0
 80a551a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80a551e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80a5522:	2201      	movs	r2, #1
 80a5524:	6863      	ldr	r3, [r4, #4]
 80a5526:	2e02      	cmp	r6, #2
 80a5528:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80a552c:	fa02 f203 	lsl.w	r2, r2, r3
 80a5530:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80a5534:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80a5538:	ea43 0302 	orr.w	r3, r3, r2
 80a553c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80a5540:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80a5544:	bf02      	ittt	eq
 80a5546:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80a554a:	4313      	orreq	r3, r2
 80a554c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 80a5550:	6863      	ldr	r3, [r4, #4]
 80a5552:	f8d8 0000 	ldr.w	r0, [r8]
 80a5556:	1c5a      	adds	r2, r3, #1
 80a5558:	3302      	adds	r3, #2
 80a555a:	6062      	str	r2, [r4, #4]
 80a555c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80a5560:	f000 f80e 	bl	80a5580 <__retarget_lock_release_recursive>
 80a5564:	2000      	movs	r0, #0
 80a5566:	e7c4      	b.n	80a54f2 <__register_exitproc+0x3e>
 80a5568:	2000108c 	.word	0x2000108c
 80a556c:	200026e8 	.word	0x200026e8
 80a5570:	2000265c 	.word	0x2000265c
 80a5574:	00000000 	.word	0x00000000
 80a5578:	080a16b9 	.word	0x080a16b9

080a557c <__retarget_lock_acquire_recursive>:
 80a557c:	4770      	bx	lr

080a557e <__retarget_lock_release>:
 80a557e:	4770      	bx	lr

080a5580 <__retarget_lock_release_recursive>:
 80a5580:	4770      	bx	lr

080a5582 <link_code_end>:
	...

080a5584 <dynalib_user>:
 80a5584:	0021 080a 0061 080a 0089 080a 008d 080a     !...a...........
 80a5594:	0000 0000 6572 7073 7269 7461 6f69 006e     ....respiration.
 80a55a4:	7266 7165 6575 636e 0079 6f68 2074 6e69     frequency.hot in
 80a55b4:	6574 736e 7469 0079 6f63 646c 6920 746e     tensity.cold int
 80a55c4:	6e65 6973 7974 7600 6365 6f74 3a72 5f3a     ensity.vector::_
 80a55d4:	5f4d 6572 6c61 6f6c 5f63 6e69 6573 7472     M_realloc_insert
 80a55e4:	6600 6c69 6574 6572 2064 6173 706d 656c     .filtered sample
 80a55f4:	203a 4300 7275 6572 746e 7620 6c61 6575     : .Current value
 80a5604:	6f20 2066 7073 6365 7274 6d75 203a 7200      of spectrum: .r
 80a5614:	7365 6970 6172 6974 6e6f 7220 7461 0065     espiration rate.
 80a5624:	6572 7073 7269 7461 6f69 206e 0000 0000     respiration ....

080a5634 <_ZTV5Timer>:
	...
 80a563c:	05b1 080a 0605 080a 04f1 080a               ............

080a5648 <_ZTV13ADCDMA_config>:
	...
 80a5650:	0be9 080a 0beb 080a 6163 6e6e 746f 6320     ........cannot c
 80a5660:	6572 7461 2065 7473 3a64 763a 6365 6f74     reate std::vecto
 80a5670:	2072 616c 6772 7265 7420 6168 206e 616d     r larger than ma
 80a5680:	5f78 6973 657a 2928 4d00 7369 616d 6374     x_size().Mismatc
 80a5690:	6568 2064 656c 676e 6874 0073 7265 0072     hed lengths.err.
 80a56a0:	654c 676e 6874 6920 2073 6f6e 2074 2061     Length is not a 
 80a56b0:	6f70 6577 2072 666f 3220 0000               power of 2..

080a56bc <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a56c4:	1761 080a 1767 080a 17a5 080a 1775 080a     a...g.......u...
 80a56d4:	1763 080a                                   c...

080a56d8 <_ZTV7TwoWire>:
	...
 80a56e0:	1d09 080a 1d53 080a 1d2b 080a 1d0b 080a     ....S...+.......
 80a56f0:	1d33 080a 1d3b 080a 1d43 080a 1d4b 080a     3...;...C...K...

080a5700 <_ZTV9IPAddress>:
	...
 80a5708:	1d87 080a 1d85 080a 1db9 080a 7061 0070     ............app.

080a5718 <_ZTVN5spark12NetworkClassE>:
	...
 80a5720:	1e7d 080a 1e87 080a 1e91 080a 1e9b 080a     }...............
 80a5730:	1ea5 080a 1eb1 080a 1ebd 080a 1ec5 080a     ................
 80a5740:	1ecd 080a 1ed9 080a 1ee1 080a 1eeb 080a     ................
 80a5750:	1ef5 080a 616e 006e 6e69 0066 766f 0066     ....nan.inf.ovf.
 80a5760:	002e 6977 6972 676e 5400 5043 6c43 6569     ..wiring.TCPClie
 80a5770:	746e 7320 636f 656b 3d74 7825 0000 0000     nt socket=%x....

080a5780 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a5788:	2371 080a 2399 080a 273f 080a 23a7 080a     q#...#..?'...#..
 80a5798:	2375 080a                                   u#..

080a579c <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

080a57a4 <_ZTV9TCPClient>:
	...
 80a57ac:	110d 080a 1141 080a 22f9 080a 2313 080a     ....A...."...#..
 80a57bc:	2541 080a 233b 080a 23cd 080a 236f 080a     A%..;#...#..o#..
 80a57cc:	2461 080a 2745 080a 23fb 080a 25b5 080a     a$..E'...#...%..
 80a57dc:	2663 080a 261b 080a 2323 080a 2629 080a     c&...&..##..)&..
 80a57ec:	23ad 080a 5925 252d 2d6d 6425 2554 3a48     .#..%Y-%m-%dT%H:
 80a57fc:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

080a580c <_ZTV3UDP>:
	...
 80a5814:	2bf9 080a 2c1d 080a 27e3 080a 290f 080a     .+...,...'...)..
 80a5824:	27db 080a 27fb 080a 2819 080a 2833 080a     .'...'...(..3(..
 80a5834:	2855 080a 28ad 080a 28cf 080a 2a55 080a     U(...(...(..U*..
 80a5844:	2975 080a 27c5 080a 2b8d 080a 29ed 080a     u)...'...+...)..
 80a5854:	2aad 080a 2bbb 080a 2939 080a 27d1 080a     .*...+..9)...'..
 80a5864:	2a8d 080a 27d7 080a 2835 080a fff0 ffff     .*...'..5(......
 80a5874:	0000 0000 284d 080a                         ....M(..

080a587c <_ZTV11USARTSerial>:
	...
 80a5884:	2c31 080a 2c99 080a 2c75 080a 1f71 080a     1,...,..u,..q...
 80a5894:	2c45 080a 2c61 080a 2c53 080a 2c6f 080a     E,..a,..S,..o,..
 80a58a4:	2c33 080a 2c37 080a                         3,..7,..

080a58ac <_ZTV9USBSerial>:
	...
 80a58b4:	2cd7 080a 2d3d 080a 2d15 080a 1f71 080a     .,..=-...-..q...
 80a58c4:	2d07 080a 2cd9 080a 2ce9 080a 2d37 080a     .-...,...,..7-..
 80a58d4:	2cf9 080a 2cd1 080a                         .,...,..

080a58dc <_ZTVN5spark9WiFiClassE>:
	...
 80a58e4:	2f07 080a 2efd 080a 2ef3 080a 2e65 080a     ./..........e...
 80a58f4:	2ee7 080a 2edb 080a 1ebd 080a 1ec5 080a     ................
 80a5904:	2ecf 080a 2ec7 080a 2ebd 080a 2eb3 080a     ................
 80a5914:	2e6f 080a                                   o...

080a5918 <_ZSt7nothrow>:
	...

080a5919 <_ZTSSt19_Sp_make_shared_tag>:
 80a5919:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
 80a5929:	6572 5f64 6174 0067 0000                     red_tag....

080a5934 <_ZTISt19_Sp_make_shared_tag>:
 80a5934:	5974 080a 5919 080a                         tY...Y..

080a593c <_ZTIN10__cxxabiv117__class_type_infoE>:
 80a593c:	59d4 080a 5948 080a 59f8 080a               .Y..HY...Y..

080a5948 <_ZTSN10__cxxabiv117__class_type_infoE>:
 80a5948:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
 80a5958:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
 80a5968:	0045 0000                                   E...

080a596c <_ZTVN10__cxxabiv117__class_type_infoE>:
 80a596c:	0000 0000 593c 080a 3369 080a 337d 080a     ....<Y..i3..}3..
 80a597c:	3515 080a 3515 080a 33e7 080a 3329 080a     .5...5...3..)3..
 80a598c:	33cf 080a 3391 080a 335b 080a               .3...3..[3..

080a5998 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
 80a5998:	59d4 080a 59a4 080a 593c 080a               .Y...Y..<Y..

080a59a4 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
 80a59a4:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
 80a59b4:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
 80a59c4:	666e 456f 0000 0000                         nfoE....

080a59cc <_ZTVN10__cxxabiv120__si_class_type_infoE>:
 80a59cc:	0000 0000 5998 080a 3411 080a 3425 080a     .....Y...4..%4..
 80a59dc:	3515 080a 3515 080a 33e7 080a 3329 080a     .5...5...3..)3..
 80a59ec:	34e9 080a 3475 080a 3439 080a               .4..u4..94..

080a59f8 <_ZTISt9type_info>:
 80a59f8:	5974 080a 5a00 080a                         tY...Z..

080a5a00 <_ZTSSt9type_info>:
 80a5a00:	7453 7439 7079 5f65 6e69 6f66 0000 0000     St9type_info....

080a5a10 <npio2_hw>:
 80a5a10:	21fb 3ff9 21fb 4009 d97c 4012 21fb 4019     .!.?.!.@|..@.!.@
 80a5a20:	6a7a 401f d97c 4022 fdbb 4025 21fb 4029     zj.@|."@..%@.!)@
 80a5a30:	463a 402c 6a7a 402f 475c 4031 d97c 4032     :F,@zj/@\G1@|.2@
 80a5a40:	6b9c 4034 fdbb 4035 8fdb 4037 21fb 4039     .k4@..5@..7@.!9@
 80a5a50:	b41b 403a 463a 403c d85a 403d 6a7a 403f     ..:@:F<@Z.=@zj?@
 80a5a60:	7e4c 4040 475c 4041 106c 4042 d97c 4042     L~@@\GA@l.B@|.B@
 80a5a70:	a28c 4043 6b9c 4044 34ac 4045 fdbb 4045     ..C@.kD@.4E@..E@
 80a5a80:	c6cb 4046 8fdb 4047 58eb 4048 21fb 4049     ..F@..G@.XH@.!I@

080a5a90 <two_over_pi>:
 80a5a90:	f983 00a2 4e44 006e 29fc 0015 57d1 0027     ....DNn..)...W'.
 80a5aa0:	34dd 00f5 db62 00c0 993c 0095 9041 0043     .4..b...<...A.C.
 80a5ab0:	5163 00fe debb 00ab 61b7 00c5 6e3a 0024     cQ.......a..:n$.
 80a5ac0:	4dd2 0042 0649 00e0 ea09 002e 921c 00d1     .MB.I...........
 80a5ad0:	1deb 00fe b129 001c 3ee8 00a7 35f5 0082     ....)....>...5..
 80a5ae0:	bb44 002e e99c 0084 26b4 0070 7e41 005f     D........&p.A~_.
 80a5af0:	91d6 0039 8353 0039 f49c 0039 5f8b 0084     ..9.S.9...9.._..
 80a5b00:	f928 00bd 1ff8 003b ffde 0097 980f 0005     (.....;.........
 80a5b10:	2f11 00ef 5a0a 008b 1f6d 006d 7ecf 0036     ./...Z..m.m..~6.
 80a5b20:	cb09 0027 4f46 00b7 669e 003f ea2d 005f     ..'.FO...f?.-._.
 80a5b30:	27ba 0075 ebe5 00c7 7b3d 00f1 39f7 0007     .'u.....={...9..
 80a5b40:	5292 008a 6bfb 00ea b11f 005f 5d08 008d     .R...k...._..]..
 80a5b50:	0330 0056 fc7b 0046 abf0 006b bc20 00cf     0.V.{.F...k. ...
 80a5b60:	f436 009a a9e3 001d 615e 0091 1b08 00e6     6.......^a......
 80a5b70:	9985 0065 14a0 005f 408d 0068 d880 00ff     ..e..._..@h.....
 80a5b80:	7327 004d 0606 0031 56ca 0015 a8c9 0073     'sM...1..V....s.
 80a5b90:	e27b 0060 8c6b 00c0                         {.`.k...

080a5b98 <PIo2>:
 80a5b98:	0000 4000 21fb 3ff9 0000 0000 442d 3e74     ...@.!.?....-Dt>
 80a5ba8:	0000 8000 4698 3cf8 0000 6000 cc51 3b78     .....F.<...`Q.x;
 80a5bb8:	0000 8000 1b83 39f0 0000 4000 2520 387a     .......9...@ %z8
 80a5bc8:	0000 8000 8222 36e3 0000 0000 f31d 3569     ...."..6......i5

080a5bd8 <init_jk>:
 80a5bd8:	0002 0000 0003 0000 0004 0000 0006 0000     ................
 80a5be8:	4552 4e45 2054 616d 6c6c 636f 7320 6375     REENT malloc suc
 80a5bf8:	6563 6465 6465 2f00 6d74 2f70 656a 6b6e     ceeded./tmp/jenk
 80a5c08:	6e69 2d73 4347 2d43 3031 702d 7069 6c65     ins-GCC-10-pipel
 80a5c18:	6e69 2d65 3834 325f 3230 3130 3231 5f34     ine-48_20201124_
 80a5c28:	3631 3630 3831 3630 3933 732f 6372 6e2f     1606180639/src/n
 80a5c38:	7765 696c 2f62 656e 6c77 6269 6c2f 6269     ewlib/newlib/lib
 80a5c48:	2f63 7473 6c64 6269 722f 6e61 2e64 0063     c/stdlib/rand.c.

080a5c58 <_ctype_>:
 80a5c58:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 80a5c68:	2020 2020 2020 2020 2020 2020 2020 2020                     
 80a5c78:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 80a5c88:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 80a5c98:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 80a5ca8:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 80a5cb8:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 80a5cc8:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 80a5cd8:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

080a5d59 <link_const_variable_data_end>:
 80a5d59:	00          	.byte	0x00
	...

080a5d5c <link_constructors_location>:
 80a5d5c:	080a0b29 	.word	0x080a0b29
 80a5d60:	080a1101 	.word	0x080a1101
 80a5d64:	080a1155 	.word	0x080a1155
 80a5d68:	080a1179 	.word	0x080a1179
 80a5d6c:	080a1185 	.word	0x080a1185
 80a5d70:	080a11b5 	.word	0x080a11b5
 80a5d74:	080a11c1 	.word	0x080a11c1
 80a5d78:	080a1e6d 	.word	0x080a1e6d
 80a5d7c:	080a1f5d 	.word	0x080a1f5d
 80a5d80:	080a21bd 	.word	0x080a21bd
 80a5d84:	080a22d5 	.word	0x080a22d5
 80a5d88:	080a27b1 	.word	0x080a27b1
 80a5d8c:	080a2f11 	.word	0x080a2f11
 80a5d90:	080a3269 	.word	0x080a3269

080a5d94 <link_constructors_end>:
	...
